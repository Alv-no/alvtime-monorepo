# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Travel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'state': 'str',
        'email': 'str',
        'phone': 'str',
        'description': 'str',
        'person_id': 'str',
        'name': 'str',
        'dimensions_id': 'int',
        'purpose': 'str',
        'status_code': 'int',
        'deleted': 'bool',
        'employee_number': 'int',
        'source_system': 'str',
        'id': 'int',
        'updated_by': 'str',
        'created_by': 'str',
        'comment': 'str',
        'travel_identificator': 'str',
        'supplier_id': 'int',
        'travel_lines': 'list[TravelLine]',
        'custom_values': 'CustomValues'
    }

    attribute_map = {
        'state': 'State',
        'email': 'Email',
        'phone': 'Phone',
        'description': 'Description',
        'person_id': 'PersonID',
        'name': 'Name',
        'dimensions_id': 'DimensionsID',
        'purpose': 'Purpose',
        'status_code': 'StatusCode',
        'deleted': 'Deleted',
        'employee_number': 'EmployeeNumber',
        'source_system': 'SourceSystem',
        'id': 'ID',
        'updated_by': 'UpdatedBy',
        'created_by': 'CreatedBy',
        'comment': 'Comment',
        'travel_identificator': 'TravelIdentificator',
        'supplier_id': 'SupplierID',
        'travel_lines': 'TravelLines',
        'custom_values': 'CustomValues'
    }

    def __init__(self, state=None, email=None, phone=None, description=None, person_id=None, name=None, dimensions_id=None, purpose=None, status_code=None, deleted=None, employee_number=None, source_system=None, id=None, updated_by=None, created_by=None, comment=None, travel_identificator=None, supplier_id=None, travel_lines=None, custom_values=None):  # noqa: E501
        """Travel - a model defined in Swagger"""  # noqa: E501
        self._state = None
        self._email = None
        self._phone = None
        self._description = None
        self._person_id = None
        self._name = None
        self._dimensions_id = None
        self._purpose = None
        self._status_code = None
        self._deleted = None
        self._employee_number = None
        self._source_system = None
        self._id = None
        self._updated_by = None
        self._created_by = None
        self._comment = None
        self._travel_identificator = None
        self._supplier_id = None
        self._travel_lines = None
        self._custom_values = None
        self.discriminator = None
        if state is not None:
            self.state = state
        if email is not None:
            self.email = email
        if phone is not None:
            self.phone = phone
        if description is not None:
            self.description = description
        if person_id is not None:
            self.person_id = person_id
        if name is not None:
            self.name = name
        if dimensions_id is not None:
            self.dimensions_id = dimensions_id
        if purpose is not None:
            self.purpose = purpose
        if status_code is not None:
            self.status_code = status_code
        if deleted is not None:
            self.deleted = deleted
        if employee_number is not None:
            self.employee_number = employee_number
        if source_system is not None:
            self.source_system = source_system
        if id is not None:
            self.id = id
        if updated_by is not None:
            self.updated_by = updated_by
        if created_by is not None:
            self.created_by = created_by
        if comment is not None:
            self.comment = comment
        if travel_identificator is not None:
            self.travel_identificator = travel_identificator
        if supplier_id is not None:
            self.supplier_id = supplier_id
        if travel_lines is not None:
            self.travel_lines = travel_lines
        if custom_values is not None:
            self.custom_values = custom_values

    @property
    def state(self):
        """Gets the state of this Travel.  # noqa: E501


        :return: The state of this Travel.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Travel.


        :param state: The state of this Travel.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def email(self):
        """Gets the email of this Travel.  # noqa: E501


        :return: The email of this Travel.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Travel.


        :param email: The email of this Travel.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def phone(self):
        """Gets the phone of this Travel.  # noqa: E501


        :return: The phone of this Travel.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this Travel.


        :param phone: The phone of this Travel.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def description(self):
        """Gets the description of this Travel.  # noqa: E501


        :return: The description of this Travel.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Travel.


        :param description: The description of this Travel.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def person_id(self):
        """Gets the person_id of this Travel.  # noqa: E501


        :return: The person_id of this Travel.  # noqa: E501
        :rtype: str
        """
        return self._person_id

    @person_id.setter
    def person_id(self, person_id):
        """Sets the person_id of this Travel.


        :param person_id: The person_id of this Travel.  # noqa: E501
        :type: str
        """

        self._person_id = person_id

    @property
    def name(self):
        """Gets the name of this Travel.  # noqa: E501


        :return: The name of this Travel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Travel.


        :param name: The name of this Travel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def dimensions_id(self):
        """Gets the dimensions_id of this Travel.  # noqa: E501


        :return: The dimensions_id of this Travel.  # noqa: E501
        :rtype: int
        """
        return self._dimensions_id

    @dimensions_id.setter
    def dimensions_id(self, dimensions_id):
        """Sets the dimensions_id of this Travel.


        :param dimensions_id: The dimensions_id of this Travel.  # noqa: E501
        :type: int
        """

        self._dimensions_id = dimensions_id

    @property
    def purpose(self):
        """Gets the purpose of this Travel.  # noqa: E501


        :return: The purpose of this Travel.  # noqa: E501
        :rtype: str
        """
        return self._purpose

    @purpose.setter
    def purpose(self, purpose):
        """Sets the purpose of this Travel.


        :param purpose: The purpose of this Travel.  # noqa: E501
        :type: str
        """

        self._purpose = purpose

    @property
    def status_code(self):
        """Gets the status_code of this Travel.  # noqa: E501


        :return: The status_code of this Travel.  # noqa: E501
        :rtype: int
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this Travel.


        :param status_code: The status_code of this Travel.  # noqa: E501
        :type: int
        """

        self._status_code = status_code

    @property
    def deleted(self):
        """Gets the deleted of this Travel.  # noqa: E501


        :return: The deleted of this Travel.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this Travel.


        :param deleted: The deleted of this Travel.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def employee_number(self):
        """Gets the employee_number of this Travel.  # noqa: E501


        :return: The employee_number of this Travel.  # noqa: E501
        :rtype: int
        """
        return self._employee_number

    @employee_number.setter
    def employee_number(self, employee_number):
        """Sets the employee_number of this Travel.


        :param employee_number: The employee_number of this Travel.  # noqa: E501
        :type: int
        """

        self._employee_number = employee_number

    @property
    def source_system(self):
        """Gets the source_system of this Travel.  # noqa: E501


        :return: The source_system of this Travel.  # noqa: E501
        :rtype: str
        """
        return self._source_system

    @source_system.setter
    def source_system(self, source_system):
        """Sets the source_system of this Travel.


        :param source_system: The source_system of this Travel.  # noqa: E501
        :type: str
        """

        self._source_system = source_system

    @property
    def id(self):
        """Gets the id of this Travel.  # noqa: E501


        :return: The id of this Travel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Travel.


        :param id: The id of this Travel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def updated_by(self):
        """Gets the updated_by of this Travel.  # noqa: E501


        :return: The updated_by of this Travel.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this Travel.


        :param updated_by: The updated_by of this Travel.  # noqa: E501
        :type: str
        """

        self._updated_by = updated_by

    @property
    def created_by(self):
        """Gets the created_by of this Travel.  # noqa: E501


        :return: The created_by of this Travel.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Travel.


        :param created_by: The created_by of this Travel.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def comment(self):
        """Gets the comment of this Travel.  # noqa: E501


        :return: The comment of this Travel.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this Travel.


        :param comment: The comment of this Travel.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def travel_identificator(self):
        """Gets the travel_identificator of this Travel.  # noqa: E501


        :return: The travel_identificator of this Travel.  # noqa: E501
        :rtype: str
        """
        return self._travel_identificator

    @travel_identificator.setter
    def travel_identificator(self, travel_identificator):
        """Sets the travel_identificator of this Travel.


        :param travel_identificator: The travel_identificator of this Travel.  # noqa: E501
        :type: str
        """

        self._travel_identificator = travel_identificator

    @property
    def supplier_id(self):
        """Gets the supplier_id of this Travel.  # noqa: E501


        :return: The supplier_id of this Travel.  # noqa: E501
        :rtype: int
        """
        return self._supplier_id

    @supplier_id.setter
    def supplier_id(self, supplier_id):
        """Sets the supplier_id of this Travel.


        :param supplier_id: The supplier_id of this Travel.  # noqa: E501
        :type: int
        """

        self._supplier_id = supplier_id

    @property
    def travel_lines(self):
        """Gets the travel_lines of this Travel.  # noqa: E501


        :return: The travel_lines of this Travel.  # noqa: E501
        :rtype: list[TravelLine]
        """
        return self._travel_lines

    @travel_lines.setter
    def travel_lines(self, travel_lines):
        """Sets the travel_lines of this Travel.


        :param travel_lines: The travel_lines of this Travel.  # noqa: E501
        :type: list[TravelLine]
        """

        self._travel_lines = travel_lines

    @property
    def custom_values(self):
        """Gets the custom_values of this Travel.  # noqa: E501


        :return: The custom_values of this Travel.  # noqa: E501
        :rtype: CustomValues
        """
        return self._custom_values

    @custom_values.setter
    def custom_values(self, custom_values):
        """Sets the custom_values of this Travel.


        :param custom_values: The custom_values of this Travel.  # noqa: E501
        :type: CustomValues
        """

        self._custom_values = custom_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Travel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Travel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
