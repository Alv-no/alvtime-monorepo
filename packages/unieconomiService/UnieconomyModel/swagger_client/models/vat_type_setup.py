# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class VatTypeSetup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_not_vat_registered': 'bool',
        'output_vat': 'bool',
        'is_compensated': 'bool',
        'vat_code_group_no': 'str',
        'vat_code': 'str',
        'name': 'str',
        'incoming_account_number': 'int',
        'deleted': 'bool',
        'direct_journal_entry_only': 'bool',
        'default_visible': 'bool',
        'id': 'int',
        'reversed_tax_duty_vat': 'bool',
        'updated_by': 'str',
        'created_by': 'str',
        'outgoing_account_number': 'int',
        'vat_type_setup_percentages': 'list[VatTypeSetupPercentage]',
        'custom_values': 'CustomValues'
    }

    attribute_map = {
        'is_not_vat_registered': 'IsNotVatRegistered',
        'output_vat': 'OutputVat',
        'is_compensated': 'IsCompensated',
        'vat_code_group_no': 'VatCodeGroupNo',
        'vat_code': 'VatCode',
        'name': 'Name',
        'incoming_account_number': 'IncomingAccountNumber',
        'deleted': 'Deleted',
        'direct_journal_entry_only': 'DirectJournalEntryOnly',
        'default_visible': 'DefaultVisible',
        'id': 'ID',
        'reversed_tax_duty_vat': 'ReversedTaxDutyVat',
        'updated_by': 'UpdatedBy',
        'created_by': 'CreatedBy',
        'outgoing_account_number': 'OutgoingAccountNumber',
        'vat_type_setup_percentages': 'VatTypeSetupPercentages',
        'custom_values': 'CustomValues'
    }

    def __init__(self, is_not_vat_registered=None, output_vat=None, is_compensated=None, vat_code_group_no=None, vat_code=None, name=None, incoming_account_number=None, deleted=None, direct_journal_entry_only=None, default_visible=None, id=None, reversed_tax_duty_vat=None, updated_by=None, created_by=None, outgoing_account_number=None, vat_type_setup_percentages=None, custom_values=None):  # noqa: E501
        """VatTypeSetup - a model defined in Swagger"""  # noqa: E501
        self._is_not_vat_registered = None
        self._output_vat = None
        self._is_compensated = None
        self._vat_code_group_no = None
        self._vat_code = None
        self._name = None
        self._incoming_account_number = None
        self._deleted = None
        self._direct_journal_entry_only = None
        self._default_visible = None
        self._id = None
        self._reversed_tax_duty_vat = None
        self._updated_by = None
        self._created_by = None
        self._outgoing_account_number = None
        self._vat_type_setup_percentages = None
        self._custom_values = None
        self.discriminator = None
        if is_not_vat_registered is not None:
            self.is_not_vat_registered = is_not_vat_registered
        if output_vat is not None:
            self.output_vat = output_vat
        if is_compensated is not None:
            self.is_compensated = is_compensated
        if vat_code_group_no is not None:
            self.vat_code_group_no = vat_code_group_no
        if vat_code is not None:
            self.vat_code = vat_code
        if name is not None:
            self.name = name
        if incoming_account_number is not None:
            self.incoming_account_number = incoming_account_number
        if deleted is not None:
            self.deleted = deleted
        if direct_journal_entry_only is not None:
            self.direct_journal_entry_only = direct_journal_entry_only
        if default_visible is not None:
            self.default_visible = default_visible
        if id is not None:
            self.id = id
        if reversed_tax_duty_vat is not None:
            self.reversed_tax_duty_vat = reversed_tax_duty_vat
        if updated_by is not None:
            self.updated_by = updated_by
        if created_by is not None:
            self.created_by = created_by
        if outgoing_account_number is not None:
            self.outgoing_account_number = outgoing_account_number
        if vat_type_setup_percentages is not None:
            self.vat_type_setup_percentages = vat_type_setup_percentages
        if custom_values is not None:
            self.custom_values = custom_values

    @property
    def is_not_vat_registered(self):
        """Gets the is_not_vat_registered of this VatTypeSetup.  # noqa: E501


        :return: The is_not_vat_registered of this VatTypeSetup.  # noqa: E501
        :rtype: bool
        """
        return self._is_not_vat_registered

    @is_not_vat_registered.setter
    def is_not_vat_registered(self, is_not_vat_registered):
        """Sets the is_not_vat_registered of this VatTypeSetup.


        :param is_not_vat_registered: The is_not_vat_registered of this VatTypeSetup.  # noqa: E501
        :type: bool
        """

        self._is_not_vat_registered = is_not_vat_registered

    @property
    def output_vat(self):
        """Gets the output_vat of this VatTypeSetup.  # noqa: E501


        :return: The output_vat of this VatTypeSetup.  # noqa: E501
        :rtype: bool
        """
        return self._output_vat

    @output_vat.setter
    def output_vat(self, output_vat):
        """Sets the output_vat of this VatTypeSetup.


        :param output_vat: The output_vat of this VatTypeSetup.  # noqa: E501
        :type: bool
        """

        self._output_vat = output_vat

    @property
    def is_compensated(self):
        """Gets the is_compensated of this VatTypeSetup.  # noqa: E501


        :return: The is_compensated of this VatTypeSetup.  # noqa: E501
        :rtype: bool
        """
        return self._is_compensated

    @is_compensated.setter
    def is_compensated(self, is_compensated):
        """Sets the is_compensated of this VatTypeSetup.


        :param is_compensated: The is_compensated of this VatTypeSetup.  # noqa: E501
        :type: bool
        """

        self._is_compensated = is_compensated

    @property
    def vat_code_group_no(self):
        """Gets the vat_code_group_no of this VatTypeSetup.  # noqa: E501


        :return: The vat_code_group_no of this VatTypeSetup.  # noqa: E501
        :rtype: str
        """
        return self._vat_code_group_no

    @vat_code_group_no.setter
    def vat_code_group_no(self, vat_code_group_no):
        """Sets the vat_code_group_no of this VatTypeSetup.


        :param vat_code_group_no: The vat_code_group_no of this VatTypeSetup.  # noqa: E501
        :type: str
        """

        self._vat_code_group_no = vat_code_group_no

    @property
    def vat_code(self):
        """Gets the vat_code of this VatTypeSetup.  # noqa: E501


        :return: The vat_code of this VatTypeSetup.  # noqa: E501
        :rtype: str
        """
        return self._vat_code

    @vat_code.setter
    def vat_code(self, vat_code):
        """Sets the vat_code of this VatTypeSetup.


        :param vat_code: The vat_code of this VatTypeSetup.  # noqa: E501
        :type: str
        """

        self._vat_code = vat_code

    @property
    def name(self):
        """Gets the name of this VatTypeSetup.  # noqa: E501


        :return: The name of this VatTypeSetup.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VatTypeSetup.


        :param name: The name of this VatTypeSetup.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def incoming_account_number(self):
        """Gets the incoming_account_number of this VatTypeSetup.  # noqa: E501


        :return: The incoming_account_number of this VatTypeSetup.  # noqa: E501
        :rtype: int
        """
        return self._incoming_account_number

    @incoming_account_number.setter
    def incoming_account_number(self, incoming_account_number):
        """Sets the incoming_account_number of this VatTypeSetup.


        :param incoming_account_number: The incoming_account_number of this VatTypeSetup.  # noqa: E501
        :type: int
        """

        self._incoming_account_number = incoming_account_number

    @property
    def deleted(self):
        """Gets the deleted of this VatTypeSetup.  # noqa: E501


        :return: The deleted of this VatTypeSetup.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this VatTypeSetup.


        :param deleted: The deleted of this VatTypeSetup.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def direct_journal_entry_only(self):
        """Gets the direct_journal_entry_only of this VatTypeSetup.  # noqa: E501


        :return: The direct_journal_entry_only of this VatTypeSetup.  # noqa: E501
        :rtype: bool
        """
        return self._direct_journal_entry_only

    @direct_journal_entry_only.setter
    def direct_journal_entry_only(self, direct_journal_entry_only):
        """Sets the direct_journal_entry_only of this VatTypeSetup.


        :param direct_journal_entry_only: The direct_journal_entry_only of this VatTypeSetup.  # noqa: E501
        :type: bool
        """

        self._direct_journal_entry_only = direct_journal_entry_only

    @property
    def default_visible(self):
        """Gets the default_visible of this VatTypeSetup.  # noqa: E501


        :return: The default_visible of this VatTypeSetup.  # noqa: E501
        :rtype: bool
        """
        return self._default_visible

    @default_visible.setter
    def default_visible(self, default_visible):
        """Sets the default_visible of this VatTypeSetup.


        :param default_visible: The default_visible of this VatTypeSetup.  # noqa: E501
        :type: bool
        """

        self._default_visible = default_visible

    @property
    def id(self):
        """Gets the id of this VatTypeSetup.  # noqa: E501


        :return: The id of this VatTypeSetup.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VatTypeSetup.


        :param id: The id of this VatTypeSetup.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def reversed_tax_duty_vat(self):
        """Gets the reversed_tax_duty_vat of this VatTypeSetup.  # noqa: E501


        :return: The reversed_tax_duty_vat of this VatTypeSetup.  # noqa: E501
        :rtype: bool
        """
        return self._reversed_tax_duty_vat

    @reversed_tax_duty_vat.setter
    def reversed_tax_duty_vat(self, reversed_tax_duty_vat):
        """Sets the reversed_tax_duty_vat of this VatTypeSetup.


        :param reversed_tax_duty_vat: The reversed_tax_duty_vat of this VatTypeSetup.  # noqa: E501
        :type: bool
        """

        self._reversed_tax_duty_vat = reversed_tax_duty_vat

    @property
    def updated_by(self):
        """Gets the updated_by of this VatTypeSetup.  # noqa: E501


        :return: The updated_by of this VatTypeSetup.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this VatTypeSetup.


        :param updated_by: The updated_by of this VatTypeSetup.  # noqa: E501
        :type: str
        """

        self._updated_by = updated_by

    @property
    def created_by(self):
        """Gets the created_by of this VatTypeSetup.  # noqa: E501


        :return: The created_by of this VatTypeSetup.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this VatTypeSetup.


        :param created_by: The created_by of this VatTypeSetup.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def outgoing_account_number(self):
        """Gets the outgoing_account_number of this VatTypeSetup.  # noqa: E501


        :return: The outgoing_account_number of this VatTypeSetup.  # noqa: E501
        :rtype: int
        """
        return self._outgoing_account_number

    @outgoing_account_number.setter
    def outgoing_account_number(self, outgoing_account_number):
        """Sets the outgoing_account_number of this VatTypeSetup.


        :param outgoing_account_number: The outgoing_account_number of this VatTypeSetup.  # noqa: E501
        :type: int
        """

        self._outgoing_account_number = outgoing_account_number

    @property
    def vat_type_setup_percentages(self):
        """Gets the vat_type_setup_percentages of this VatTypeSetup.  # noqa: E501


        :return: The vat_type_setup_percentages of this VatTypeSetup.  # noqa: E501
        :rtype: list[VatTypeSetupPercentage]
        """
        return self._vat_type_setup_percentages

    @vat_type_setup_percentages.setter
    def vat_type_setup_percentages(self, vat_type_setup_percentages):
        """Sets the vat_type_setup_percentages of this VatTypeSetup.


        :param vat_type_setup_percentages: The vat_type_setup_percentages of this VatTypeSetup.  # noqa: E501
        :type: list[VatTypeSetupPercentage]
        """

        self._vat_type_setup_percentages = vat_type_setup_percentages

    @property
    def custom_values(self):
        """Gets the custom_values of this VatTypeSetup.  # noqa: E501


        :return: The custom_values of this VatTypeSetup.  # noqa: E501
        :rtype: CustomValues
        """
        return self._custom_values

    @custom_values.setter
    def custom_values(self, custom_values):
        """Sets the custom_values of this VatTypeSetup.


        :param custom_values: The custom_values of this VatTypeSetup.  # noqa: E501
        :type: CustomValues
        """

        self._custom_values = custom_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VatTypeSetup, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VatTypeSetup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
