# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class A06Options(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'year': 'int',
        'to_period': 'str',
        'from_period': 'str',
        'include_info_per_person': 'bool',
        'report_type': 'str',
        'include_employments': 'bool',
        'include_income': 'bool',
        'custom_values': 'CustomValues'
    }

    attribute_map = {
        'year': 'Year',
        'to_period': 'ToPeriod',
        'from_period': 'FromPeriod',
        'include_info_per_person': 'IncludeInfoPerPerson',
        'report_type': 'ReportType',
        'include_employments': 'IncludeEmployments',
        'include_income': 'IncludeIncome',
        'custom_values': 'CustomValues'
    }

    def __init__(self, year=None, to_period=None, from_period=None, include_info_per_person=None, report_type=None, include_employments=None, include_income=None, custom_values=None):  # noqa: E501
        """A06Options - a model defined in Swagger"""  # noqa: E501
        self._year = None
        self._to_period = None
        self._from_period = None
        self._include_info_per_person = None
        self._report_type = None
        self._include_employments = None
        self._include_income = None
        self._custom_values = None
        self.discriminator = None
        if year is not None:
            self.year = year
        if to_period is not None:
            self.to_period = to_period
        if from_period is not None:
            self.from_period = from_period
        if include_info_per_person is not None:
            self.include_info_per_person = include_info_per_person
        if report_type is not None:
            self.report_type = report_type
        if include_employments is not None:
            self.include_employments = include_employments
        if include_income is not None:
            self.include_income = include_income
        if custom_values is not None:
            self.custom_values = custom_values

    @property
    def year(self):
        """Gets the year of this A06Options.  # noqa: E501


        :return: The year of this A06Options.  # noqa: E501
        :rtype: int
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this A06Options.


        :param year: The year of this A06Options.  # noqa: E501
        :type: int
        """

        self._year = year

    @property
    def to_period(self):
        """Gets the to_period of this A06Options.  # noqa: E501


        :return: The to_period of this A06Options.  # noqa: E501
        :rtype: str
        """
        return self._to_period

    @to_period.setter
    def to_period(self, to_period):
        """Sets the to_period of this A06Options.


        :param to_period: The to_period of this A06Options.  # noqa: E501
        :type: str
        """

        self._to_period = to_period

    @property
    def from_period(self):
        """Gets the from_period of this A06Options.  # noqa: E501


        :return: The from_period of this A06Options.  # noqa: E501
        :rtype: str
        """
        return self._from_period

    @from_period.setter
    def from_period(self, from_period):
        """Sets the from_period of this A06Options.


        :param from_period: The from_period of this A06Options.  # noqa: E501
        :type: str
        """

        self._from_period = from_period

    @property
    def include_info_per_person(self):
        """Gets the include_info_per_person of this A06Options.  # noqa: E501


        :return: The include_info_per_person of this A06Options.  # noqa: E501
        :rtype: bool
        """
        return self._include_info_per_person

    @include_info_per_person.setter
    def include_info_per_person(self, include_info_per_person):
        """Sets the include_info_per_person of this A06Options.


        :param include_info_per_person: The include_info_per_person of this A06Options.  # noqa: E501
        :type: bool
        """

        self._include_info_per_person = include_info_per_person

    @property
    def report_type(self):
        """Gets the report_type of this A06Options.  # noqa: E501


        :return: The report_type of this A06Options.  # noqa: E501
        :rtype: str
        """
        return self._report_type

    @report_type.setter
    def report_type(self, report_type):
        """Sets the report_type of this A06Options.


        :param report_type: The report_type of this A06Options.  # noqa: E501
        :type: str
        """

        self._report_type = report_type

    @property
    def include_employments(self):
        """Gets the include_employments of this A06Options.  # noqa: E501


        :return: The include_employments of this A06Options.  # noqa: E501
        :rtype: bool
        """
        return self._include_employments

    @include_employments.setter
    def include_employments(self, include_employments):
        """Sets the include_employments of this A06Options.


        :param include_employments: The include_employments of this A06Options.  # noqa: E501
        :type: bool
        """

        self._include_employments = include_employments

    @property
    def include_income(self):
        """Gets the include_income of this A06Options.  # noqa: E501


        :return: The include_income of this A06Options.  # noqa: E501
        :rtype: bool
        """
        return self._include_income

    @include_income.setter
    def include_income(self, include_income):
        """Sets the include_income of this A06Options.


        :param include_income: The include_income of this A06Options.  # noqa: E501
        :type: bool
        """

        self._include_income = include_income

    @property
    def custom_values(self):
        """Gets the custom_values of this A06Options.  # noqa: E501


        :return: The custom_values of this A06Options.  # noqa: E501
        :rtype: CustomValues
        """
        return self._custom_values

    @custom_values.setter
    def custom_values(self, custom_values):
        """Sets the custom_values of this A06Options.


        :param custom_values: The custom_values of this A06Options.  # noqa: E501
        :type: CustomValues
        """

        self._custom_values = custom_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(A06Options, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, A06Options):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
