# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ReportDefinition(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'category': 'str',
        'version': 'str',
        'description': 'str',
        'template_link_id': 'str',
        'visible': 'bool',
        'unique_report_id': 'str',
        'name': 'str',
        'deleted': 'bool',
        'category_label': 'str',
        'report_type': 'int',
        'id': 'int',
        'updated_by': 'str',
        'report_source': 'str',
        'created_by': 'str',
        'is_standard': 'bool',
        'md5': 'str',
        'custom_values': 'CustomValues'
    }

    attribute_map = {
        'category': 'Category',
        'version': 'Version',
        'description': 'Description',
        'template_link_id': 'TemplateLinkId',
        'visible': 'Visible',
        'unique_report_id': 'UniqueReportID',
        'name': 'Name',
        'deleted': 'Deleted',
        'category_label': 'CategoryLabel',
        'report_type': 'ReportType',
        'id': 'ID',
        'updated_by': 'UpdatedBy',
        'report_source': 'ReportSource',
        'created_by': 'CreatedBy',
        'is_standard': 'IsStandard',
        'md5': 'Md5',
        'custom_values': 'CustomValues'
    }

    def __init__(self, category=None, version=None, description=None, template_link_id=None, visible=None, unique_report_id=None, name=None, deleted=None, category_label=None, report_type=None, id=None, updated_by=None, report_source=None, created_by=None, is_standard=None, md5=None, custom_values=None):  # noqa: E501
        """ReportDefinition - a model defined in Swagger"""  # noqa: E501
        self._category = None
        self._version = None
        self._description = None
        self._template_link_id = None
        self._visible = None
        self._unique_report_id = None
        self._name = None
        self._deleted = None
        self._category_label = None
        self._report_type = None
        self._id = None
        self._updated_by = None
        self._report_source = None
        self._created_by = None
        self._is_standard = None
        self._md5 = None
        self._custom_values = None
        self.discriminator = None
        if category is not None:
            self.category = category
        if version is not None:
            self.version = version
        if description is not None:
            self.description = description
        if template_link_id is not None:
            self.template_link_id = template_link_id
        if visible is not None:
            self.visible = visible
        if unique_report_id is not None:
            self.unique_report_id = unique_report_id
        if name is not None:
            self.name = name
        if deleted is not None:
            self.deleted = deleted
        if category_label is not None:
            self.category_label = category_label
        if report_type is not None:
            self.report_type = report_type
        if id is not None:
            self.id = id
        if updated_by is not None:
            self.updated_by = updated_by
        if report_source is not None:
            self.report_source = report_source
        if created_by is not None:
            self.created_by = created_by
        if is_standard is not None:
            self.is_standard = is_standard
        if md5 is not None:
            self.md5 = md5
        if custom_values is not None:
            self.custom_values = custom_values

    @property
    def category(self):
        """Gets the category of this ReportDefinition.  # noqa: E501


        :return: The category of this ReportDefinition.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this ReportDefinition.


        :param category: The category of this ReportDefinition.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def version(self):
        """Gets the version of this ReportDefinition.  # noqa: E501


        :return: The version of this ReportDefinition.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ReportDefinition.


        :param version: The version of this ReportDefinition.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def description(self):
        """Gets the description of this ReportDefinition.  # noqa: E501


        :return: The description of this ReportDefinition.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ReportDefinition.


        :param description: The description of this ReportDefinition.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def template_link_id(self):
        """Gets the template_link_id of this ReportDefinition.  # noqa: E501


        :return: The template_link_id of this ReportDefinition.  # noqa: E501
        :rtype: str
        """
        return self._template_link_id

    @template_link_id.setter
    def template_link_id(self, template_link_id):
        """Sets the template_link_id of this ReportDefinition.


        :param template_link_id: The template_link_id of this ReportDefinition.  # noqa: E501
        :type: str
        """

        self._template_link_id = template_link_id

    @property
    def visible(self):
        """Gets the visible of this ReportDefinition.  # noqa: E501


        :return: The visible of this ReportDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._visible

    @visible.setter
    def visible(self, visible):
        """Sets the visible of this ReportDefinition.


        :param visible: The visible of this ReportDefinition.  # noqa: E501
        :type: bool
        """

        self._visible = visible

    @property
    def unique_report_id(self):
        """Gets the unique_report_id of this ReportDefinition.  # noqa: E501


        :return: The unique_report_id of this ReportDefinition.  # noqa: E501
        :rtype: str
        """
        return self._unique_report_id

    @unique_report_id.setter
    def unique_report_id(self, unique_report_id):
        """Sets the unique_report_id of this ReportDefinition.


        :param unique_report_id: The unique_report_id of this ReportDefinition.  # noqa: E501
        :type: str
        """

        self._unique_report_id = unique_report_id

    @property
    def name(self):
        """Gets the name of this ReportDefinition.  # noqa: E501


        :return: The name of this ReportDefinition.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ReportDefinition.


        :param name: The name of this ReportDefinition.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def deleted(self):
        """Gets the deleted of this ReportDefinition.  # noqa: E501


        :return: The deleted of this ReportDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this ReportDefinition.


        :param deleted: The deleted of this ReportDefinition.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def category_label(self):
        """Gets the category_label of this ReportDefinition.  # noqa: E501


        :return: The category_label of this ReportDefinition.  # noqa: E501
        :rtype: str
        """
        return self._category_label

    @category_label.setter
    def category_label(self, category_label):
        """Sets the category_label of this ReportDefinition.


        :param category_label: The category_label of this ReportDefinition.  # noqa: E501
        :type: str
        """

        self._category_label = category_label

    @property
    def report_type(self):
        """Gets the report_type of this ReportDefinition.  # noqa: E501


        :return: The report_type of this ReportDefinition.  # noqa: E501
        :rtype: int
        """
        return self._report_type

    @report_type.setter
    def report_type(self, report_type):
        """Sets the report_type of this ReportDefinition.


        :param report_type: The report_type of this ReportDefinition.  # noqa: E501
        :type: int
        """

        self._report_type = report_type

    @property
    def id(self):
        """Gets the id of this ReportDefinition.  # noqa: E501


        :return: The id of this ReportDefinition.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ReportDefinition.


        :param id: The id of this ReportDefinition.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def updated_by(self):
        """Gets the updated_by of this ReportDefinition.  # noqa: E501


        :return: The updated_by of this ReportDefinition.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this ReportDefinition.


        :param updated_by: The updated_by of this ReportDefinition.  # noqa: E501
        :type: str
        """

        self._updated_by = updated_by

    @property
    def report_source(self):
        """Gets the report_source of this ReportDefinition.  # noqa: E501


        :return: The report_source of this ReportDefinition.  # noqa: E501
        :rtype: str
        """
        return self._report_source

    @report_source.setter
    def report_source(self, report_source):
        """Sets the report_source of this ReportDefinition.


        :param report_source: The report_source of this ReportDefinition.  # noqa: E501
        :type: str
        """

        self._report_source = report_source

    @property
    def created_by(self):
        """Gets the created_by of this ReportDefinition.  # noqa: E501


        :return: The created_by of this ReportDefinition.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this ReportDefinition.


        :param created_by: The created_by of this ReportDefinition.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def is_standard(self):
        """Gets the is_standard of this ReportDefinition.  # noqa: E501


        :return: The is_standard of this ReportDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._is_standard

    @is_standard.setter
    def is_standard(self, is_standard):
        """Sets the is_standard of this ReportDefinition.


        :param is_standard: The is_standard of this ReportDefinition.  # noqa: E501
        :type: bool
        """

        self._is_standard = is_standard

    @property
    def md5(self):
        """Gets the md5 of this ReportDefinition.  # noqa: E501


        :return: The md5 of this ReportDefinition.  # noqa: E501
        :rtype: str
        """
        return self._md5

    @md5.setter
    def md5(self, md5):
        """Sets the md5 of this ReportDefinition.


        :param md5: The md5 of this ReportDefinition.  # noqa: E501
        :type: str
        """

        self._md5 = md5

    @property
    def custom_values(self):
        """Gets the custom_values of this ReportDefinition.  # noqa: E501


        :return: The custom_values of this ReportDefinition.  # noqa: E501
        :rtype: CustomValues
        """
        return self._custom_values

    @custom_values.setter
    def custom_values(self, custom_values):
        """Sets the custom_values of this ReportDefinition.


        :param custom_values: The custom_values of this ReportDefinition.  # noqa: E501
        :type: CustomValues
        """

        self._custom_values = custom_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReportDefinition, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportDefinition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
