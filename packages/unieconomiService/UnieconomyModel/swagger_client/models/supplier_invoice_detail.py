# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SupplierInvoiceDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_number': 'int',
        'description': 'str',
        'vat_code': 'str',
        'vat_type_name': 'str',
        'account_id': 'int',
        'invoice_number': 'str',
        'account_name': 'str',
        'vat_type_id': 'int',
        'supplier_id': 'int',
        'supplier_invoice_id': 'int',
        'custom_values': 'CustomValues'
    }

    attribute_map = {
        'account_number': 'AccountNumber',
        'description': 'Description',
        'vat_code': 'VatCode',
        'vat_type_name': 'VatTypeName',
        'account_id': 'AccountID',
        'invoice_number': 'InvoiceNumber',
        'account_name': 'AccountName',
        'vat_type_id': 'VatTypeID',
        'supplier_id': 'SupplierID',
        'supplier_invoice_id': 'SupplierInvoiceID',
        'custom_values': 'CustomValues'
    }

    def __init__(self, account_number=None, description=None, vat_code=None, vat_type_name=None, account_id=None, invoice_number=None, account_name=None, vat_type_id=None, supplier_id=None, supplier_invoice_id=None, custom_values=None):  # noqa: E501
        """SupplierInvoiceDetail - a model defined in Swagger"""  # noqa: E501
        self._account_number = None
        self._description = None
        self._vat_code = None
        self._vat_type_name = None
        self._account_id = None
        self._invoice_number = None
        self._account_name = None
        self._vat_type_id = None
        self._supplier_id = None
        self._supplier_invoice_id = None
        self._custom_values = None
        self.discriminator = None
        if account_number is not None:
            self.account_number = account_number
        if description is not None:
            self.description = description
        if vat_code is not None:
            self.vat_code = vat_code
        if vat_type_name is not None:
            self.vat_type_name = vat_type_name
        if account_id is not None:
            self.account_id = account_id
        if invoice_number is not None:
            self.invoice_number = invoice_number
        if account_name is not None:
            self.account_name = account_name
        if vat_type_id is not None:
            self.vat_type_id = vat_type_id
        if supplier_id is not None:
            self.supplier_id = supplier_id
        if supplier_invoice_id is not None:
            self.supplier_invoice_id = supplier_invoice_id
        if custom_values is not None:
            self.custom_values = custom_values

    @property
    def account_number(self):
        """Gets the account_number of this SupplierInvoiceDetail.  # noqa: E501


        :return: The account_number of this SupplierInvoiceDetail.  # noqa: E501
        :rtype: int
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this SupplierInvoiceDetail.


        :param account_number: The account_number of this SupplierInvoiceDetail.  # noqa: E501
        :type: int
        """

        self._account_number = account_number

    @property
    def description(self):
        """Gets the description of this SupplierInvoiceDetail.  # noqa: E501


        :return: The description of this SupplierInvoiceDetail.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SupplierInvoiceDetail.


        :param description: The description of this SupplierInvoiceDetail.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def vat_code(self):
        """Gets the vat_code of this SupplierInvoiceDetail.  # noqa: E501


        :return: The vat_code of this SupplierInvoiceDetail.  # noqa: E501
        :rtype: str
        """
        return self._vat_code

    @vat_code.setter
    def vat_code(self, vat_code):
        """Sets the vat_code of this SupplierInvoiceDetail.


        :param vat_code: The vat_code of this SupplierInvoiceDetail.  # noqa: E501
        :type: str
        """

        self._vat_code = vat_code

    @property
    def vat_type_name(self):
        """Gets the vat_type_name of this SupplierInvoiceDetail.  # noqa: E501


        :return: The vat_type_name of this SupplierInvoiceDetail.  # noqa: E501
        :rtype: str
        """
        return self._vat_type_name

    @vat_type_name.setter
    def vat_type_name(self, vat_type_name):
        """Sets the vat_type_name of this SupplierInvoiceDetail.


        :param vat_type_name: The vat_type_name of this SupplierInvoiceDetail.  # noqa: E501
        :type: str
        """

        self._vat_type_name = vat_type_name

    @property
    def account_id(self):
        """Gets the account_id of this SupplierInvoiceDetail.  # noqa: E501


        :return: The account_id of this SupplierInvoiceDetail.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this SupplierInvoiceDetail.


        :param account_id: The account_id of this SupplierInvoiceDetail.  # noqa: E501
        :type: int
        """

        self._account_id = account_id

    @property
    def invoice_number(self):
        """Gets the invoice_number of this SupplierInvoiceDetail.  # noqa: E501


        :return: The invoice_number of this SupplierInvoiceDetail.  # noqa: E501
        :rtype: str
        """
        return self._invoice_number

    @invoice_number.setter
    def invoice_number(self, invoice_number):
        """Sets the invoice_number of this SupplierInvoiceDetail.


        :param invoice_number: The invoice_number of this SupplierInvoiceDetail.  # noqa: E501
        :type: str
        """

        self._invoice_number = invoice_number

    @property
    def account_name(self):
        """Gets the account_name of this SupplierInvoiceDetail.  # noqa: E501


        :return: The account_name of this SupplierInvoiceDetail.  # noqa: E501
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this SupplierInvoiceDetail.


        :param account_name: The account_name of this SupplierInvoiceDetail.  # noqa: E501
        :type: str
        """

        self._account_name = account_name

    @property
    def vat_type_id(self):
        """Gets the vat_type_id of this SupplierInvoiceDetail.  # noqa: E501


        :return: The vat_type_id of this SupplierInvoiceDetail.  # noqa: E501
        :rtype: int
        """
        return self._vat_type_id

    @vat_type_id.setter
    def vat_type_id(self, vat_type_id):
        """Sets the vat_type_id of this SupplierInvoiceDetail.


        :param vat_type_id: The vat_type_id of this SupplierInvoiceDetail.  # noqa: E501
        :type: int
        """

        self._vat_type_id = vat_type_id

    @property
    def supplier_id(self):
        """Gets the supplier_id of this SupplierInvoiceDetail.  # noqa: E501


        :return: The supplier_id of this SupplierInvoiceDetail.  # noqa: E501
        :rtype: int
        """
        return self._supplier_id

    @supplier_id.setter
    def supplier_id(self, supplier_id):
        """Sets the supplier_id of this SupplierInvoiceDetail.


        :param supplier_id: The supplier_id of this SupplierInvoiceDetail.  # noqa: E501
        :type: int
        """

        self._supplier_id = supplier_id

    @property
    def supplier_invoice_id(self):
        """Gets the supplier_invoice_id of this SupplierInvoiceDetail.  # noqa: E501


        :return: The supplier_invoice_id of this SupplierInvoiceDetail.  # noqa: E501
        :rtype: int
        """
        return self._supplier_invoice_id

    @supplier_invoice_id.setter
    def supplier_invoice_id(self, supplier_invoice_id):
        """Sets the supplier_invoice_id of this SupplierInvoiceDetail.


        :param supplier_invoice_id: The supplier_invoice_id of this SupplierInvoiceDetail.  # noqa: E501
        :type: int
        """

        self._supplier_invoice_id = supplier_invoice_id

    @property
    def custom_values(self):
        """Gets the custom_values of this SupplierInvoiceDetail.  # noqa: E501


        :return: The custom_values of this SupplierInvoiceDetail.  # noqa: E501
        :rtype: CustomValues
        """
        return self._custom_values

    @custom_values.setter
    def custom_values(self, custom_values):
        """Sets the custom_values of this SupplierInvoiceDetail.


        :param custom_values: The custom_values of this SupplierInvoiceDetail.  # noqa: E501
        :type: CustomValues
        """

        self._custom_values = custom_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SupplierInvoiceDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SupplierInvoiceDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
