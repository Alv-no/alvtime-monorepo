# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EmployeeTaxCard(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'loenn_kun_trygdeavgift_til_utenlandsk_borger_id': 'int',
        'table': 'str',
        'year': 'int',
        'pensjon_id': 'int',
        'taxcard_id': 'int',
        'status_code': 'int',
        'deleted': 'bool',
        'loenn_fra_biarbeidsgiver_id': 'int',
        'loenn_til_utenrikstjenestemann_id': 'int',
        'employee_number': 'int',
        'not_main_employer': 'bool',
        'loenn_kun_trygdeavgift_til_utenlandsk_borger_som_grensegjenger_id': 'int',
        'id': 'int',
        'secondary_table': 'str',
        'resultat_status': 'str',
        'updated_by': 'str',
        'created_by': 'str',
        'loenn_fra_hovedarbeidsgiver_id': 'int',
        'ufoere_ytelser_andre_id': 'int',
        'employee_id': 'int',
        'tilleggsopplysning': 'str',
        'skd_xml': 'str',
        'loenn_fra_hovedarbeidsgiver': 'TaxCard',
        'loenn_fra_biarbeidsgiver': 'TaxCard',
        'pensjon': 'TaxCard',
        'loenn_til_utenrikstjenestemann': 'TaxCard',
        'loenn_kun_trygdeavgift_til_utenlandsk_borger': 'TaxCard',
        'loenn_kun_trygdeavgift_til_utenlandsk_borger_som_grensegjenger': 'TaxCard',
        'ufoere_ytelser_andre': 'TaxCard',
        'custom_values': 'CustomValues'
    }

    attribute_map = {
        'loenn_kun_trygdeavgift_til_utenlandsk_borger_id': 'loennKunTrygdeavgiftTilUtenlandskBorgerID',
        'table': 'Table',
        'year': 'Year',
        'pensjon_id': 'pensjonID',
        'taxcard_id': 'TaxcardId',
        'status_code': 'StatusCode',
        'deleted': 'Deleted',
        'loenn_fra_biarbeidsgiver_id': 'loennFraBiarbeidsgiverID',
        'loenn_til_utenrikstjenestemann_id': 'loennTilUtenrikstjenestemannID',
        'employee_number': 'EmployeeNumber',
        'not_main_employer': 'NotMainEmployer',
        'loenn_kun_trygdeavgift_til_utenlandsk_borger_som_grensegjenger_id': 'loennKunTrygdeavgiftTilUtenlandskBorgerSomGrensegjengerID',
        'id': 'ID',
        'secondary_table': 'SecondaryTable',
        'resultat_status': 'ResultatStatus',
        'updated_by': 'UpdatedBy',
        'created_by': 'CreatedBy',
        'loenn_fra_hovedarbeidsgiver_id': 'loennFraHovedarbeidsgiverID',
        'ufoere_ytelser_andre_id': 'ufoereYtelserAndreID',
        'employee_id': 'EmployeeID',
        'tilleggsopplysning': 'Tilleggsopplysning',
        'skd_xml': 'SKDXml',
        'loenn_fra_hovedarbeidsgiver': 'loennFraHovedarbeidsgiver',
        'loenn_fra_biarbeidsgiver': 'loennFraBiarbeidsgiver',
        'pensjon': 'pensjon',
        'loenn_til_utenrikstjenestemann': 'loennTilUtenrikstjenestemann',
        'loenn_kun_trygdeavgift_til_utenlandsk_borger': 'loennKunTrygdeavgiftTilUtenlandskBorger',
        'loenn_kun_trygdeavgift_til_utenlandsk_borger_som_grensegjenger': 'loennKunTrygdeavgiftTilUtenlandskBorgerSomGrensegjenger',
        'ufoere_ytelser_andre': 'ufoereYtelserAndre',
        'custom_values': 'CustomValues'
    }

    def __init__(self, loenn_kun_trygdeavgift_til_utenlandsk_borger_id=None, table=None, year=None, pensjon_id=None, taxcard_id=None, status_code=None, deleted=None, loenn_fra_biarbeidsgiver_id=None, loenn_til_utenrikstjenestemann_id=None, employee_number=None, not_main_employer=None, loenn_kun_trygdeavgift_til_utenlandsk_borger_som_grensegjenger_id=None, id=None, secondary_table=None, resultat_status=None, updated_by=None, created_by=None, loenn_fra_hovedarbeidsgiver_id=None, ufoere_ytelser_andre_id=None, employee_id=None, tilleggsopplysning=None, skd_xml=None, loenn_fra_hovedarbeidsgiver=None, loenn_fra_biarbeidsgiver=None, pensjon=None, loenn_til_utenrikstjenestemann=None, loenn_kun_trygdeavgift_til_utenlandsk_borger=None, loenn_kun_trygdeavgift_til_utenlandsk_borger_som_grensegjenger=None, ufoere_ytelser_andre=None, custom_values=None):  # noqa: E501
        """EmployeeTaxCard - a model defined in Swagger"""  # noqa: E501
        self._loenn_kun_trygdeavgift_til_utenlandsk_borger_id = None
        self._table = None
        self._year = None
        self._pensjon_id = None
        self._taxcard_id = None
        self._status_code = None
        self._deleted = None
        self._loenn_fra_biarbeidsgiver_id = None
        self._loenn_til_utenrikstjenestemann_id = None
        self._employee_number = None
        self._not_main_employer = None
        self._loenn_kun_trygdeavgift_til_utenlandsk_borger_som_grensegjenger_id = None
        self._id = None
        self._secondary_table = None
        self._resultat_status = None
        self._updated_by = None
        self._created_by = None
        self._loenn_fra_hovedarbeidsgiver_id = None
        self._ufoere_ytelser_andre_id = None
        self._employee_id = None
        self._tilleggsopplysning = None
        self._skd_xml = None
        self._loenn_fra_hovedarbeidsgiver = None
        self._loenn_fra_biarbeidsgiver = None
        self._pensjon = None
        self._loenn_til_utenrikstjenestemann = None
        self._loenn_kun_trygdeavgift_til_utenlandsk_borger = None
        self._loenn_kun_trygdeavgift_til_utenlandsk_borger_som_grensegjenger = None
        self._ufoere_ytelser_andre = None
        self._custom_values = None
        self.discriminator = None
        if loenn_kun_trygdeavgift_til_utenlandsk_borger_id is not None:
            self.loenn_kun_trygdeavgift_til_utenlandsk_borger_id = loenn_kun_trygdeavgift_til_utenlandsk_borger_id
        if table is not None:
            self.table = table
        if year is not None:
            self.year = year
        if pensjon_id is not None:
            self.pensjon_id = pensjon_id
        if taxcard_id is not None:
            self.taxcard_id = taxcard_id
        if status_code is not None:
            self.status_code = status_code
        if deleted is not None:
            self.deleted = deleted
        if loenn_fra_biarbeidsgiver_id is not None:
            self.loenn_fra_biarbeidsgiver_id = loenn_fra_biarbeidsgiver_id
        if loenn_til_utenrikstjenestemann_id is not None:
            self.loenn_til_utenrikstjenestemann_id = loenn_til_utenrikstjenestemann_id
        if employee_number is not None:
            self.employee_number = employee_number
        if not_main_employer is not None:
            self.not_main_employer = not_main_employer
        if loenn_kun_trygdeavgift_til_utenlandsk_borger_som_grensegjenger_id is not None:
            self.loenn_kun_trygdeavgift_til_utenlandsk_borger_som_grensegjenger_id = loenn_kun_trygdeavgift_til_utenlandsk_borger_som_grensegjenger_id
        if id is not None:
            self.id = id
        if secondary_table is not None:
            self.secondary_table = secondary_table
        if resultat_status is not None:
            self.resultat_status = resultat_status
        if updated_by is not None:
            self.updated_by = updated_by
        if created_by is not None:
            self.created_by = created_by
        if loenn_fra_hovedarbeidsgiver_id is not None:
            self.loenn_fra_hovedarbeidsgiver_id = loenn_fra_hovedarbeidsgiver_id
        if ufoere_ytelser_andre_id is not None:
            self.ufoere_ytelser_andre_id = ufoere_ytelser_andre_id
        if employee_id is not None:
            self.employee_id = employee_id
        if tilleggsopplysning is not None:
            self.tilleggsopplysning = tilleggsopplysning
        if skd_xml is not None:
            self.skd_xml = skd_xml
        if loenn_fra_hovedarbeidsgiver is not None:
            self.loenn_fra_hovedarbeidsgiver = loenn_fra_hovedarbeidsgiver
        if loenn_fra_biarbeidsgiver is not None:
            self.loenn_fra_biarbeidsgiver = loenn_fra_biarbeidsgiver
        if pensjon is not None:
            self.pensjon = pensjon
        if loenn_til_utenrikstjenestemann is not None:
            self.loenn_til_utenrikstjenestemann = loenn_til_utenrikstjenestemann
        if loenn_kun_trygdeavgift_til_utenlandsk_borger is not None:
            self.loenn_kun_trygdeavgift_til_utenlandsk_borger = loenn_kun_trygdeavgift_til_utenlandsk_borger
        if loenn_kun_trygdeavgift_til_utenlandsk_borger_som_grensegjenger is not None:
            self.loenn_kun_trygdeavgift_til_utenlandsk_borger_som_grensegjenger = loenn_kun_trygdeavgift_til_utenlandsk_borger_som_grensegjenger
        if ufoere_ytelser_andre is not None:
            self.ufoere_ytelser_andre = ufoere_ytelser_andre
        if custom_values is not None:
            self.custom_values = custom_values

    @property
    def loenn_kun_trygdeavgift_til_utenlandsk_borger_id(self):
        """Gets the loenn_kun_trygdeavgift_til_utenlandsk_borger_id of this EmployeeTaxCard.  # noqa: E501


        :return: The loenn_kun_trygdeavgift_til_utenlandsk_borger_id of this EmployeeTaxCard.  # noqa: E501
        :rtype: int
        """
        return self._loenn_kun_trygdeavgift_til_utenlandsk_borger_id

    @loenn_kun_trygdeavgift_til_utenlandsk_borger_id.setter
    def loenn_kun_trygdeavgift_til_utenlandsk_borger_id(self, loenn_kun_trygdeavgift_til_utenlandsk_borger_id):
        """Sets the loenn_kun_trygdeavgift_til_utenlandsk_borger_id of this EmployeeTaxCard.


        :param loenn_kun_trygdeavgift_til_utenlandsk_borger_id: The loenn_kun_trygdeavgift_til_utenlandsk_borger_id of this EmployeeTaxCard.  # noqa: E501
        :type: int
        """

        self._loenn_kun_trygdeavgift_til_utenlandsk_borger_id = loenn_kun_trygdeavgift_til_utenlandsk_borger_id

    @property
    def table(self):
        """Gets the table of this EmployeeTaxCard.  # noqa: E501


        :return: The table of this EmployeeTaxCard.  # noqa: E501
        :rtype: str
        """
        return self._table

    @table.setter
    def table(self, table):
        """Sets the table of this EmployeeTaxCard.


        :param table: The table of this EmployeeTaxCard.  # noqa: E501
        :type: str
        """

        self._table = table

    @property
    def year(self):
        """Gets the year of this EmployeeTaxCard.  # noqa: E501


        :return: The year of this EmployeeTaxCard.  # noqa: E501
        :rtype: int
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this EmployeeTaxCard.


        :param year: The year of this EmployeeTaxCard.  # noqa: E501
        :type: int
        """

        self._year = year

    @property
    def pensjon_id(self):
        """Gets the pensjon_id of this EmployeeTaxCard.  # noqa: E501


        :return: The pensjon_id of this EmployeeTaxCard.  # noqa: E501
        :rtype: int
        """
        return self._pensjon_id

    @pensjon_id.setter
    def pensjon_id(self, pensjon_id):
        """Sets the pensjon_id of this EmployeeTaxCard.


        :param pensjon_id: The pensjon_id of this EmployeeTaxCard.  # noqa: E501
        :type: int
        """

        self._pensjon_id = pensjon_id

    @property
    def taxcard_id(self):
        """Gets the taxcard_id of this EmployeeTaxCard.  # noqa: E501


        :return: The taxcard_id of this EmployeeTaxCard.  # noqa: E501
        :rtype: int
        """
        return self._taxcard_id

    @taxcard_id.setter
    def taxcard_id(self, taxcard_id):
        """Sets the taxcard_id of this EmployeeTaxCard.


        :param taxcard_id: The taxcard_id of this EmployeeTaxCard.  # noqa: E501
        :type: int
        """

        self._taxcard_id = taxcard_id

    @property
    def status_code(self):
        """Gets the status_code of this EmployeeTaxCard.  # noqa: E501


        :return: The status_code of this EmployeeTaxCard.  # noqa: E501
        :rtype: int
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this EmployeeTaxCard.


        :param status_code: The status_code of this EmployeeTaxCard.  # noqa: E501
        :type: int
        """

        self._status_code = status_code

    @property
    def deleted(self):
        """Gets the deleted of this EmployeeTaxCard.  # noqa: E501


        :return: The deleted of this EmployeeTaxCard.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this EmployeeTaxCard.


        :param deleted: The deleted of this EmployeeTaxCard.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def loenn_fra_biarbeidsgiver_id(self):
        """Gets the loenn_fra_biarbeidsgiver_id of this EmployeeTaxCard.  # noqa: E501


        :return: The loenn_fra_biarbeidsgiver_id of this EmployeeTaxCard.  # noqa: E501
        :rtype: int
        """
        return self._loenn_fra_biarbeidsgiver_id

    @loenn_fra_biarbeidsgiver_id.setter
    def loenn_fra_biarbeidsgiver_id(self, loenn_fra_biarbeidsgiver_id):
        """Sets the loenn_fra_biarbeidsgiver_id of this EmployeeTaxCard.


        :param loenn_fra_biarbeidsgiver_id: The loenn_fra_biarbeidsgiver_id of this EmployeeTaxCard.  # noqa: E501
        :type: int
        """

        self._loenn_fra_biarbeidsgiver_id = loenn_fra_biarbeidsgiver_id

    @property
    def loenn_til_utenrikstjenestemann_id(self):
        """Gets the loenn_til_utenrikstjenestemann_id of this EmployeeTaxCard.  # noqa: E501


        :return: The loenn_til_utenrikstjenestemann_id of this EmployeeTaxCard.  # noqa: E501
        :rtype: int
        """
        return self._loenn_til_utenrikstjenestemann_id

    @loenn_til_utenrikstjenestemann_id.setter
    def loenn_til_utenrikstjenestemann_id(self, loenn_til_utenrikstjenestemann_id):
        """Sets the loenn_til_utenrikstjenestemann_id of this EmployeeTaxCard.


        :param loenn_til_utenrikstjenestemann_id: The loenn_til_utenrikstjenestemann_id of this EmployeeTaxCard.  # noqa: E501
        :type: int
        """

        self._loenn_til_utenrikstjenestemann_id = loenn_til_utenrikstjenestemann_id

    @property
    def employee_number(self):
        """Gets the employee_number of this EmployeeTaxCard.  # noqa: E501


        :return: The employee_number of this EmployeeTaxCard.  # noqa: E501
        :rtype: int
        """
        return self._employee_number

    @employee_number.setter
    def employee_number(self, employee_number):
        """Sets the employee_number of this EmployeeTaxCard.


        :param employee_number: The employee_number of this EmployeeTaxCard.  # noqa: E501
        :type: int
        """

        self._employee_number = employee_number

    @property
    def not_main_employer(self):
        """Gets the not_main_employer of this EmployeeTaxCard.  # noqa: E501


        :return: The not_main_employer of this EmployeeTaxCard.  # noqa: E501
        :rtype: bool
        """
        return self._not_main_employer

    @not_main_employer.setter
    def not_main_employer(self, not_main_employer):
        """Sets the not_main_employer of this EmployeeTaxCard.


        :param not_main_employer: The not_main_employer of this EmployeeTaxCard.  # noqa: E501
        :type: bool
        """

        self._not_main_employer = not_main_employer

    @property
    def loenn_kun_trygdeavgift_til_utenlandsk_borger_som_grensegjenger_id(self):
        """Gets the loenn_kun_trygdeavgift_til_utenlandsk_borger_som_grensegjenger_id of this EmployeeTaxCard.  # noqa: E501


        :return: The loenn_kun_trygdeavgift_til_utenlandsk_borger_som_grensegjenger_id of this EmployeeTaxCard.  # noqa: E501
        :rtype: int
        """
        return self._loenn_kun_trygdeavgift_til_utenlandsk_borger_som_grensegjenger_id

    @loenn_kun_trygdeavgift_til_utenlandsk_borger_som_grensegjenger_id.setter
    def loenn_kun_trygdeavgift_til_utenlandsk_borger_som_grensegjenger_id(self, loenn_kun_trygdeavgift_til_utenlandsk_borger_som_grensegjenger_id):
        """Sets the loenn_kun_trygdeavgift_til_utenlandsk_borger_som_grensegjenger_id of this EmployeeTaxCard.


        :param loenn_kun_trygdeavgift_til_utenlandsk_borger_som_grensegjenger_id: The loenn_kun_trygdeavgift_til_utenlandsk_borger_som_grensegjenger_id of this EmployeeTaxCard.  # noqa: E501
        :type: int
        """

        self._loenn_kun_trygdeavgift_til_utenlandsk_borger_som_grensegjenger_id = loenn_kun_trygdeavgift_til_utenlandsk_borger_som_grensegjenger_id

    @property
    def id(self):
        """Gets the id of this EmployeeTaxCard.  # noqa: E501


        :return: The id of this EmployeeTaxCard.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EmployeeTaxCard.


        :param id: The id of this EmployeeTaxCard.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def secondary_table(self):
        """Gets the secondary_table of this EmployeeTaxCard.  # noqa: E501


        :return: The secondary_table of this EmployeeTaxCard.  # noqa: E501
        :rtype: str
        """
        return self._secondary_table

    @secondary_table.setter
    def secondary_table(self, secondary_table):
        """Sets the secondary_table of this EmployeeTaxCard.


        :param secondary_table: The secondary_table of this EmployeeTaxCard.  # noqa: E501
        :type: str
        """

        self._secondary_table = secondary_table

    @property
    def resultat_status(self):
        """Gets the resultat_status of this EmployeeTaxCard.  # noqa: E501


        :return: The resultat_status of this EmployeeTaxCard.  # noqa: E501
        :rtype: str
        """
        return self._resultat_status

    @resultat_status.setter
    def resultat_status(self, resultat_status):
        """Sets the resultat_status of this EmployeeTaxCard.


        :param resultat_status: The resultat_status of this EmployeeTaxCard.  # noqa: E501
        :type: str
        """

        self._resultat_status = resultat_status

    @property
    def updated_by(self):
        """Gets the updated_by of this EmployeeTaxCard.  # noqa: E501


        :return: The updated_by of this EmployeeTaxCard.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this EmployeeTaxCard.


        :param updated_by: The updated_by of this EmployeeTaxCard.  # noqa: E501
        :type: str
        """

        self._updated_by = updated_by

    @property
    def created_by(self):
        """Gets the created_by of this EmployeeTaxCard.  # noqa: E501


        :return: The created_by of this EmployeeTaxCard.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this EmployeeTaxCard.


        :param created_by: The created_by of this EmployeeTaxCard.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def loenn_fra_hovedarbeidsgiver_id(self):
        """Gets the loenn_fra_hovedarbeidsgiver_id of this EmployeeTaxCard.  # noqa: E501


        :return: The loenn_fra_hovedarbeidsgiver_id of this EmployeeTaxCard.  # noqa: E501
        :rtype: int
        """
        return self._loenn_fra_hovedarbeidsgiver_id

    @loenn_fra_hovedarbeidsgiver_id.setter
    def loenn_fra_hovedarbeidsgiver_id(self, loenn_fra_hovedarbeidsgiver_id):
        """Sets the loenn_fra_hovedarbeidsgiver_id of this EmployeeTaxCard.


        :param loenn_fra_hovedarbeidsgiver_id: The loenn_fra_hovedarbeidsgiver_id of this EmployeeTaxCard.  # noqa: E501
        :type: int
        """

        self._loenn_fra_hovedarbeidsgiver_id = loenn_fra_hovedarbeidsgiver_id

    @property
    def ufoere_ytelser_andre_id(self):
        """Gets the ufoere_ytelser_andre_id of this EmployeeTaxCard.  # noqa: E501


        :return: The ufoere_ytelser_andre_id of this EmployeeTaxCard.  # noqa: E501
        :rtype: int
        """
        return self._ufoere_ytelser_andre_id

    @ufoere_ytelser_andre_id.setter
    def ufoere_ytelser_andre_id(self, ufoere_ytelser_andre_id):
        """Sets the ufoere_ytelser_andre_id of this EmployeeTaxCard.


        :param ufoere_ytelser_andre_id: The ufoere_ytelser_andre_id of this EmployeeTaxCard.  # noqa: E501
        :type: int
        """

        self._ufoere_ytelser_andre_id = ufoere_ytelser_andre_id

    @property
    def employee_id(self):
        """Gets the employee_id of this EmployeeTaxCard.  # noqa: E501


        :return: The employee_id of this EmployeeTaxCard.  # noqa: E501
        :rtype: int
        """
        return self._employee_id

    @employee_id.setter
    def employee_id(self, employee_id):
        """Sets the employee_id of this EmployeeTaxCard.


        :param employee_id: The employee_id of this EmployeeTaxCard.  # noqa: E501
        :type: int
        """

        self._employee_id = employee_id

    @property
    def tilleggsopplysning(self):
        """Gets the tilleggsopplysning of this EmployeeTaxCard.  # noqa: E501


        :return: The tilleggsopplysning of this EmployeeTaxCard.  # noqa: E501
        :rtype: str
        """
        return self._tilleggsopplysning

    @tilleggsopplysning.setter
    def tilleggsopplysning(self, tilleggsopplysning):
        """Sets the tilleggsopplysning of this EmployeeTaxCard.


        :param tilleggsopplysning: The tilleggsopplysning of this EmployeeTaxCard.  # noqa: E501
        :type: str
        """

        self._tilleggsopplysning = tilleggsopplysning

    @property
    def skd_xml(self):
        """Gets the skd_xml of this EmployeeTaxCard.  # noqa: E501


        :return: The skd_xml of this EmployeeTaxCard.  # noqa: E501
        :rtype: str
        """
        return self._skd_xml

    @skd_xml.setter
    def skd_xml(self, skd_xml):
        """Sets the skd_xml of this EmployeeTaxCard.


        :param skd_xml: The skd_xml of this EmployeeTaxCard.  # noqa: E501
        :type: str
        """

        self._skd_xml = skd_xml

    @property
    def loenn_fra_hovedarbeidsgiver(self):
        """Gets the loenn_fra_hovedarbeidsgiver of this EmployeeTaxCard.  # noqa: E501


        :return: The loenn_fra_hovedarbeidsgiver of this EmployeeTaxCard.  # noqa: E501
        :rtype: TaxCard
        """
        return self._loenn_fra_hovedarbeidsgiver

    @loenn_fra_hovedarbeidsgiver.setter
    def loenn_fra_hovedarbeidsgiver(self, loenn_fra_hovedarbeidsgiver):
        """Sets the loenn_fra_hovedarbeidsgiver of this EmployeeTaxCard.


        :param loenn_fra_hovedarbeidsgiver: The loenn_fra_hovedarbeidsgiver of this EmployeeTaxCard.  # noqa: E501
        :type: TaxCard
        """

        self._loenn_fra_hovedarbeidsgiver = loenn_fra_hovedarbeidsgiver

    @property
    def loenn_fra_biarbeidsgiver(self):
        """Gets the loenn_fra_biarbeidsgiver of this EmployeeTaxCard.  # noqa: E501


        :return: The loenn_fra_biarbeidsgiver of this EmployeeTaxCard.  # noqa: E501
        :rtype: TaxCard
        """
        return self._loenn_fra_biarbeidsgiver

    @loenn_fra_biarbeidsgiver.setter
    def loenn_fra_biarbeidsgiver(self, loenn_fra_biarbeidsgiver):
        """Sets the loenn_fra_biarbeidsgiver of this EmployeeTaxCard.


        :param loenn_fra_biarbeidsgiver: The loenn_fra_biarbeidsgiver of this EmployeeTaxCard.  # noqa: E501
        :type: TaxCard
        """

        self._loenn_fra_biarbeidsgiver = loenn_fra_biarbeidsgiver

    @property
    def pensjon(self):
        """Gets the pensjon of this EmployeeTaxCard.  # noqa: E501


        :return: The pensjon of this EmployeeTaxCard.  # noqa: E501
        :rtype: TaxCard
        """
        return self._pensjon

    @pensjon.setter
    def pensjon(self, pensjon):
        """Sets the pensjon of this EmployeeTaxCard.


        :param pensjon: The pensjon of this EmployeeTaxCard.  # noqa: E501
        :type: TaxCard
        """

        self._pensjon = pensjon

    @property
    def loenn_til_utenrikstjenestemann(self):
        """Gets the loenn_til_utenrikstjenestemann of this EmployeeTaxCard.  # noqa: E501


        :return: The loenn_til_utenrikstjenestemann of this EmployeeTaxCard.  # noqa: E501
        :rtype: TaxCard
        """
        return self._loenn_til_utenrikstjenestemann

    @loenn_til_utenrikstjenestemann.setter
    def loenn_til_utenrikstjenestemann(self, loenn_til_utenrikstjenestemann):
        """Sets the loenn_til_utenrikstjenestemann of this EmployeeTaxCard.


        :param loenn_til_utenrikstjenestemann: The loenn_til_utenrikstjenestemann of this EmployeeTaxCard.  # noqa: E501
        :type: TaxCard
        """

        self._loenn_til_utenrikstjenestemann = loenn_til_utenrikstjenestemann

    @property
    def loenn_kun_trygdeavgift_til_utenlandsk_borger(self):
        """Gets the loenn_kun_trygdeavgift_til_utenlandsk_borger of this EmployeeTaxCard.  # noqa: E501


        :return: The loenn_kun_trygdeavgift_til_utenlandsk_borger of this EmployeeTaxCard.  # noqa: E501
        :rtype: TaxCard
        """
        return self._loenn_kun_trygdeavgift_til_utenlandsk_borger

    @loenn_kun_trygdeavgift_til_utenlandsk_borger.setter
    def loenn_kun_trygdeavgift_til_utenlandsk_borger(self, loenn_kun_trygdeavgift_til_utenlandsk_borger):
        """Sets the loenn_kun_trygdeavgift_til_utenlandsk_borger of this EmployeeTaxCard.


        :param loenn_kun_trygdeavgift_til_utenlandsk_borger: The loenn_kun_trygdeavgift_til_utenlandsk_borger of this EmployeeTaxCard.  # noqa: E501
        :type: TaxCard
        """

        self._loenn_kun_trygdeavgift_til_utenlandsk_borger = loenn_kun_trygdeavgift_til_utenlandsk_borger

    @property
    def loenn_kun_trygdeavgift_til_utenlandsk_borger_som_grensegjenger(self):
        """Gets the loenn_kun_trygdeavgift_til_utenlandsk_borger_som_grensegjenger of this EmployeeTaxCard.  # noqa: E501


        :return: The loenn_kun_trygdeavgift_til_utenlandsk_borger_som_grensegjenger of this EmployeeTaxCard.  # noqa: E501
        :rtype: TaxCard
        """
        return self._loenn_kun_trygdeavgift_til_utenlandsk_borger_som_grensegjenger

    @loenn_kun_trygdeavgift_til_utenlandsk_borger_som_grensegjenger.setter
    def loenn_kun_trygdeavgift_til_utenlandsk_borger_som_grensegjenger(self, loenn_kun_trygdeavgift_til_utenlandsk_borger_som_grensegjenger):
        """Sets the loenn_kun_trygdeavgift_til_utenlandsk_borger_som_grensegjenger of this EmployeeTaxCard.


        :param loenn_kun_trygdeavgift_til_utenlandsk_borger_som_grensegjenger: The loenn_kun_trygdeavgift_til_utenlandsk_borger_som_grensegjenger of this EmployeeTaxCard.  # noqa: E501
        :type: TaxCard
        """

        self._loenn_kun_trygdeavgift_til_utenlandsk_borger_som_grensegjenger = loenn_kun_trygdeavgift_til_utenlandsk_borger_som_grensegjenger

    @property
    def ufoere_ytelser_andre(self):
        """Gets the ufoere_ytelser_andre of this EmployeeTaxCard.  # noqa: E501


        :return: The ufoere_ytelser_andre of this EmployeeTaxCard.  # noqa: E501
        :rtype: TaxCard
        """
        return self._ufoere_ytelser_andre

    @ufoere_ytelser_andre.setter
    def ufoere_ytelser_andre(self, ufoere_ytelser_andre):
        """Sets the ufoere_ytelser_andre of this EmployeeTaxCard.


        :param ufoere_ytelser_andre: The ufoere_ytelser_andre of this EmployeeTaxCard.  # noqa: E501
        :type: TaxCard
        """

        self._ufoere_ytelser_andre = ufoere_ytelser_andre

    @property
    def custom_values(self):
        """Gets the custom_values of this EmployeeTaxCard.  # noqa: E501


        :return: The custom_values of this EmployeeTaxCard.  # noqa: E501
        :rtype: CustomValues
        """
        return self._custom_values

    @custom_values.setter
    def custom_values(self, custom_values):
        """Sets the custom_values of this EmployeeTaxCard.


        :param custom_values: The custom_values of this EmployeeTaxCard.  # noqa: E501
        :type: CustomValues
        """

        self._custom_values = custom_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EmployeeTaxCard, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmployeeTaxCard):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
