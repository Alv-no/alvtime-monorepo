# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BankAccount(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'business_relation_id': 'int',
        'account_number': 'str',
        'integration_status': 'int',
        'locked': 'bool',
        'label': 'str',
        'account_id': 'int',
        'bank_account_type': 'str',
        'status_code': 'int',
        'deleted': 'bool',
        'iban': 'str',
        'integration_settings': 'str',
        'bank_id': 'int',
        'id': 'int',
        'company_settings_id': 'int',
        'updated_by': 'str',
        'created_by': 'str',
        'custom_values': 'CustomValues'
    }

    attribute_map = {
        'business_relation_id': 'BusinessRelationID',
        'account_number': 'AccountNumber',
        'integration_status': 'IntegrationStatus',
        'locked': 'Locked',
        'label': 'Label',
        'account_id': 'AccountID',
        'bank_account_type': 'BankAccountType',
        'status_code': 'StatusCode',
        'deleted': 'Deleted',
        'iban': 'IBAN',
        'integration_settings': 'IntegrationSettings',
        'bank_id': 'BankID',
        'id': 'ID',
        'company_settings_id': 'CompanySettingsID',
        'updated_by': 'UpdatedBy',
        'created_by': 'CreatedBy',
        'custom_values': 'CustomValues'
    }

    def __init__(self, business_relation_id=None, account_number=None, integration_status=None, locked=None, label=None, account_id=None, bank_account_type=None, status_code=None, deleted=None, iban=None, integration_settings=None, bank_id=None, id=None, company_settings_id=None, updated_by=None, created_by=None, custom_values=None):  # noqa: E501
        """BankAccount - a model defined in Swagger"""  # noqa: E501
        self._business_relation_id = None
        self._account_number = None
        self._integration_status = None
        self._locked = None
        self._label = None
        self._account_id = None
        self._bank_account_type = None
        self._status_code = None
        self._deleted = None
        self._iban = None
        self._integration_settings = None
        self._bank_id = None
        self._id = None
        self._company_settings_id = None
        self._updated_by = None
        self._created_by = None
        self._custom_values = None
        self.discriminator = None
        if business_relation_id is not None:
            self.business_relation_id = business_relation_id
        if account_number is not None:
            self.account_number = account_number
        if integration_status is not None:
            self.integration_status = integration_status
        if locked is not None:
            self.locked = locked
        if label is not None:
            self.label = label
        if account_id is not None:
            self.account_id = account_id
        if bank_account_type is not None:
            self.bank_account_type = bank_account_type
        if status_code is not None:
            self.status_code = status_code
        if deleted is not None:
            self.deleted = deleted
        if iban is not None:
            self.iban = iban
        if integration_settings is not None:
            self.integration_settings = integration_settings
        if bank_id is not None:
            self.bank_id = bank_id
        if id is not None:
            self.id = id
        if company_settings_id is not None:
            self.company_settings_id = company_settings_id
        if updated_by is not None:
            self.updated_by = updated_by
        if created_by is not None:
            self.created_by = created_by
        if custom_values is not None:
            self.custom_values = custom_values

    @property
    def business_relation_id(self):
        """Gets the business_relation_id of this BankAccount.  # noqa: E501


        :return: The business_relation_id of this BankAccount.  # noqa: E501
        :rtype: int
        """
        return self._business_relation_id

    @business_relation_id.setter
    def business_relation_id(self, business_relation_id):
        """Sets the business_relation_id of this BankAccount.


        :param business_relation_id: The business_relation_id of this BankAccount.  # noqa: E501
        :type: int
        """

        self._business_relation_id = business_relation_id

    @property
    def account_number(self):
        """Gets the account_number of this BankAccount.  # noqa: E501


        :return: The account_number of this BankAccount.  # noqa: E501
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this BankAccount.


        :param account_number: The account_number of this BankAccount.  # noqa: E501
        :type: str
        """

        self._account_number = account_number

    @property
    def integration_status(self):
        """Gets the integration_status of this BankAccount.  # noqa: E501


        :return: The integration_status of this BankAccount.  # noqa: E501
        :rtype: int
        """
        return self._integration_status

    @integration_status.setter
    def integration_status(self, integration_status):
        """Sets the integration_status of this BankAccount.


        :param integration_status: The integration_status of this BankAccount.  # noqa: E501
        :type: int
        """

        self._integration_status = integration_status

    @property
    def locked(self):
        """Gets the locked of this BankAccount.  # noqa: E501


        :return: The locked of this BankAccount.  # noqa: E501
        :rtype: bool
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """Sets the locked of this BankAccount.


        :param locked: The locked of this BankAccount.  # noqa: E501
        :type: bool
        """

        self._locked = locked

    @property
    def label(self):
        """Gets the label of this BankAccount.  # noqa: E501


        :return: The label of this BankAccount.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this BankAccount.


        :param label: The label of this BankAccount.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def account_id(self):
        """Gets the account_id of this BankAccount.  # noqa: E501


        :return: The account_id of this BankAccount.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this BankAccount.


        :param account_id: The account_id of this BankAccount.  # noqa: E501
        :type: int
        """

        self._account_id = account_id

    @property
    def bank_account_type(self):
        """Gets the bank_account_type of this BankAccount.  # noqa: E501


        :return: The bank_account_type of this BankAccount.  # noqa: E501
        :rtype: str
        """
        return self._bank_account_type

    @bank_account_type.setter
    def bank_account_type(self, bank_account_type):
        """Sets the bank_account_type of this BankAccount.


        :param bank_account_type: The bank_account_type of this BankAccount.  # noqa: E501
        :type: str
        """

        self._bank_account_type = bank_account_type

    @property
    def status_code(self):
        """Gets the status_code of this BankAccount.  # noqa: E501


        :return: The status_code of this BankAccount.  # noqa: E501
        :rtype: int
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this BankAccount.


        :param status_code: The status_code of this BankAccount.  # noqa: E501
        :type: int
        """

        self._status_code = status_code

    @property
    def deleted(self):
        """Gets the deleted of this BankAccount.  # noqa: E501


        :return: The deleted of this BankAccount.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this BankAccount.


        :param deleted: The deleted of this BankAccount.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def iban(self):
        """Gets the iban of this BankAccount.  # noqa: E501


        :return: The iban of this BankAccount.  # noqa: E501
        :rtype: str
        """
        return self._iban

    @iban.setter
    def iban(self, iban):
        """Sets the iban of this BankAccount.


        :param iban: The iban of this BankAccount.  # noqa: E501
        :type: str
        """

        self._iban = iban

    @property
    def integration_settings(self):
        """Gets the integration_settings of this BankAccount.  # noqa: E501


        :return: The integration_settings of this BankAccount.  # noqa: E501
        :rtype: str
        """
        return self._integration_settings

    @integration_settings.setter
    def integration_settings(self, integration_settings):
        """Sets the integration_settings of this BankAccount.


        :param integration_settings: The integration_settings of this BankAccount.  # noqa: E501
        :type: str
        """

        self._integration_settings = integration_settings

    @property
    def bank_id(self):
        """Gets the bank_id of this BankAccount.  # noqa: E501


        :return: The bank_id of this BankAccount.  # noqa: E501
        :rtype: int
        """
        return self._bank_id

    @bank_id.setter
    def bank_id(self, bank_id):
        """Sets the bank_id of this BankAccount.


        :param bank_id: The bank_id of this BankAccount.  # noqa: E501
        :type: int
        """

        self._bank_id = bank_id

    @property
    def id(self):
        """Gets the id of this BankAccount.  # noqa: E501


        :return: The id of this BankAccount.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BankAccount.


        :param id: The id of this BankAccount.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def company_settings_id(self):
        """Gets the company_settings_id of this BankAccount.  # noqa: E501


        :return: The company_settings_id of this BankAccount.  # noqa: E501
        :rtype: int
        """
        return self._company_settings_id

    @company_settings_id.setter
    def company_settings_id(self, company_settings_id):
        """Sets the company_settings_id of this BankAccount.


        :param company_settings_id: The company_settings_id of this BankAccount.  # noqa: E501
        :type: int
        """

        self._company_settings_id = company_settings_id

    @property
    def updated_by(self):
        """Gets the updated_by of this BankAccount.  # noqa: E501


        :return: The updated_by of this BankAccount.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this BankAccount.


        :param updated_by: The updated_by of this BankAccount.  # noqa: E501
        :type: str
        """

        self._updated_by = updated_by

    @property
    def created_by(self):
        """Gets the created_by of this BankAccount.  # noqa: E501


        :return: The created_by of this BankAccount.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this BankAccount.


        :param created_by: The created_by of this BankAccount.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def custom_values(self):
        """Gets the custom_values of this BankAccount.  # noqa: E501


        :return: The custom_values of this BankAccount.  # noqa: E501
        :rtype: CustomValues
        """
        return self._custom_values

    @custom_values.setter
    def custom_values(self, custom_values):
        """Sets the custom_values of this BankAccount.


        :param custom_values: The custom_values of this BankAccount.  # noqa: E501
        :type: CustomValues
        """

        self._custom_values = custom_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BankAccount, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BankAccount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
