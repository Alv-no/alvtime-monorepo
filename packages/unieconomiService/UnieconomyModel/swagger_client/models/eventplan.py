# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Eventplan(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'signing_key': 'str',
        'job_names': 'str',
        'active': 'bool',
        'model_filter': 'str',
        'name': 'str',
        'status_code': 'int',
        'deleted': 'bool',
        'cargo': 'str',
        'plan_type': 'str',
        'id': 'int',
        'updated_by': 'str',
        'created_by': 'str',
        'operation_filter': 'str',
        'is_system_plan': 'bool',
        'expression_filters': 'list[ExpressionFilter]',
        'subscribers': 'list[EventSubscriber]',
        'custom_values': 'CustomValues'
    }

    attribute_map = {
        'signing_key': 'SigningKey',
        'job_names': 'JobNames',
        'active': 'Active',
        'model_filter': 'ModelFilter',
        'name': 'Name',
        'status_code': 'StatusCode',
        'deleted': 'Deleted',
        'cargo': 'Cargo',
        'plan_type': 'PlanType',
        'id': 'ID',
        'updated_by': 'UpdatedBy',
        'created_by': 'CreatedBy',
        'operation_filter': 'OperationFilter',
        'is_system_plan': 'IsSystemPlan',
        'expression_filters': 'ExpressionFilters',
        'subscribers': 'Subscribers',
        'custom_values': 'CustomValues'
    }

    def __init__(self, signing_key=None, job_names=None, active=None, model_filter=None, name=None, status_code=None, deleted=None, cargo=None, plan_type=None, id=None, updated_by=None, created_by=None, operation_filter=None, is_system_plan=None, expression_filters=None, subscribers=None, custom_values=None):  # noqa: E501
        """Eventplan - a model defined in Swagger"""  # noqa: E501
        self._signing_key = None
        self._job_names = None
        self._active = None
        self._model_filter = None
        self._name = None
        self._status_code = None
        self._deleted = None
        self._cargo = None
        self._plan_type = None
        self._id = None
        self._updated_by = None
        self._created_by = None
        self._operation_filter = None
        self._is_system_plan = None
        self._expression_filters = None
        self._subscribers = None
        self._custom_values = None
        self.discriminator = None
        if signing_key is not None:
            self.signing_key = signing_key
        if job_names is not None:
            self.job_names = job_names
        if active is not None:
            self.active = active
        if model_filter is not None:
            self.model_filter = model_filter
        if name is not None:
            self.name = name
        if status_code is not None:
            self.status_code = status_code
        if deleted is not None:
            self.deleted = deleted
        if cargo is not None:
            self.cargo = cargo
        if plan_type is not None:
            self.plan_type = plan_type
        if id is not None:
            self.id = id
        if updated_by is not None:
            self.updated_by = updated_by
        if created_by is not None:
            self.created_by = created_by
        if operation_filter is not None:
            self.operation_filter = operation_filter
        if is_system_plan is not None:
            self.is_system_plan = is_system_plan
        if expression_filters is not None:
            self.expression_filters = expression_filters
        if subscribers is not None:
            self.subscribers = subscribers
        if custom_values is not None:
            self.custom_values = custom_values

    @property
    def signing_key(self):
        """Gets the signing_key of this Eventplan.  # noqa: E501


        :return: The signing_key of this Eventplan.  # noqa: E501
        :rtype: str
        """
        return self._signing_key

    @signing_key.setter
    def signing_key(self, signing_key):
        """Sets the signing_key of this Eventplan.


        :param signing_key: The signing_key of this Eventplan.  # noqa: E501
        :type: str
        """

        self._signing_key = signing_key

    @property
    def job_names(self):
        """Gets the job_names of this Eventplan.  # noqa: E501


        :return: The job_names of this Eventplan.  # noqa: E501
        :rtype: str
        """
        return self._job_names

    @job_names.setter
    def job_names(self, job_names):
        """Sets the job_names of this Eventplan.


        :param job_names: The job_names of this Eventplan.  # noqa: E501
        :type: str
        """

        self._job_names = job_names

    @property
    def active(self):
        """Gets the active of this Eventplan.  # noqa: E501


        :return: The active of this Eventplan.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Eventplan.


        :param active: The active of this Eventplan.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def model_filter(self):
        """Gets the model_filter of this Eventplan.  # noqa: E501


        :return: The model_filter of this Eventplan.  # noqa: E501
        :rtype: str
        """
        return self._model_filter

    @model_filter.setter
    def model_filter(self, model_filter):
        """Sets the model_filter of this Eventplan.


        :param model_filter: The model_filter of this Eventplan.  # noqa: E501
        :type: str
        """

        self._model_filter = model_filter

    @property
    def name(self):
        """Gets the name of this Eventplan.  # noqa: E501


        :return: The name of this Eventplan.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Eventplan.


        :param name: The name of this Eventplan.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def status_code(self):
        """Gets the status_code of this Eventplan.  # noqa: E501


        :return: The status_code of this Eventplan.  # noqa: E501
        :rtype: int
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this Eventplan.


        :param status_code: The status_code of this Eventplan.  # noqa: E501
        :type: int
        """

        self._status_code = status_code

    @property
    def deleted(self):
        """Gets the deleted of this Eventplan.  # noqa: E501


        :return: The deleted of this Eventplan.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this Eventplan.


        :param deleted: The deleted of this Eventplan.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def cargo(self):
        """Gets the cargo of this Eventplan.  # noqa: E501


        :return: The cargo of this Eventplan.  # noqa: E501
        :rtype: str
        """
        return self._cargo

    @cargo.setter
    def cargo(self, cargo):
        """Sets the cargo of this Eventplan.


        :param cargo: The cargo of this Eventplan.  # noqa: E501
        :type: str
        """

        self._cargo = cargo

    @property
    def plan_type(self):
        """Gets the plan_type of this Eventplan.  # noqa: E501


        :return: The plan_type of this Eventplan.  # noqa: E501
        :rtype: str
        """
        return self._plan_type

    @plan_type.setter
    def plan_type(self, plan_type):
        """Sets the plan_type of this Eventplan.


        :param plan_type: The plan_type of this Eventplan.  # noqa: E501
        :type: str
        """

        self._plan_type = plan_type

    @property
    def id(self):
        """Gets the id of this Eventplan.  # noqa: E501


        :return: The id of this Eventplan.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Eventplan.


        :param id: The id of this Eventplan.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def updated_by(self):
        """Gets the updated_by of this Eventplan.  # noqa: E501


        :return: The updated_by of this Eventplan.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this Eventplan.


        :param updated_by: The updated_by of this Eventplan.  # noqa: E501
        :type: str
        """

        self._updated_by = updated_by

    @property
    def created_by(self):
        """Gets the created_by of this Eventplan.  # noqa: E501


        :return: The created_by of this Eventplan.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Eventplan.


        :param created_by: The created_by of this Eventplan.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def operation_filter(self):
        """Gets the operation_filter of this Eventplan.  # noqa: E501


        :return: The operation_filter of this Eventplan.  # noqa: E501
        :rtype: str
        """
        return self._operation_filter

    @operation_filter.setter
    def operation_filter(self, operation_filter):
        """Sets the operation_filter of this Eventplan.


        :param operation_filter: The operation_filter of this Eventplan.  # noqa: E501
        :type: str
        """

        self._operation_filter = operation_filter

    @property
    def is_system_plan(self):
        """Gets the is_system_plan of this Eventplan.  # noqa: E501


        :return: The is_system_plan of this Eventplan.  # noqa: E501
        :rtype: bool
        """
        return self._is_system_plan

    @is_system_plan.setter
    def is_system_plan(self, is_system_plan):
        """Sets the is_system_plan of this Eventplan.


        :param is_system_plan: The is_system_plan of this Eventplan.  # noqa: E501
        :type: bool
        """

        self._is_system_plan = is_system_plan

    @property
    def expression_filters(self):
        """Gets the expression_filters of this Eventplan.  # noqa: E501


        :return: The expression_filters of this Eventplan.  # noqa: E501
        :rtype: list[ExpressionFilter]
        """
        return self._expression_filters

    @expression_filters.setter
    def expression_filters(self, expression_filters):
        """Sets the expression_filters of this Eventplan.


        :param expression_filters: The expression_filters of this Eventplan.  # noqa: E501
        :type: list[ExpressionFilter]
        """

        self._expression_filters = expression_filters

    @property
    def subscribers(self):
        """Gets the subscribers of this Eventplan.  # noqa: E501


        :return: The subscribers of this Eventplan.  # noqa: E501
        :rtype: list[EventSubscriber]
        """
        return self._subscribers

    @subscribers.setter
    def subscribers(self, subscribers):
        """Sets the subscribers of this Eventplan.


        :param subscribers: The subscribers of this Eventplan.  # noqa: E501
        :type: list[EventSubscriber]
        """

        self._subscribers = subscribers

    @property
    def custom_values(self):
        """Gets the custom_values of this Eventplan.  # noqa: E501


        :return: The custom_values of this Eventplan.  # noqa: E501
        :rtype: CustomValues
        """
        return self._custom_values

    @custom_values.setter
    def custom_values(self, custom_values):
        """Sets the custom_values of this Eventplan.


        :param custom_values: The custom_values of this Eventplan.  # noqa: E501
        :type: CustomValues
        """

        self._custom_values = custom_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Eventplan, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Eventplan):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
