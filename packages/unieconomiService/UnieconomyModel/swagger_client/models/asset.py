# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Asset(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'asset_group_code': 'str',
        'depreciation_account_id': 'int',
        'lifetime': 'int',
        'balance_account_id': 'int',
        'name': 'str',
        'dimensions_id': 'int',
        'status_code': 'int',
        'deleted': 'bool',
        'depreciation_cycle': 'int',
        'id': 'int',
        'updated_by': 'str',
        'created_by': 'str',
        'auto_depreciation': 'bool',
        'balance_account': 'Account',
        'depreciation_account': 'Account',
        'dimensions': 'Dimensions',
        'depreciation_lines': 'list[DepreciationLine]',
        'custom_values': 'CustomValues'
    }

    attribute_map = {
        'asset_group_code': 'AssetGroupCode',
        'depreciation_account_id': 'DepreciationAccountID',
        'lifetime': 'Lifetime',
        'balance_account_id': 'BalanceAccountID',
        'name': 'Name',
        'dimensions_id': 'DimensionsID',
        'status_code': 'StatusCode',
        'deleted': 'Deleted',
        'depreciation_cycle': 'DepreciationCycle',
        'id': 'ID',
        'updated_by': 'UpdatedBy',
        'created_by': 'CreatedBy',
        'auto_depreciation': 'AutoDepreciation',
        'balance_account': 'BalanceAccount',
        'depreciation_account': 'DepreciationAccount',
        'dimensions': 'Dimensions',
        'depreciation_lines': 'DepreciationLines',
        'custom_values': 'CustomValues'
    }

    def __init__(self, asset_group_code=None, depreciation_account_id=None, lifetime=None, balance_account_id=None, name=None, dimensions_id=None, status_code=None, deleted=None, depreciation_cycle=None, id=None, updated_by=None, created_by=None, auto_depreciation=None, balance_account=None, depreciation_account=None, dimensions=None, depreciation_lines=None, custom_values=None):  # noqa: E501
        """Asset - a model defined in Swagger"""  # noqa: E501
        self._asset_group_code = None
        self._depreciation_account_id = None
        self._lifetime = None
        self._balance_account_id = None
        self._name = None
        self._dimensions_id = None
        self._status_code = None
        self._deleted = None
        self._depreciation_cycle = None
        self._id = None
        self._updated_by = None
        self._created_by = None
        self._auto_depreciation = None
        self._balance_account = None
        self._depreciation_account = None
        self._dimensions = None
        self._depreciation_lines = None
        self._custom_values = None
        self.discriminator = None
        if asset_group_code is not None:
            self.asset_group_code = asset_group_code
        if depreciation_account_id is not None:
            self.depreciation_account_id = depreciation_account_id
        if lifetime is not None:
            self.lifetime = lifetime
        if balance_account_id is not None:
            self.balance_account_id = balance_account_id
        if name is not None:
            self.name = name
        if dimensions_id is not None:
            self.dimensions_id = dimensions_id
        if status_code is not None:
            self.status_code = status_code
        if deleted is not None:
            self.deleted = deleted
        if depreciation_cycle is not None:
            self.depreciation_cycle = depreciation_cycle
        if id is not None:
            self.id = id
        if updated_by is not None:
            self.updated_by = updated_by
        if created_by is not None:
            self.created_by = created_by
        if auto_depreciation is not None:
            self.auto_depreciation = auto_depreciation
        if balance_account is not None:
            self.balance_account = balance_account
        if depreciation_account is not None:
            self.depreciation_account = depreciation_account
        if dimensions is not None:
            self.dimensions = dimensions
        if depreciation_lines is not None:
            self.depreciation_lines = depreciation_lines
        if custom_values is not None:
            self.custom_values = custom_values

    @property
    def asset_group_code(self):
        """Gets the asset_group_code of this Asset.  # noqa: E501


        :return: The asset_group_code of this Asset.  # noqa: E501
        :rtype: str
        """
        return self._asset_group_code

    @asset_group_code.setter
    def asset_group_code(self, asset_group_code):
        """Sets the asset_group_code of this Asset.


        :param asset_group_code: The asset_group_code of this Asset.  # noqa: E501
        :type: str
        """

        self._asset_group_code = asset_group_code

    @property
    def depreciation_account_id(self):
        """Gets the depreciation_account_id of this Asset.  # noqa: E501


        :return: The depreciation_account_id of this Asset.  # noqa: E501
        :rtype: int
        """
        return self._depreciation_account_id

    @depreciation_account_id.setter
    def depreciation_account_id(self, depreciation_account_id):
        """Sets the depreciation_account_id of this Asset.


        :param depreciation_account_id: The depreciation_account_id of this Asset.  # noqa: E501
        :type: int
        """

        self._depreciation_account_id = depreciation_account_id

    @property
    def lifetime(self):
        """Gets the lifetime of this Asset.  # noqa: E501


        :return: The lifetime of this Asset.  # noqa: E501
        :rtype: int
        """
        return self._lifetime

    @lifetime.setter
    def lifetime(self, lifetime):
        """Sets the lifetime of this Asset.


        :param lifetime: The lifetime of this Asset.  # noqa: E501
        :type: int
        """

        self._lifetime = lifetime

    @property
    def balance_account_id(self):
        """Gets the balance_account_id of this Asset.  # noqa: E501


        :return: The balance_account_id of this Asset.  # noqa: E501
        :rtype: int
        """
        return self._balance_account_id

    @balance_account_id.setter
    def balance_account_id(self, balance_account_id):
        """Sets the balance_account_id of this Asset.


        :param balance_account_id: The balance_account_id of this Asset.  # noqa: E501
        :type: int
        """

        self._balance_account_id = balance_account_id

    @property
    def name(self):
        """Gets the name of this Asset.  # noqa: E501


        :return: The name of this Asset.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Asset.


        :param name: The name of this Asset.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def dimensions_id(self):
        """Gets the dimensions_id of this Asset.  # noqa: E501


        :return: The dimensions_id of this Asset.  # noqa: E501
        :rtype: int
        """
        return self._dimensions_id

    @dimensions_id.setter
    def dimensions_id(self, dimensions_id):
        """Sets the dimensions_id of this Asset.


        :param dimensions_id: The dimensions_id of this Asset.  # noqa: E501
        :type: int
        """

        self._dimensions_id = dimensions_id

    @property
    def status_code(self):
        """Gets the status_code of this Asset.  # noqa: E501


        :return: The status_code of this Asset.  # noqa: E501
        :rtype: int
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this Asset.


        :param status_code: The status_code of this Asset.  # noqa: E501
        :type: int
        """

        self._status_code = status_code

    @property
    def deleted(self):
        """Gets the deleted of this Asset.  # noqa: E501


        :return: The deleted of this Asset.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this Asset.


        :param deleted: The deleted of this Asset.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def depreciation_cycle(self):
        """Gets the depreciation_cycle of this Asset.  # noqa: E501


        :return: The depreciation_cycle of this Asset.  # noqa: E501
        :rtype: int
        """
        return self._depreciation_cycle

    @depreciation_cycle.setter
    def depreciation_cycle(self, depreciation_cycle):
        """Sets the depreciation_cycle of this Asset.


        :param depreciation_cycle: The depreciation_cycle of this Asset.  # noqa: E501
        :type: int
        """

        self._depreciation_cycle = depreciation_cycle

    @property
    def id(self):
        """Gets the id of this Asset.  # noqa: E501


        :return: The id of this Asset.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Asset.


        :param id: The id of this Asset.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def updated_by(self):
        """Gets the updated_by of this Asset.  # noqa: E501


        :return: The updated_by of this Asset.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this Asset.


        :param updated_by: The updated_by of this Asset.  # noqa: E501
        :type: str
        """

        self._updated_by = updated_by

    @property
    def created_by(self):
        """Gets the created_by of this Asset.  # noqa: E501


        :return: The created_by of this Asset.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Asset.


        :param created_by: The created_by of this Asset.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def auto_depreciation(self):
        """Gets the auto_depreciation of this Asset.  # noqa: E501


        :return: The auto_depreciation of this Asset.  # noqa: E501
        :rtype: bool
        """
        return self._auto_depreciation

    @auto_depreciation.setter
    def auto_depreciation(self, auto_depreciation):
        """Sets the auto_depreciation of this Asset.


        :param auto_depreciation: The auto_depreciation of this Asset.  # noqa: E501
        :type: bool
        """

        self._auto_depreciation = auto_depreciation

    @property
    def balance_account(self):
        """Gets the balance_account of this Asset.  # noqa: E501


        :return: The balance_account of this Asset.  # noqa: E501
        :rtype: Account
        """
        return self._balance_account

    @balance_account.setter
    def balance_account(self, balance_account):
        """Sets the balance_account of this Asset.


        :param balance_account: The balance_account of this Asset.  # noqa: E501
        :type: Account
        """

        self._balance_account = balance_account

    @property
    def depreciation_account(self):
        """Gets the depreciation_account of this Asset.  # noqa: E501


        :return: The depreciation_account of this Asset.  # noqa: E501
        :rtype: Account
        """
        return self._depreciation_account

    @depreciation_account.setter
    def depreciation_account(self, depreciation_account):
        """Sets the depreciation_account of this Asset.


        :param depreciation_account: The depreciation_account of this Asset.  # noqa: E501
        :type: Account
        """

        self._depreciation_account = depreciation_account

    @property
    def dimensions(self):
        """Gets the dimensions of this Asset.  # noqa: E501


        :return: The dimensions of this Asset.  # noqa: E501
        :rtype: Dimensions
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this Asset.


        :param dimensions: The dimensions of this Asset.  # noqa: E501
        :type: Dimensions
        """

        self._dimensions = dimensions

    @property
    def depreciation_lines(self):
        """Gets the depreciation_lines of this Asset.  # noqa: E501


        :return: The depreciation_lines of this Asset.  # noqa: E501
        :rtype: list[DepreciationLine]
        """
        return self._depreciation_lines

    @depreciation_lines.setter
    def depreciation_lines(self, depreciation_lines):
        """Sets the depreciation_lines of this Asset.


        :param depreciation_lines: The depreciation_lines of this Asset.  # noqa: E501
        :type: list[DepreciationLine]
        """

        self._depreciation_lines = depreciation_lines

    @property
    def custom_values(self):
        """Gets the custom_values of this Asset.  # noqa: E501


        :return: The custom_values of this Asset.  # noqa: E501
        :rtype: CustomValues
        """
        return self._custom_values

    @custom_values.setter
    def custom_values(self, custom_values):
        """Sets the custom_values of this Asset.


        :param custom_values: The custom_values of this Asset.  # noqa: E501
        :type: CustomValues
        """

        self._custom_values = custom_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Asset, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Asset):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
