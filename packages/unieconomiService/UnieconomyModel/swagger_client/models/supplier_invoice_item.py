# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SupplierInvoiceItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sort_index': 'int',
        'price_set_by_user': 'bool',
        'dimensions_id': 'int',
        'status_code': 'int',
        'deleted': 'bool',
        'unit': 'str',
        'product_id': 'int',
        'id': 'int',
        'vat_type_id': 'int',
        'calculate_gross_price_based_on_net_price': 'bool',
        'item_text': 'str',
        'currency_code_id': 'int',
        'updated_by': 'str',
        'created_by': 'str',
        'comment': 'str',
        'accounting_cost': 'str',
        'supplier_invoice_id': 'int',
        'dimensions': 'Dimensions',
        'custom_values': 'CustomValues'
    }

    attribute_map = {
        'sort_index': 'SortIndex',
        'price_set_by_user': 'PriceSetByUser',
        'dimensions_id': 'DimensionsID',
        'status_code': 'StatusCode',
        'deleted': 'Deleted',
        'unit': 'Unit',
        'product_id': 'ProductID',
        'id': 'ID',
        'vat_type_id': 'VatTypeID',
        'calculate_gross_price_based_on_net_price': 'CalculateGrossPriceBasedOnNetPrice',
        'item_text': 'ItemText',
        'currency_code_id': 'CurrencyCodeID',
        'updated_by': 'UpdatedBy',
        'created_by': 'CreatedBy',
        'comment': 'Comment',
        'accounting_cost': 'AccountingCost',
        'supplier_invoice_id': 'SupplierInvoiceID',
        'dimensions': 'Dimensions',
        'custom_values': 'CustomValues'
    }

    def __init__(self, sort_index=None, price_set_by_user=None, dimensions_id=None, status_code=None, deleted=None, unit=None, product_id=None, id=None, vat_type_id=None, calculate_gross_price_based_on_net_price=None, item_text=None, currency_code_id=None, updated_by=None, created_by=None, comment=None, accounting_cost=None, supplier_invoice_id=None, dimensions=None, custom_values=None):  # noqa: E501
        """SupplierInvoiceItem - a model defined in Swagger"""  # noqa: E501
        self._sort_index = None
        self._price_set_by_user = None
        self._dimensions_id = None
        self._status_code = None
        self._deleted = None
        self._unit = None
        self._product_id = None
        self._id = None
        self._vat_type_id = None
        self._calculate_gross_price_based_on_net_price = None
        self._item_text = None
        self._currency_code_id = None
        self._updated_by = None
        self._created_by = None
        self._comment = None
        self._accounting_cost = None
        self._supplier_invoice_id = None
        self._dimensions = None
        self._custom_values = None
        self.discriminator = None
        if sort_index is not None:
            self.sort_index = sort_index
        if price_set_by_user is not None:
            self.price_set_by_user = price_set_by_user
        if dimensions_id is not None:
            self.dimensions_id = dimensions_id
        if status_code is not None:
            self.status_code = status_code
        if deleted is not None:
            self.deleted = deleted
        if unit is not None:
            self.unit = unit
        if product_id is not None:
            self.product_id = product_id
        if id is not None:
            self.id = id
        if vat_type_id is not None:
            self.vat_type_id = vat_type_id
        if calculate_gross_price_based_on_net_price is not None:
            self.calculate_gross_price_based_on_net_price = calculate_gross_price_based_on_net_price
        if item_text is not None:
            self.item_text = item_text
        if currency_code_id is not None:
            self.currency_code_id = currency_code_id
        if updated_by is not None:
            self.updated_by = updated_by
        if created_by is not None:
            self.created_by = created_by
        if comment is not None:
            self.comment = comment
        if accounting_cost is not None:
            self.accounting_cost = accounting_cost
        if supplier_invoice_id is not None:
            self.supplier_invoice_id = supplier_invoice_id
        if dimensions is not None:
            self.dimensions = dimensions
        if custom_values is not None:
            self.custom_values = custom_values

    @property
    def sort_index(self):
        """Gets the sort_index of this SupplierInvoiceItem.  # noqa: E501


        :return: The sort_index of this SupplierInvoiceItem.  # noqa: E501
        :rtype: int
        """
        return self._sort_index

    @sort_index.setter
    def sort_index(self, sort_index):
        """Sets the sort_index of this SupplierInvoiceItem.


        :param sort_index: The sort_index of this SupplierInvoiceItem.  # noqa: E501
        :type: int
        """

        self._sort_index = sort_index

    @property
    def price_set_by_user(self):
        """Gets the price_set_by_user of this SupplierInvoiceItem.  # noqa: E501


        :return: The price_set_by_user of this SupplierInvoiceItem.  # noqa: E501
        :rtype: bool
        """
        return self._price_set_by_user

    @price_set_by_user.setter
    def price_set_by_user(self, price_set_by_user):
        """Sets the price_set_by_user of this SupplierInvoiceItem.


        :param price_set_by_user: The price_set_by_user of this SupplierInvoiceItem.  # noqa: E501
        :type: bool
        """

        self._price_set_by_user = price_set_by_user

    @property
    def dimensions_id(self):
        """Gets the dimensions_id of this SupplierInvoiceItem.  # noqa: E501


        :return: The dimensions_id of this SupplierInvoiceItem.  # noqa: E501
        :rtype: int
        """
        return self._dimensions_id

    @dimensions_id.setter
    def dimensions_id(self, dimensions_id):
        """Sets the dimensions_id of this SupplierInvoiceItem.


        :param dimensions_id: The dimensions_id of this SupplierInvoiceItem.  # noqa: E501
        :type: int
        """

        self._dimensions_id = dimensions_id

    @property
    def status_code(self):
        """Gets the status_code of this SupplierInvoiceItem.  # noqa: E501


        :return: The status_code of this SupplierInvoiceItem.  # noqa: E501
        :rtype: int
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this SupplierInvoiceItem.


        :param status_code: The status_code of this SupplierInvoiceItem.  # noqa: E501
        :type: int
        """

        self._status_code = status_code

    @property
    def deleted(self):
        """Gets the deleted of this SupplierInvoiceItem.  # noqa: E501


        :return: The deleted of this SupplierInvoiceItem.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this SupplierInvoiceItem.


        :param deleted: The deleted of this SupplierInvoiceItem.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def unit(self):
        """Gets the unit of this SupplierInvoiceItem.  # noqa: E501


        :return: The unit of this SupplierInvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this SupplierInvoiceItem.


        :param unit: The unit of this SupplierInvoiceItem.  # noqa: E501
        :type: str
        """

        self._unit = unit

    @property
    def product_id(self):
        """Gets the product_id of this SupplierInvoiceItem.  # noqa: E501


        :return: The product_id of this SupplierInvoiceItem.  # noqa: E501
        :rtype: int
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this SupplierInvoiceItem.


        :param product_id: The product_id of this SupplierInvoiceItem.  # noqa: E501
        :type: int
        """

        self._product_id = product_id

    @property
    def id(self):
        """Gets the id of this SupplierInvoiceItem.  # noqa: E501


        :return: The id of this SupplierInvoiceItem.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SupplierInvoiceItem.


        :param id: The id of this SupplierInvoiceItem.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def vat_type_id(self):
        """Gets the vat_type_id of this SupplierInvoiceItem.  # noqa: E501


        :return: The vat_type_id of this SupplierInvoiceItem.  # noqa: E501
        :rtype: int
        """
        return self._vat_type_id

    @vat_type_id.setter
    def vat_type_id(self, vat_type_id):
        """Sets the vat_type_id of this SupplierInvoiceItem.


        :param vat_type_id: The vat_type_id of this SupplierInvoiceItem.  # noqa: E501
        :type: int
        """

        self._vat_type_id = vat_type_id

    @property
    def calculate_gross_price_based_on_net_price(self):
        """Gets the calculate_gross_price_based_on_net_price of this SupplierInvoiceItem.  # noqa: E501


        :return: The calculate_gross_price_based_on_net_price of this SupplierInvoiceItem.  # noqa: E501
        :rtype: bool
        """
        return self._calculate_gross_price_based_on_net_price

    @calculate_gross_price_based_on_net_price.setter
    def calculate_gross_price_based_on_net_price(self, calculate_gross_price_based_on_net_price):
        """Sets the calculate_gross_price_based_on_net_price of this SupplierInvoiceItem.


        :param calculate_gross_price_based_on_net_price: The calculate_gross_price_based_on_net_price of this SupplierInvoiceItem.  # noqa: E501
        :type: bool
        """

        self._calculate_gross_price_based_on_net_price = calculate_gross_price_based_on_net_price

    @property
    def item_text(self):
        """Gets the item_text of this SupplierInvoiceItem.  # noqa: E501


        :return: The item_text of this SupplierInvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._item_text

    @item_text.setter
    def item_text(self, item_text):
        """Sets the item_text of this SupplierInvoiceItem.


        :param item_text: The item_text of this SupplierInvoiceItem.  # noqa: E501
        :type: str
        """

        self._item_text = item_text

    @property
    def currency_code_id(self):
        """Gets the currency_code_id of this SupplierInvoiceItem.  # noqa: E501


        :return: The currency_code_id of this SupplierInvoiceItem.  # noqa: E501
        :rtype: int
        """
        return self._currency_code_id

    @currency_code_id.setter
    def currency_code_id(self, currency_code_id):
        """Sets the currency_code_id of this SupplierInvoiceItem.


        :param currency_code_id: The currency_code_id of this SupplierInvoiceItem.  # noqa: E501
        :type: int
        """

        self._currency_code_id = currency_code_id

    @property
    def updated_by(self):
        """Gets the updated_by of this SupplierInvoiceItem.  # noqa: E501


        :return: The updated_by of this SupplierInvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this SupplierInvoiceItem.


        :param updated_by: The updated_by of this SupplierInvoiceItem.  # noqa: E501
        :type: str
        """

        self._updated_by = updated_by

    @property
    def created_by(self):
        """Gets the created_by of this SupplierInvoiceItem.  # noqa: E501


        :return: The created_by of this SupplierInvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this SupplierInvoiceItem.


        :param created_by: The created_by of this SupplierInvoiceItem.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def comment(self):
        """Gets the comment of this SupplierInvoiceItem.  # noqa: E501


        :return: The comment of this SupplierInvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this SupplierInvoiceItem.


        :param comment: The comment of this SupplierInvoiceItem.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def accounting_cost(self):
        """Gets the accounting_cost of this SupplierInvoiceItem.  # noqa: E501


        :return: The accounting_cost of this SupplierInvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._accounting_cost

    @accounting_cost.setter
    def accounting_cost(self, accounting_cost):
        """Sets the accounting_cost of this SupplierInvoiceItem.


        :param accounting_cost: The accounting_cost of this SupplierInvoiceItem.  # noqa: E501
        :type: str
        """

        self._accounting_cost = accounting_cost

    @property
    def supplier_invoice_id(self):
        """Gets the supplier_invoice_id of this SupplierInvoiceItem.  # noqa: E501


        :return: The supplier_invoice_id of this SupplierInvoiceItem.  # noqa: E501
        :rtype: int
        """
        return self._supplier_invoice_id

    @supplier_invoice_id.setter
    def supplier_invoice_id(self, supplier_invoice_id):
        """Sets the supplier_invoice_id of this SupplierInvoiceItem.


        :param supplier_invoice_id: The supplier_invoice_id of this SupplierInvoiceItem.  # noqa: E501
        :type: int
        """

        self._supplier_invoice_id = supplier_invoice_id

    @property
    def dimensions(self):
        """Gets the dimensions of this SupplierInvoiceItem.  # noqa: E501


        :return: The dimensions of this SupplierInvoiceItem.  # noqa: E501
        :rtype: Dimensions
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this SupplierInvoiceItem.


        :param dimensions: The dimensions of this SupplierInvoiceItem.  # noqa: E501
        :type: Dimensions
        """

        self._dimensions = dimensions

    @property
    def custom_values(self):
        """Gets the custom_values of this SupplierInvoiceItem.  # noqa: E501


        :return: The custom_values of this SupplierInvoiceItem.  # noqa: E501
        :rtype: CustomValues
        """
        return self._custom_values

    @custom_values.setter
    def custom_values(self, custom_values):
        """Sets the custom_values of this SupplierInvoiceItem.


        :param custom_values: The custom_values of this SupplierInvoiceItem.  # noqa: E501
        :type: CustomValues
        """

        self._custom_values = custom_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SupplierInvoiceItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SupplierInvoiceItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
