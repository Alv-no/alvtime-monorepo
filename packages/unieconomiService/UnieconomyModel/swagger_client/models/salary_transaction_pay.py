# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SalaryTransactionPay(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'company_address': 'str',
        'tax_bank_account_id': 'int',
        'company_postal_code': 'str',
        'company_bank_account_id': 'int',
        'company_name': 'str',
        'company_city': 'str',
        'salary_bank_account_id': 'int',
        'pay_list': 'list[SalaryTransactionPayLine]',
        'salary_balance_pay_list': 'list[SalaryBalancePayLine]',
        'custom_values': 'CustomValues'
    }

    attribute_map = {
        'company_address': 'CompanyAddress',
        'tax_bank_account_id': 'TaxBankAccountID',
        'company_postal_code': 'CompanyPostalCode',
        'company_bank_account_id': 'CompanyBankAccountID',
        'company_name': 'CompanyName',
        'company_city': 'CompanyCity',
        'salary_bank_account_id': 'SalaryBankAccountID',
        'pay_list': 'PayList',
        'salary_balance_pay_list': 'SalaryBalancePayList',
        'custom_values': 'CustomValues'
    }

    def __init__(self, company_address=None, tax_bank_account_id=None, company_postal_code=None, company_bank_account_id=None, company_name=None, company_city=None, salary_bank_account_id=None, pay_list=None, salary_balance_pay_list=None, custom_values=None):  # noqa: E501
        """SalaryTransactionPay - a model defined in Swagger"""  # noqa: E501
        self._company_address = None
        self._tax_bank_account_id = None
        self._company_postal_code = None
        self._company_bank_account_id = None
        self._company_name = None
        self._company_city = None
        self._salary_bank_account_id = None
        self._pay_list = None
        self._salary_balance_pay_list = None
        self._custom_values = None
        self.discriminator = None
        if company_address is not None:
            self.company_address = company_address
        if tax_bank_account_id is not None:
            self.tax_bank_account_id = tax_bank_account_id
        if company_postal_code is not None:
            self.company_postal_code = company_postal_code
        if company_bank_account_id is not None:
            self.company_bank_account_id = company_bank_account_id
        if company_name is not None:
            self.company_name = company_name
        if company_city is not None:
            self.company_city = company_city
        if salary_bank_account_id is not None:
            self.salary_bank_account_id = salary_bank_account_id
        if pay_list is not None:
            self.pay_list = pay_list
        if salary_balance_pay_list is not None:
            self.salary_balance_pay_list = salary_balance_pay_list
        if custom_values is not None:
            self.custom_values = custom_values

    @property
    def company_address(self):
        """Gets the company_address of this SalaryTransactionPay.  # noqa: E501


        :return: The company_address of this SalaryTransactionPay.  # noqa: E501
        :rtype: str
        """
        return self._company_address

    @company_address.setter
    def company_address(self, company_address):
        """Sets the company_address of this SalaryTransactionPay.


        :param company_address: The company_address of this SalaryTransactionPay.  # noqa: E501
        :type: str
        """

        self._company_address = company_address

    @property
    def tax_bank_account_id(self):
        """Gets the tax_bank_account_id of this SalaryTransactionPay.  # noqa: E501


        :return: The tax_bank_account_id of this SalaryTransactionPay.  # noqa: E501
        :rtype: int
        """
        return self._tax_bank_account_id

    @tax_bank_account_id.setter
    def tax_bank_account_id(self, tax_bank_account_id):
        """Sets the tax_bank_account_id of this SalaryTransactionPay.


        :param tax_bank_account_id: The tax_bank_account_id of this SalaryTransactionPay.  # noqa: E501
        :type: int
        """

        self._tax_bank_account_id = tax_bank_account_id

    @property
    def company_postal_code(self):
        """Gets the company_postal_code of this SalaryTransactionPay.  # noqa: E501


        :return: The company_postal_code of this SalaryTransactionPay.  # noqa: E501
        :rtype: str
        """
        return self._company_postal_code

    @company_postal_code.setter
    def company_postal_code(self, company_postal_code):
        """Sets the company_postal_code of this SalaryTransactionPay.


        :param company_postal_code: The company_postal_code of this SalaryTransactionPay.  # noqa: E501
        :type: str
        """

        self._company_postal_code = company_postal_code

    @property
    def company_bank_account_id(self):
        """Gets the company_bank_account_id of this SalaryTransactionPay.  # noqa: E501


        :return: The company_bank_account_id of this SalaryTransactionPay.  # noqa: E501
        :rtype: int
        """
        return self._company_bank_account_id

    @company_bank_account_id.setter
    def company_bank_account_id(self, company_bank_account_id):
        """Sets the company_bank_account_id of this SalaryTransactionPay.


        :param company_bank_account_id: The company_bank_account_id of this SalaryTransactionPay.  # noqa: E501
        :type: int
        """

        self._company_bank_account_id = company_bank_account_id

    @property
    def company_name(self):
        """Gets the company_name of this SalaryTransactionPay.  # noqa: E501


        :return: The company_name of this SalaryTransactionPay.  # noqa: E501
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this SalaryTransactionPay.


        :param company_name: The company_name of this SalaryTransactionPay.  # noqa: E501
        :type: str
        """

        self._company_name = company_name

    @property
    def company_city(self):
        """Gets the company_city of this SalaryTransactionPay.  # noqa: E501


        :return: The company_city of this SalaryTransactionPay.  # noqa: E501
        :rtype: str
        """
        return self._company_city

    @company_city.setter
    def company_city(self, company_city):
        """Sets the company_city of this SalaryTransactionPay.


        :param company_city: The company_city of this SalaryTransactionPay.  # noqa: E501
        :type: str
        """

        self._company_city = company_city

    @property
    def salary_bank_account_id(self):
        """Gets the salary_bank_account_id of this SalaryTransactionPay.  # noqa: E501


        :return: The salary_bank_account_id of this SalaryTransactionPay.  # noqa: E501
        :rtype: int
        """
        return self._salary_bank_account_id

    @salary_bank_account_id.setter
    def salary_bank_account_id(self, salary_bank_account_id):
        """Sets the salary_bank_account_id of this SalaryTransactionPay.


        :param salary_bank_account_id: The salary_bank_account_id of this SalaryTransactionPay.  # noqa: E501
        :type: int
        """

        self._salary_bank_account_id = salary_bank_account_id

    @property
    def pay_list(self):
        """Gets the pay_list of this SalaryTransactionPay.  # noqa: E501


        :return: The pay_list of this SalaryTransactionPay.  # noqa: E501
        :rtype: list[SalaryTransactionPayLine]
        """
        return self._pay_list

    @pay_list.setter
    def pay_list(self, pay_list):
        """Sets the pay_list of this SalaryTransactionPay.


        :param pay_list: The pay_list of this SalaryTransactionPay.  # noqa: E501
        :type: list[SalaryTransactionPayLine]
        """

        self._pay_list = pay_list

    @property
    def salary_balance_pay_list(self):
        """Gets the salary_balance_pay_list of this SalaryTransactionPay.  # noqa: E501


        :return: The salary_balance_pay_list of this SalaryTransactionPay.  # noqa: E501
        :rtype: list[SalaryBalancePayLine]
        """
        return self._salary_balance_pay_list

    @salary_balance_pay_list.setter
    def salary_balance_pay_list(self, salary_balance_pay_list):
        """Sets the salary_balance_pay_list of this SalaryTransactionPay.


        :param salary_balance_pay_list: The salary_balance_pay_list of this SalaryTransactionPay.  # noqa: E501
        :type: list[SalaryBalancePayLine]
        """

        self._salary_balance_pay_list = salary_balance_pay_list

    @property
    def custom_values(self):
        """Gets the custom_values of this SalaryTransactionPay.  # noqa: E501


        :return: The custom_values of this SalaryTransactionPay.  # noqa: E501
        :rtype: CustomValues
        """
        return self._custom_values

    @custom_values.setter
    def custom_values(self, custom_values):
        """Sets the custom_values of this SalaryTransactionPay.


        :param custom_values: The custom_values of this SalaryTransactionPay.  # noqa: E501
        :type: CustomValues
        """

        self._custom_values = custom_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SalaryTransactionPay, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SalaryTransactionPay):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
