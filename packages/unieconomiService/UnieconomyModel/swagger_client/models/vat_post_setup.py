# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class VatPostSetup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'has_tax_amount': 'bool',
        'has_tax_basis': 'bool',
        'name': 'str',
        'deleted': 'bool',
        'report_as_negative_amount': 'bool',
        'vat_code_group_setup_no': 'str',
        'no': 'str',
        'id': 'int',
        'updated_by': 'str',
        'created_by': 'str',
        'custom_values': 'CustomValues'
    }

    attribute_map = {
        'has_tax_amount': 'HasTaxAmount',
        'has_tax_basis': 'HasTaxBasis',
        'name': 'Name',
        'deleted': 'Deleted',
        'report_as_negative_amount': 'ReportAsNegativeAmount',
        'vat_code_group_setup_no': 'VatCodeGroupSetupNo',
        'no': 'No',
        'id': 'ID',
        'updated_by': 'UpdatedBy',
        'created_by': 'CreatedBy',
        'custom_values': 'CustomValues'
    }

    def __init__(self, has_tax_amount=None, has_tax_basis=None, name=None, deleted=None, report_as_negative_amount=None, vat_code_group_setup_no=None, no=None, id=None, updated_by=None, created_by=None, custom_values=None):  # noqa: E501
        """VatPostSetup - a model defined in Swagger"""  # noqa: E501
        self._has_tax_amount = None
        self._has_tax_basis = None
        self._name = None
        self._deleted = None
        self._report_as_negative_amount = None
        self._vat_code_group_setup_no = None
        self._no = None
        self._id = None
        self._updated_by = None
        self._created_by = None
        self._custom_values = None
        self.discriminator = None
        if has_tax_amount is not None:
            self.has_tax_amount = has_tax_amount
        if has_tax_basis is not None:
            self.has_tax_basis = has_tax_basis
        if name is not None:
            self.name = name
        if deleted is not None:
            self.deleted = deleted
        if report_as_negative_amount is not None:
            self.report_as_negative_amount = report_as_negative_amount
        if vat_code_group_setup_no is not None:
            self.vat_code_group_setup_no = vat_code_group_setup_no
        if no is not None:
            self.no = no
        if id is not None:
            self.id = id
        if updated_by is not None:
            self.updated_by = updated_by
        if created_by is not None:
            self.created_by = created_by
        if custom_values is not None:
            self.custom_values = custom_values

    @property
    def has_tax_amount(self):
        """Gets the has_tax_amount of this VatPostSetup.  # noqa: E501


        :return: The has_tax_amount of this VatPostSetup.  # noqa: E501
        :rtype: bool
        """
        return self._has_tax_amount

    @has_tax_amount.setter
    def has_tax_amount(self, has_tax_amount):
        """Sets the has_tax_amount of this VatPostSetup.


        :param has_tax_amount: The has_tax_amount of this VatPostSetup.  # noqa: E501
        :type: bool
        """

        self._has_tax_amount = has_tax_amount

    @property
    def has_tax_basis(self):
        """Gets the has_tax_basis of this VatPostSetup.  # noqa: E501


        :return: The has_tax_basis of this VatPostSetup.  # noqa: E501
        :rtype: bool
        """
        return self._has_tax_basis

    @has_tax_basis.setter
    def has_tax_basis(self, has_tax_basis):
        """Sets the has_tax_basis of this VatPostSetup.


        :param has_tax_basis: The has_tax_basis of this VatPostSetup.  # noqa: E501
        :type: bool
        """

        self._has_tax_basis = has_tax_basis

    @property
    def name(self):
        """Gets the name of this VatPostSetup.  # noqa: E501


        :return: The name of this VatPostSetup.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VatPostSetup.


        :param name: The name of this VatPostSetup.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def deleted(self):
        """Gets the deleted of this VatPostSetup.  # noqa: E501


        :return: The deleted of this VatPostSetup.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this VatPostSetup.


        :param deleted: The deleted of this VatPostSetup.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def report_as_negative_amount(self):
        """Gets the report_as_negative_amount of this VatPostSetup.  # noqa: E501


        :return: The report_as_negative_amount of this VatPostSetup.  # noqa: E501
        :rtype: bool
        """
        return self._report_as_negative_amount

    @report_as_negative_amount.setter
    def report_as_negative_amount(self, report_as_negative_amount):
        """Sets the report_as_negative_amount of this VatPostSetup.


        :param report_as_negative_amount: The report_as_negative_amount of this VatPostSetup.  # noqa: E501
        :type: bool
        """

        self._report_as_negative_amount = report_as_negative_amount

    @property
    def vat_code_group_setup_no(self):
        """Gets the vat_code_group_setup_no of this VatPostSetup.  # noqa: E501


        :return: The vat_code_group_setup_no of this VatPostSetup.  # noqa: E501
        :rtype: str
        """
        return self._vat_code_group_setup_no

    @vat_code_group_setup_no.setter
    def vat_code_group_setup_no(self, vat_code_group_setup_no):
        """Sets the vat_code_group_setup_no of this VatPostSetup.


        :param vat_code_group_setup_no: The vat_code_group_setup_no of this VatPostSetup.  # noqa: E501
        :type: str
        """

        self._vat_code_group_setup_no = vat_code_group_setup_no

    @property
    def no(self):
        """Gets the no of this VatPostSetup.  # noqa: E501


        :return: The no of this VatPostSetup.  # noqa: E501
        :rtype: str
        """
        return self._no

    @no.setter
    def no(self, no):
        """Sets the no of this VatPostSetup.


        :param no: The no of this VatPostSetup.  # noqa: E501
        :type: str
        """

        self._no = no

    @property
    def id(self):
        """Gets the id of this VatPostSetup.  # noqa: E501


        :return: The id of this VatPostSetup.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VatPostSetup.


        :param id: The id of this VatPostSetup.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def updated_by(self):
        """Gets the updated_by of this VatPostSetup.  # noqa: E501


        :return: The updated_by of this VatPostSetup.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this VatPostSetup.


        :param updated_by: The updated_by of this VatPostSetup.  # noqa: E501
        :type: str
        """

        self._updated_by = updated_by

    @property
    def created_by(self):
        """Gets the created_by of this VatPostSetup.  # noqa: E501


        :return: The created_by of this VatPostSetup.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this VatPostSetup.


        :param created_by: The created_by of this VatPostSetup.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def custom_values(self):
        """Gets the custom_values of this VatPostSetup.  # noqa: E501


        :return: The custom_values of this VatPostSetup.  # noqa: E501
        :rtype: CustomValues
        """
        return self._custom_values

    @custom_values.setter
    def custom_values(self, custom_values):
        """Sets the custom_values of this VatPostSetup.


        :param custom_values: The custom_values of this VatPostSetup.  # noqa: E501
        :type: CustomValues
        """

        self._custom_values = custom_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VatPostSetup, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VatPostSetup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
