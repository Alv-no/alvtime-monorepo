# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SendEmail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'message': 'str',
        'entity_type': 'str',
        'from_address': 'str',
        'subject': 'str',
        'copy_address': 'str',
        'report_name': 'str',
        'external_reference': 'str',
        'report_id': 'int',
        'localization': 'str',
        'entity_id': 'int',
        'attachments': 'list[SendEmailAttachment]',
        'parameters': 'list[ReportParameter]',
        'custom_values': 'CustomValues'
    }

    attribute_map = {
        'message': 'Message',
        'entity_type': 'EntityType',
        'from_address': 'FromAddress',
        'subject': 'Subject',
        'copy_address': 'CopyAddress',
        'report_name': 'ReportName',
        'external_reference': 'ExternalReference',
        'report_id': 'ReportID',
        'localization': 'Localization',
        'entity_id': 'EntityID',
        'attachments': 'Attachments',
        'parameters': 'Parameters',
        'custom_values': 'CustomValues'
    }

    def __init__(self, message=None, entity_type=None, from_address=None, subject=None, copy_address=None, report_name=None, external_reference=None, report_id=None, localization=None, entity_id=None, attachments=None, parameters=None, custom_values=None):  # noqa: E501
        """SendEmail - a model defined in Swagger"""  # noqa: E501
        self._message = None
        self._entity_type = None
        self._from_address = None
        self._subject = None
        self._copy_address = None
        self._report_name = None
        self._external_reference = None
        self._report_id = None
        self._localization = None
        self._entity_id = None
        self._attachments = None
        self._parameters = None
        self._custom_values = None
        self.discriminator = None
        if message is not None:
            self.message = message
        if entity_type is not None:
            self.entity_type = entity_type
        if from_address is not None:
            self.from_address = from_address
        if subject is not None:
            self.subject = subject
        if copy_address is not None:
            self.copy_address = copy_address
        if report_name is not None:
            self.report_name = report_name
        if external_reference is not None:
            self.external_reference = external_reference
        if report_id is not None:
            self.report_id = report_id
        if localization is not None:
            self.localization = localization
        if entity_id is not None:
            self.entity_id = entity_id
        if attachments is not None:
            self.attachments = attachments
        if parameters is not None:
            self.parameters = parameters
        if custom_values is not None:
            self.custom_values = custom_values

    @property
    def message(self):
        """Gets the message of this SendEmail.  # noqa: E501


        :return: The message of this SendEmail.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this SendEmail.


        :param message: The message of this SendEmail.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def entity_type(self):
        """Gets the entity_type of this SendEmail.  # noqa: E501


        :return: The entity_type of this SendEmail.  # noqa: E501
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this SendEmail.


        :param entity_type: The entity_type of this SendEmail.  # noqa: E501
        :type: str
        """

        self._entity_type = entity_type

    @property
    def from_address(self):
        """Gets the from_address of this SendEmail.  # noqa: E501


        :return: The from_address of this SendEmail.  # noqa: E501
        :rtype: str
        """
        return self._from_address

    @from_address.setter
    def from_address(self, from_address):
        """Sets the from_address of this SendEmail.


        :param from_address: The from_address of this SendEmail.  # noqa: E501
        :type: str
        """

        self._from_address = from_address

    @property
    def subject(self):
        """Gets the subject of this SendEmail.  # noqa: E501


        :return: The subject of this SendEmail.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this SendEmail.


        :param subject: The subject of this SendEmail.  # noqa: E501
        :type: str
        """

        self._subject = subject

    @property
    def copy_address(self):
        """Gets the copy_address of this SendEmail.  # noqa: E501


        :return: The copy_address of this SendEmail.  # noqa: E501
        :rtype: str
        """
        return self._copy_address

    @copy_address.setter
    def copy_address(self, copy_address):
        """Sets the copy_address of this SendEmail.


        :param copy_address: The copy_address of this SendEmail.  # noqa: E501
        :type: str
        """

        self._copy_address = copy_address

    @property
    def report_name(self):
        """Gets the report_name of this SendEmail.  # noqa: E501


        :return: The report_name of this SendEmail.  # noqa: E501
        :rtype: str
        """
        return self._report_name

    @report_name.setter
    def report_name(self, report_name):
        """Sets the report_name of this SendEmail.


        :param report_name: The report_name of this SendEmail.  # noqa: E501
        :type: str
        """

        self._report_name = report_name

    @property
    def external_reference(self):
        """Gets the external_reference of this SendEmail.  # noqa: E501


        :return: The external_reference of this SendEmail.  # noqa: E501
        :rtype: str
        """
        return self._external_reference

    @external_reference.setter
    def external_reference(self, external_reference):
        """Sets the external_reference of this SendEmail.


        :param external_reference: The external_reference of this SendEmail.  # noqa: E501
        :type: str
        """

        self._external_reference = external_reference

    @property
    def report_id(self):
        """Gets the report_id of this SendEmail.  # noqa: E501


        :return: The report_id of this SendEmail.  # noqa: E501
        :rtype: int
        """
        return self._report_id

    @report_id.setter
    def report_id(self, report_id):
        """Sets the report_id of this SendEmail.


        :param report_id: The report_id of this SendEmail.  # noqa: E501
        :type: int
        """

        self._report_id = report_id

    @property
    def localization(self):
        """Gets the localization of this SendEmail.  # noqa: E501


        :return: The localization of this SendEmail.  # noqa: E501
        :rtype: str
        """
        return self._localization

    @localization.setter
    def localization(self, localization):
        """Sets the localization of this SendEmail.


        :param localization: The localization of this SendEmail.  # noqa: E501
        :type: str
        """

        self._localization = localization

    @property
    def entity_id(self):
        """Gets the entity_id of this SendEmail.  # noqa: E501


        :return: The entity_id of this SendEmail.  # noqa: E501
        :rtype: int
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this SendEmail.


        :param entity_id: The entity_id of this SendEmail.  # noqa: E501
        :type: int
        """

        self._entity_id = entity_id

    @property
    def attachments(self):
        """Gets the attachments of this SendEmail.  # noqa: E501


        :return: The attachments of this SendEmail.  # noqa: E501
        :rtype: list[SendEmailAttachment]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this SendEmail.


        :param attachments: The attachments of this SendEmail.  # noqa: E501
        :type: list[SendEmailAttachment]
        """

        self._attachments = attachments

    @property
    def parameters(self):
        """Gets the parameters of this SendEmail.  # noqa: E501


        :return: The parameters of this SendEmail.  # noqa: E501
        :rtype: list[ReportParameter]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this SendEmail.


        :param parameters: The parameters of this SendEmail.  # noqa: E501
        :type: list[ReportParameter]
        """

        self._parameters = parameters

    @property
    def custom_values(self):
        """Gets the custom_values of this SendEmail.  # noqa: E501


        :return: The custom_values of this SendEmail.  # noqa: E501
        :rtype: CustomValues
        """
        return self._custom_values

    @custom_values.setter
    def custom_values(self, custom_values):
        """Sets the custom_values of this SendEmail.


        :param custom_values: The custom_values of this SendEmail.  # noqa: E501
        :type: CustomValues
        """

        self._custom_values = custom_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SendEmail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SendEmail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
