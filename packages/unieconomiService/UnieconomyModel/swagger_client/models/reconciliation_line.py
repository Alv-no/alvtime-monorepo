# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ReconciliationLine(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'has_employment_tax': 'bool',
        'income_type': 'str',
        'benefit': 'str',
        'wage_type_number': 'int',
        'wage_type_name': 'str',
        'custom_values': 'CustomValues'
    }

    attribute_map = {
        'description': 'Description',
        'has_employment_tax': 'HasEmploymentTax',
        'income_type': 'IncomeType',
        'benefit': 'Benefit',
        'wage_type_number': 'WageTypeNumber',
        'wage_type_name': 'WageTypeName',
        'custom_values': 'CustomValues'
    }

    def __init__(self, description=None, has_employment_tax=None, income_type=None, benefit=None, wage_type_number=None, wage_type_name=None, custom_values=None):  # noqa: E501
        """ReconciliationLine - a model defined in Swagger"""  # noqa: E501
        self._description = None
        self._has_employment_tax = None
        self._income_type = None
        self._benefit = None
        self._wage_type_number = None
        self._wage_type_name = None
        self._custom_values = None
        self.discriminator = None
        if description is not None:
            self.description = description
        if has_employment_tax is not None:
            self.has_employment_tax = has_employment_tax
        if income_type is not None:
            self.income_type = income_type
        if benefit is not None:
            self.benefit = benefit
        if wage_type_number is not None:
            self.wage_type_number = wage_type_number
        if wage_type_name is not None:
            self.wage_type_name = wage_type_name
        if custom_values is not None:
            self.custom_values = custom_values

    @property
    def description(self):
        """Gets the description of this ReconciliationLine.  # noqa: E501


        :return: The description of this ReconciliationLine.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ReconciliationLine.


        :param description: The description of this ReconciliationLine.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def has_employment_tax(self):
        """Gets the has_employment_tax of this ReconciliationLine.  # noqa: E501


        :return: The has_employment_tax of this ReconciliationLine.  # noqa: E501
        :rtype: bool
        """
        return self._has_employment_tax

    @has_employment_tax.setter
    def has_employment_tax(self, has_employment_tax):
        """Sets the has_employment_tax of this ReconciliationLine.


        :param has_employment_tax: The has_employment_tax of this ReconciliationLine.  # noqa: E501
        :type: bool
        """

        self._has_employment_tax = has_employment_tax

    @property
    def income_type(self):
        """Gets the income_type of this ReconciliationLine.  # noqa: E501


        :return: The income_type of this ReconciliationLine.  # noqa: E501
        :rtype: str
        """
        return self._income_type

    @income_type.setter
    def income_type(self, income_type):
        """Sets the income_type of this ReconciliationLine.


        :param income_type: The income_type of this ReconciliationLine.  # noqa: E501
        :type: str
        """

        self._income_type = income_type

    @property
    def benefit(self):
        """Gets the benefit of this ReconciliationLine.  # noqa: E501


        :return: The benefit of this ReconciliationLine.  # noqa: E501
        :rtype: str
        """
        return self._benefit

    @benefit.setter
    def benefit(self, benefit):
        """Sets the benefit of this ReconciliationLine.


        :param benefit: The benefit of this ReconciliationLine.  # noqa: E501
        :type: str
        """

        self._benefit = benefit

    @property
    def wage_type_number(self):
        """Gets the wage_type_number of this ReconciliationLine.  # noqa: E501


        :return: The wage_type_number of this ReconciliationLine.  # noqa: E501
        :rtype: int
        """
        return self._wage_type_number

    @wage_type_number.setter
    def wage_type_number(self, wage_type_number):
        """Sets the wage_type_number of this ReconciliationLine.


        :param wage_type_number: The wage_type_number of this ReconciliationLine.  # noqa: E501
        :type: int
        """

        self._wage_type_number = wage_type_number

    @property
    def wage_type_name(self):
        """Gets the wage_type_name of this ReconciliationLine.  # noqa: E501


        :return: The wage_type_name of this ReconciliationLine.  # noqa: E501
        :rtype: str
        """
        return self._wage_type_name

    @wage_type_name.setter
    def wage_type_name(self, wage_type_name):
        """Sets the wage_type_name of this ReconciliationLine.


        :param wage_type_name: The wage_type_name of this ReconciliationLine.  # noqa: E501
        :type: str
        """

        self._wage_type_name = wage_type_name

    @property
    def custom_values(self):
        """Gets the custom_values of this ReconciliationLine.  # noqa: E501


        :return: The custom_values of this ReconciliationLine.  # noqa: E501
        :rtype: CustomValues
        """
        return self._custom_values

    @custom_values.setter
    def custom_values(self, custom_values):
        """Sets the custom_values of this ReconciliationLine.


        :param custom_values: The custom_values of this ReconciliationLine.  # noqa: E501
        :type: CustomValues
        """

        self._custom_values = custom_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReconciliationLine, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReconciliationLine):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
