# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateCompanyDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_template': 'bool',
        'copy_files': 'bool',
        'contract_id': 'int',
        'company_name': 'str',
        'contract_type': 'int',
        'product_names': 'str',
        'template_company_key': 'str',
        'is_test': 'bool',
        'license_key': 'str',
        'company_settings': 'CompanySettings',
        'custom_values': 'CustomValues'
    }

    attribute_map = {
        'is_template': 'IsTemplate',
        'copy_files': 'CopyFiles',
        'contract_id': 'ContractID',
        'company_name': 'CompanyName',
        'contract_type': 'ContractType',
        'product_names': 'ProductNames',
        'template_company_key': 'TemplateCompanyKey',
        'is_test': 'IsTest',
        'license_key': 'LicenseKey',
        'company_settings': 'CompanySettings',
        'custom_values': 'CustomValues'
    }

    def __init__(self, is_template=None, copy_files=None, contract_id=None, company_name=None, contract_type=None, product_names=None, template_company_key=None, is_test=None, license_key=None, company_settings=None, custom_values=None):  # noqa: E501
        """CreateCompanyDetails - a model defined in Swagger"""  # noqa: E501
        self._is_template = None
        self._copy_files = None
        self._contract_id = None
        self._company_name = None
        self._contract_type = None
        self._product_names = None
        self._template_company_key = None
        self._is_test = None
        self._license_key = None
        self._company_settings = None
        self._custom_values = None
        self.discriminator = None
        if is_template is not None:
            self.is_template = is_template
        if copy_files is not None:
            self.copy_files = copy_files
        if contract_id is not None:
            self.contract_id = contract_id
        if company_name is not None:
            self.company_name = company_name
        if contract_type is not None:
            self.contract_type = contract_type
        if product_names is not None:
            self.product_names = product_names
        if template_company_key is not None:
            self.template_company_key = template_company_key
        if is_test is not None:
            self.is_test = is_test
        if license_key is not None:
            self.license_key = license_key
        if company_settings is not None:
            self.company_settings = company_settings
        if custom_values is not None:
            self.custom_values = custom_values

    @property
    def is_template(self):
        """Gets the is_template of this CreateCompanyDetails.  # noqa: E501


        :return: The is_template of this CreateCompanyDetails.  # noqa: E501
        :rtype: bool
        """
        return self._is_template

    @is_template.setter
    def is_template(self, is_template):
        """Sets the is_template of this CreateCompanyDetails.


        :param is_template: The is_template of this CreateCompanyDetails.  # noqa: E501
        :type: bool
        """

        self._is_template = is_template

    @property
    def copy_files(self):
        """Gets the copy_files of this CreateCompanyDetails.  # noqa: E501


        :return: The copy_files of this CreateCompanyDetails.  # noqa: E501
        :rtype: bool
        """
        return self._copy_files

    @copy_files.setter
    def copy_files(self, copy_files):
        """Sets the copy_files of this CreateCompanyDetails.


        :param copy_files: The copy_files of this CreateCompanyDetails.  # noqa: E501
        :type: bool
        """

        self._copy_files = copy_files

    @property
    def contract_id(self):
        """Gets the contract_id of this CreateCompanyDetails.  # noqa: E501


        :return: The contract_id of this CreateCompanyDetails.  # noqa: E501
        :rtype: int
        """
        return self._contract_id

    @contract_id.setter
    def contract_id(self, contract_id):
        """Sets the contract_id of this CreateCompanyDetails.


        :param contract_id: The contract_id of this CreateCompanyDetails.  # noqa: E501
        :type: int
        """

        self._contract_id = contract_id

    @property
    def company_name(self):
        """Gets the company_name of this CreateCompanyDetails.  # noqa: E501


        :return: The company_name of this CreateCompanyDetails.  # noqa: E501
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this CreateCompanyDetails.


        :param company_name: The company_name of this CreateCompanyDetails.  # noqa: E501
        :type: str
        """

        self._company_name = company_name

    @property
    def contract_type(self):
        """Gets the contract_type of this CreateCompanyDetails.  # noqa: E501


        :return: The contract_type of this CreateCompanyDetails.  # noqa: E501
        :rtype: int
        """
        return self._contract_type

    @contract_type.setter
    def contract_type(self, contract_type):
        """Sets the contract_type of this CreateCompanyDetails.


        :param contract_type: The contract_type of this CreateCompanyDetails.  # noqa: E501
        :type: int
        """

        self._contract_type = contract_type

    @property
    def product_names(self):
        """Gets the product_names of this CreateCompanyDetails.  # noqa: E501


        :return: The product_names of this CreateCompanyDetails.  # noqa: E501
        :rtype: str
        """
        return self._product_names

    @product_names.setter
    def product_names(self, product_names):
        """Sets the product_names of this CreateCompanyDetails.


        :param product_names: The product_names of this CreateCompanyDetails.  # noqa: E501
        :type: str
        """

        self._product_names = product_names

    @property
    def template_company_key(self):
        """Gets the template_company_key of this CreateCompanyDetails.  # noqa: E501


        :return: The template_company_key of this CreateCompanyDetails.  # noqa: E501
        :rtype: str
        """
        return self._template_company_key

    @template_company_key.setter
    def template_company_key(self, template_company_key):
        """Sets the template_company_key of this CreateCompanyDetails.


        :param template_company_key: The template_company_key of this CreateCompanyDetails.  # noqa: E501
        :type: str
        """

        self._template_company_key = template_company_key

    @property
    def is_test(self):
        """Gets the is_test of this CreateCompanyDetails.  # noqa: E501


        :return: The is_test of this CreateCompanyDetails.  # noqa: E501
        :rtype: bool
        """
        return self._is_test

    @is_test.setter
    def is_test(self, is_test):
        """Sets the is_test of this CreateCompanyDetails.


        :param is_test: The is_test of this CreateCompanyDetails.  # noqa: E501
        :type: bool
        """

        self._is_test = is_test

    @property
    def license_key(self):
        """Gets the license_key of this CreateCompanyDetails.  # noqa: E501


        :return: The license_key of this CreateCompanyDetails.  # noqa: E501
        :rtype: str
        """
        return self._license_key

    @license_key.setter
    def license_key(self, license_key):
        """Sets the license_key of this CreateCompanyDetails.


        :param license_key: The license_key of this CreateCompanyDetails.  # noqa: E501
        :type: str
        """

        self._license_key = license_key

    @property
    def company_settings(self):
        """Gets the company_settings of this CreateCompanyDetails.  # noqa: E501


        :return: The company_settings of this CreateCompanyDetails.  # noqa: E501
        :rtype: CompanySettings
        """
        return self._company_settings

    @company_settings.setter
    def company_settings(self, company_settings):
        """Sets the company_settings of this CreateCompanyDetails.


        :param company_settings: The company_settings of this CreateCompanyDetails.  # noqa: E501
        :type: CompanySettings
        """

        self._company_settings = company_settings

    @property
    def custom_values(self):
        """Gets the custom_values of this CreateCompanyDetails.  # noqa: E501


        :return: The custom_values of this CreateCompanyDetails.  # noqa: E501
        :rtype: CustomValues
        """
        return self._custom_values

    @custom_values.setter
    def custom_values(self, custom_values):
        """Sets the custom_values of this CreateCompanyDetails.


        :param custom_values: The custom_values of this CreateCompanyDetails.  # noqa: E501
        :type: CustomValues
        """

        self._custom_values = custom_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateCompanyDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateCompanyDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
