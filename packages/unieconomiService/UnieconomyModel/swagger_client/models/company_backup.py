# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CompanyBackup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'org_number': 'str',
        'copy_files': 'bool',
        'schema_name': 'str',
        'message': 'str',
        'container_name': 'str',
        'company_key': 'str',
        'customer_name': 'str',
        'environment': 'str',
        'deleted': 'bool',
        'contract_id': 'int',
        'company_name': 'str',
        'contract_type': 'int',
        'reason': 'str',
        'cloud_blob_name': 'str',
        'id': 'int',
        'updated_by': 'str',
        'created_by': 'str',
        'backup_status': 'str',
        'custom_values': 'CustomValues'
    }

    attribute_map = {
        'org_number': 'OrgNumber',
        'copy_files': 'CopyFiles',
        'schema_name': 'SchemaName',
        'message': 'Message',
        'container_name': 'ContainerName',
        'company_key': 'CompanyKey',
        'customer_name': 'CustomerName',
        'environment': 'Environment',
        'deleted': 'Deleted',
        'contract_id': 'ContractID',
        'company_name': 'CompanyName',
        'contract_type': 'ContractType',
        'reason': 'Reason',
        'cloud_blob_name': 'CloudBlobName',
        'id': 'ID',
        'updated_by': 'UpdatedBy',
        'created_by': 'CreatedBy',
        'backup_status': 'BackupStatus',
        'custom_values': 'CustomValues'
    }

    def __init__(self, org_number=None, copy_files=None, schema_name=None, message=None, container_name=None, company_key=None, customer_name=None, environment=None, deleted=None, contract_id=None, company_name=None, contract_type=None, reason=None, cloud_blob_name=None, id=None, updated_by=None, created_by=None, backup_status=None, custom_values=None):  # noqa: E501
        """CompanyBackup - a model defined in Swagger"""  # noqa: E501
        self._org_number = None
        self._copy_files = None
        self._schema_name = None
        self._message = None
        self._container_name = None
        self._company_key = None
        self._customer_name = None
        self._environment = None
        self._deleted = None
        self._contract_id = None
        self._company_name = None
        self._contract_type = None
        self._reason = None
        self._cloud_blob_name = None
        self._id = None
        self._updated_by = None
        self._created_by = None
        self._backup_status = None
        self._custom_values = None
        self.discriminator = None
        if org_number is not None:
            self.org_number = org_number
        if copy_files is not None:
            self.copy_files = copy_files
        if schema_name is not None:
            self.schema_name = schema_name
        if message is not None:
            self.message = message
        if container_name is not None:
            self.container_name = container_name
        if company_key is not None:
            self.company_key = company_key
        if customer_name is not None:
            self.customer_name = customer_name
        if environment is not None:
            self.environment = environment
        if deleted is not None:
            self.deleted = deleted
        if contract_id is not None:
            self.contract_id = contract_id
        if company_name is not None:
            self.company_name = company_name
        if contract_type is not None:
            self.contract_type = contract_type
        if reason is not None:
            self.reason = reason
        if cloud_blob_name is not None:
            self.cloud_blob_name = cloud_blob_name
        if id is not None:
            self.id = id
        if updated_by is not None:
            self.updated_by = updated_by
        if created_by is not None:
            self.created_by = created_by
        if backup_status is not None:
            self.backup_status = backup_status
        if custom_values is not None:
            self.custom_values = custom_values

    @property
    def org_number(self):
        """Gets the org_number of this CompanyBackup.  # noqa: E501


        :return: The org_number of this CompanyBackup.  # noqa: E501
        :rtype: str
        """
        return self._org_number

    @org_number.setter
    def org_number(self, org_number):
        """Sets the org_number of this CompanyBackup.


        :param org_number: The org_number of this CompanyBackup.  # noqa: E501
        :type: str
        """

        self._org_number = org_number

    @property
    def copy_files(self):
        """Gets the copy_files of this CompanyBackup.  # noqa: E501


        :return: The copy_files of this CompanyBackup.  # noqa: E501
        :rtype: bool
        """
        return self._copy_files

    @copy_files.setter
    def copy_files(self, copy_files):
        """Sets the copy_files of this CompanyBackup.


        :param copy_files: The copy_files of this CompanyBackup.  # noqa: E501
        :type: bool
        """

        self._copy_files = copy_files

    @property
    def schema_name(self):
        """Gets the schema_name of this CompanyBackup.  # noqa: E501


        :return: The schema_name of this CompanyBackup.  # noqa: E501
        :rtype: str
        """
        return self._schema_name

    @schema_name.setter
    def schema_name(self, schema_name):
        """Sets the schema_name of this CompanyBackup.


        :param schema_name: The schema_name of this CompanyBackup.  # noqa: E501
        :type: str
        """

        self._schema_name = schema_name

    @property
    def message(self):
        """Gets the message of this CompanyBackup.  # noqa: E501


        :return: The message of this CompanyBackup.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this CompanyBackup.


        :param message: The message of this CompanyBackup.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def container_name(self):
        """Gets the container_name of this CompanyBackup.  # noqa: E501


        :return: The container_name of this CompanyBackup.  # noqa: E501
        :rtype: str
        """
        return self._container_name

    @container_name.setter
    def container_name(self, container_name):
        """Sets the container_name of this CompanyBackup.


        :param container_name: The container_name of this CompanyBackup.  # noqa: E501
        :type: str
        """

        self._container_name = container_name

    @property
    def company_key(self):
        """Gets the company_key of this CompanyBackup.  # noqa: E501


        :return: The company_key of this CompanyBackup.  # noqa: E501
        :rtype: str
        """
        return self._company_key

    @company_key.setter
    def company_key(self, company_key):
        """Sets the company_key of this CompanyBackup.


        :param company_key: The company_key of this CompanyBackup.  # noqa: E501
        :type: str
        """

        self._company_key = company_key

    @property
    def customer_name(self):
        """Gets the customer_name of this CompanyBackup.  # noqa: E501


        :return: The customer_name of this CompanyBackup.  # noqa: E501
        :rtype: str
        """
        return self._customer_name

    @customer_name.setter
    def customer_name(self, customer_name):
        """Sets the customer_name of this CompanyBackup.


        :param customer_name: The customer_name of this CompanyBackup.  # noqa: E501
        :type: str
        """

        self._customer_name = customer_name

    @property
    def environment(self):
        """Gets the environment of this CompanyBackup.  # noqa: E501


        :return: The environment of this CompanyBackup.  # noqa: E501
        :rtype: str
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this CompanyBackup.


        :param environment: The environment of this CompanyBackup.  # noqa: E501
        :type: str
        """

        self._environment = environment

    @property
    def deleted(self):
        """Gets the deleted of this CompanyBackup.  # noqa: E501


        :return: The deleted of this CompanyBackup.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this CompanyBackup.


        :param deleted: The deleted of this CompanyBackup.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def contract_id(self):
        """Gets the contract_id of this CompanyBackup.  # noqa: E501


        :return: The contract_id of this CompanyBackup.  # noqa: E501
        :rtype: int
        """
        return self._contract_id

    @contract_id.setter
    def contract_id(self, contract_id):
        """Sets the contract_id of this CompanyBackup.


        :param contract_id: The contract_id of this CompanyBackup.  # noqa: E501
        :type: int
        """

        self._contract_id = contract_id

    @property
    def company_name(self):
        """Gets the company_name of this CompanyBackup.  # noqa: E501


        :return: The company_name of this CompanyBackup.  # noqa: E501
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this CompanyBackup.


        :param company_name: The company_name of this CompanyBackup.  # noqa: E501
        :type: str
        """

        self._company_name = company_name

    @property
    def contract_type(self):
        """Gets the contract_type of this CompanyBackup.  # noqa: E501


        :return: The contract_type of this CompanyBackup.  # noqa: E501
        :rtype: int
        """
        return self._contract_type

    @contract_type.setter
    def contract_type(self, contract_type):
        """Sets the contract_type of this CompanyBackup.


        :param contract_type: The contract_type of this CompanyBackup.  # noqa: E501
        :type: int
        """

        self._contract_type = contract_type

    @property
    def reason(self):
        """Gets the reason of this CompanyBackup.  # noqa: E501


        :return: The reason of this CompanyBackup.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this CompanyBackup.


        :param reason: The reason of this CompanyBackup.  # noqa: E501
        :type: str
        """

        self._reason = reason

    @property
    def cloud_blob_name(self):
        """Gets the cloud_blob_name of this CompanyBackup.  # noqa: E501


        :return: The cloud_blob_name of this CompanyBackup.  # noqa: E501
        :rtype: str
        """
        return self._cloud_blob_name

    @cloud_blob_name.setter
    def cloud_blob_name(self, cloud_blob_name):
        """Sets the cloud_blob_name of this CompanyBackup.


        :param cloud_blob_name: The cloud_blob_name of this CompanyBackup.  # noqa: E501
        :type: str
        """

        self._cloud_blob_name = cloud_blob_name

    @property
    def id(self):
        """Gets the id of this CompanyBackup.  # noqa: E501


        :return: The id of this CompanyBackup.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CompanyBackup.


        :param id: The id of this CompanyBackup.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def updated_by(self):
        """Gets the updated_by of this CompanyBackup.  # noqa: E501


        :return: The updated_by of this CompanyBackup.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this CompanyBackup.


        :param updated_by: The updated_by of this CompanyBackup.  # noqa: E501
        :type: str
        """

        self._updated_by = updated_by

    @property
    def created_by(self):
        """Gets the created_by of this CompanyBackup.  # noqa: E501


        :return: The created_by of this CompanyBackup.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this CompanyBackup.


        :param created_by: The created_by of this CompanyBackup.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def backup_status(self):
        """Gets the backup_status of this CompanyBackup.  # noqa: E501


        :return: The backup_status of this CompanyBackup.  # noqa: E501
        :rtype: str
        """
        return self._backup_status

    @backup_status.setter
    def backup_status(self, backup_status):
        """Sets the backup_status of this CompanyBackup.


        :param backup_status: The backup_status of this CompanyBackup.  # noqa: E501
        :type: str
        """

        self._backup_status = backup_status

    @property
    def custom_values(self):
        """Gets the custom_values of this CompanyBackup.  # noqa: E501


        :return: The custom_values of this CompanyBackup.  # noqa: E501
        :rtype: CustomValues
        """
        return self._custom_values

    @custom_values.setter
    def custom_values(self, custom_values):
        """Sets the custom_values of this CompanyBackup.


        :param custom_values: The custom_values of this CompanyBackup.  # noqa: E501
        :type: CustomValues
        """

        self._custom_values = custom_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CompanyBackup, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CompanyBackup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
