# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AltinnReceipt(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'altinn_response_data': 'str',
        'xml_receipt': 'str',
        'error_text': 'str',
        'status_code': 'int',
        'deleted': 'bool',
        'receipt_id': 'int',
        'id': 'int',
        'updated_by': 'str',
        'has_been_registered': 'bool',
        'created_by': 'str',
        'form': 'str',
        'user_sign': 'str',
        'signings': 'list[AltinnSigning]',
        'custom_values': 'CustomValues'
    }

    attribute_map = {
        'altinn_response_data': 'AltinnResponseData',
        'xml_receipt': 'XmlReceipt',
        'error_text': 'ErrorText',
        'status_code': 'StatusCode',
        'deleted': 'Deleted',
        'receipt_id': 'ReceiptID',
        'id': 'ID',
        'updated_by': 'UpdatedBy',
        'has_been_registered': 'HasBeenRegistered',
        'created_by': 'CreatedBy',
        'form': 'Form',
        'user_sign': 'UserSign',
        'signings': 'Signings',
        'custom_values': 'CustomValues'
    }

    def __init__(self, altinn_response_data=None, xml_receipt=None, error_text=None, status_code=None, deleted=None, receipt_id=None, id=None, updated_by=None, has_been_registered=None, created_by=None, form=None, user_sign=None, signings=None, custom_values=None):  # noqa: E501
        """AltinnReceipt - a model defined in Swagger"""  # noqa: E501
        self._altinn_response_data = None
        self._xml_receipt = None
        self._error_text = None
        self._status_code = None
        self._deleted = None
        self._receipt_id = None
        self._id = None
        self._updated_by = None
        self._has_been_registered = None
        self._created_by = None
        self._form = None
        self._user_sign = None
        self._signings = None
        self._custom_values = None
        self.discriminator = None
        if altinn_response_data is not None:
            self.altinn_response_data = altinn_response_data
        if xml_receipt is not None:
            self.xml_receipt = xml_receipt
        if error_text is not None:
            self.error_text = error_text
        if status_code is not None:
            self.status_code = status_code
        if deleted is not None:
            self.deleted = deleted
        if receipt_id is not None:
            self.receipt_id = receipt_id
        if id is not None:
            self.id = id
        if updated_by is not None:
            self.updated_by = updated_by
        if has_been_registered is not None:
            self.has_been_registered = has_been_registered
        if created_by is not None:
            self.created_by = created_by
        if form is not None:
            self.form = form
        if user_sign is not None:
            self.user_sign = user_sign
        if signings is not None:
            self.signings = signings
        if custom_values is not None:
            self.custom_values = custom_values

    @property
    def altinn_response_data(self):
        """Gets the altinn_response_data of this AltinnReceipt.  # noqa: E501


        :return: The altinn_response_data of this AltinnReceipt.  # noqa: E501
        :rtype: str
        """
        return self._altinn_response_data

    @altinn_response_data.setter
    def altinn_response_data(self, altinn_response_data):
        """Sets the altinn_response_data of this AltinnReceipt.


        :param altinn_response_data: The altinn_response_data of this AltinnReceipt.  # noqa: E501
        :type: str
        """

        self._altinn_response_data = altinn_response_data

    @property
    def xml_receipt(self):
        """Gets the xml_receipt of this AltinnReceipt.  # noqa: E501


        :return: The xml_receipt of this AltinnReceipt.  # noqa: E501
        :rtype: str
        """
        return self._xml_receipt

    @xml_receipt.setter
    def xml_receipt(self, xml_receipt):
        """Sets the xml_receipt of this AltinnReceipt.


        :param xml_receipt: The xml_receipt of this AltinnReceipt.  # noqa: E501
        :type: str
        """

        self._xml_receipt = xml_receipt

    @property
    def error_text(self):
        """Gets the error_text of this AltinnReceipt.  # noqa: E501


        :return: The error_text of this AltinnReceipt.  # noqa: E501
        :rtype: str
        """
        return self._error_text

    @error_text.setter
    def error_text(self, error_text):
        """Sets the error_text of this AltinnReceipt.


        :param error_text: The error_text of this AltinnReceipt.  # noqa: E501
        :type: str
        """

        self._error_text = error_text

    @property
    def status_code(self):
        """Gets the status_code of this AltinnReceipt.  # noqa: E501


        :return: The status_code of this AltinnReceipt.  # noqa: E501
        :rtype: int
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this AltinnReceipt.


        :param status_code: The status_code of this AltinnReceipt.  # noqa: E501
        :type: int
        """

        self._status_code = status_code

    @property
    def deleted(self):
        """Gets the deleted of this AltinnReceipt.  # noqa: E501


        :return: The deleted of this AltinnReceipt.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this AltinnReceipt.


        :param deleted: The deleted of this AltinnReceipt.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def receipt_id(self):
        """Gets the receipt_id of this AltinnReceipt.  # noqa: E501


        :return: The receipt_id of this AltinnReceipt.  # noqa: E501
        :rtype: int
        """
        return self._receipt_id

    @receipt_id.setter
    def receipt_id(self, receipt_id):
        """Sets the receipt_id of this AltinnReceipt.


        :param receipt_id: The receipt_id of this AltinnReceipt.  # noqa: E501
        :type: int
        """

        self._receipt_id = receipt_id

    @property
    def id(self):
        """Gets the id of this AltinnReceipt.  # noqa: E501


        :return: The id of this AltinnReceipt.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AltinnReceipt.


        :param id: The id of this AltinnReceipt.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def updated_by(self):
        """Gets the updated_by of this AltinnReceipt.  # noqa: E501


        :return: The updated_by of this AltinnReceipt.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this AltinnReceipt.


        :param updated_by: The updated_by of this AltinnReceipt.  # noqa: E501
        :type: str
        """

        self._updated_by = updated_by

    @property
    def has_been_registered(self):
        """Gets the has_been_registered of this AltinnReceipt.  # noqa: E501


        :return: The has_been_registered of this AltinnReceipt.  # noqa: E501
        :rtype: bool
        """
        return self._has_been_registered

    @has_been_registered.setter
    def has_been_registered(self, has_been_registered):
        """Sets the has_been_registered of this AltinnReceipt.


        :param has_been_registered: The has_been_registered of this AltinnReceipt.  # noqa: E501
        :type: bool
        """

        self._has_been_registered = has_been_registered

    @property
    def created_by(self):
        """Gets the created_by of this AltinnReceipt.  # noqa: E501


        :return: The created_by of this AltinnReceipt.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this AltinnReceipt.


        :param created_by: The created_by of this AltinnReceipt.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def form(self):
        """Gets the form of this AltinnReceipt.  # noqa: E501


        :return: The form of this AltinnReceipt.  # noqa: E501
        :rtype: str
        """
        return self._form

    @form.setter
    def form(self, form):
        """Sets the form of this AltinnReceipt.


        :param form: The form of this AltinnReceipt.  # noqa: E501
        :type: str
        """

        self._form = form

    @property
    def user_sign(self):
        """Gets the user_sign of this AltinnReceipt.  # noqa: E501


        :return: The user_sign of this AltinnReceipt.  # noqa: E501
        :rtype: str
        """
        return self._user_sign

    @user_sign.setter
    def user_sign(self, user_sign):
        """Sets the user_sign of this AltinnReceipt.


        :param user_sign: The user_sign of this AltinnReceipt.  # noqa: E501
        :type: str
        """

        self._user_sign = user_sign

    @property
    def signings(self):
        """Gets the signings of this AltinnReceipt.  # noqa: E501


        :return: The signings of this AltinnReceipt.  # noqa: E501
        :rtype: list[AltinnSigning]
        """
        return self._signings

    @signings.setter
    def signings(self, signings):
        """Sets the signings of this AltinnReceipt.


        :param signings: The signings of this AltinnReceipt.  # noqa: E501
        :type: list[AltinnSigning]
        """

        self._signings = signings

    @property
    def custom_values(self):
        """Gets the custom_values of this AltinnReceipt.  # noqa: E501


        :return: The custom_values of this AltinnReceipt.  # noqa: E501
        :rtype: CustomValues
        """
        return self._custom_values

    @custom_values.setter
    def custom_values(self, custom_values):
        """Sets the custom_values of this AltinnReceipt.


        :param custom_values: The custom_values of this AltinnReceipt.  # noqa: E501
        :type: CustomValues
        """

        self._custom_values = custom_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AltinnReceipt, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AltinnReceipt):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
