# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EHFCustomer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'contactemail': 'str',
        'orgno': 'str',
        'orgname': 'str',
        'contactname': 'str',
        'contactphone': 'str',
        'custom_values': 'CustomValues'
    }

    attribute_map = {
        'contactemail': 'contactemail',
        'orgno': 'orgno',
        'orgname': 'orgname',
        'contactname': 'contactname',
        'contactphone': 'contactphone',
        'custom_values': 'CustomValues'
    }

    def __init__(self, contactemail=None, orgno=None, orgname=None, contactname=None, contactphone=None, custom_values=None):  # noqa: E501
        """EHFCustomer - a model defined in Swagger"""  # noqa: E501
        self._contactemail = None
        self._orgno = None
        self._orgname = None
        self._contactname = None
        self._contactphone = None
        self._custom_values = None
        self.discriminator = None
        if contactemail is not None:
            self.contactemail = contactemail
        if orgno is not None:
            self.orgno = orgno
        if orgname is not None:
            self.orgname = orgname
        if contactname is not None:
            self.contactname = contactname
        if contactphone is not None:
            self.contactphone = contactphone
        if custom_values is not None:
            self.custom_values = custom_values

    @property
    def contactemail(self):
        """Gets the contactemail of this EHFCustomer.  # noqa: E501


        :return: The contactemail of this EHFCustomer.  # noqa: E501
        :rtype: str
        """
        return self._contactemail

    @contactemail.setter
    def contactemail(self, contactemail):
        """Sets the contactemail of this EHFCustomer.


        :param contactemail: The contactemail of this EHFCustomer.  # noqa: E501
        :type: str
        """

        self._contactemail = contactemail

    @property
    def orgno(self):
        """Gets the orgno of this EHFCustomer.  # noqa: E501


        :return: The orgno of this EHFCustomer.  # noqa: E501
        :rtype: str
        """
        return self._orgno

    @orgno.setter
    def orgno(self, orgno):
        """Sets the orgno of this EHFCustomer.


        :param orgno: The orgno of this EHFCustomer.  # noqa: E501
        :type: str
        """

        self._orgno = orgno

    @property
    def orgname(self):
        """Gets the orgname of this EHFCustomer.  # noqa: E501


        :return: The orgname of this EHFCustomer.  # noqa: E501
        :rtype: str
        """
        return self._orgname

    @orgname.setter
    def orgname(self, orgname):
        """Sets the orgname of this EHFCustomer.


        :param orgname: The orgname of this EHFCustomer.  # noqa: E501
        :type: str
        """

        self._orgname = orgname

    @property
    def contactname(self):
        """Gets the contactname of this EHFCustomer.  # noqa: E501


        :return: The contactname of this EHFCustomer.  # noqa: E501
        :rtype: str
        """
        return self._contactname

    @contactname.setter
    def contactname(self, contactname):
        """Sets the contactname of this EHFCustomer.


        :param contactname: The contactname of this EHFCustomer.  # noqa: E501
        :type: str
        """

        self._contactname = contactname

    @property
    def contactphone(self):
        """Gets the contactphone of this EHFCustomer.  # noqa: E501


        :return: The contactphone of this EHFCustomer.  # noqa: E501
        :rtype: str
        """
        return self._contactphone

    @contactphone.setter
    def contactphone(self, contactphone):
        """Sets the contactphone of this EHFCustomer.


        :param contactphone: The contactphone of this EHFCustomer.  # noqa: E501
        :type: str
        """

        self._contactphone = contactphone

    @property
    def custom_values(self):
        """Gets the custom_values of this EHFCustomer.  # noqa: E501


        :return: The custom_values of this EHFCustomer.  # noqa: E501
        :rtype: CustomValues
        """
        return self._custom_values

    @custom_values.setter
    def custom_values(self, custom_values):
        """Sets the custom_values of this EHFCustomer.


        :param custom_values: The custom_values of this EHFCustomer.  # noqa: E501
        :type: CustomValues
        """

        self._custom_values = custom_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EHFCustomer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EHFCustomer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
