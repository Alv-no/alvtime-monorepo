# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CustomerInvoiceReminderRule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'use_maximum_legal_reminder_fee': 'bool',
        'title': 'str',
        'status_code': 'int',
        'deleted': 'bool',
        'minimum_days_from_due_date': 'int',
        'id': 'int',
        'reminder_number': 'int',
        'updated_by': 'str',
        'created_by': 'str',
        'credit_days': 'int',
        'customer_invoice_reminder_settings_id': 'int',
        'custom_values': 'CustomValues'
    }

    attribute_map = {
        'description': 'Description',
        'use_maximum_legal_reminder_fee': 'UseMaximumLegalReminderFee',
        'title': 'Title',
        'status_code': 'StatusCode',
        'deleted': 'Deleted',
        'minimum_days_from_due_date': 'MinimumDaysFromDueDate',
        'id': 'ID',
        'reminder_number': 'ReminderNumber',
        'updated_by': 'UpdatedBy',
        'created_by': 'CreatedBy',
        'credit_days': 'CreditDays',
        'customer_invoice_reminder_settings_id': 'CustomerInvoiceReminderSettingsID',
        'custom_values': 'CustomValues'
    }

    def __init__(self, description=None, use_maximum_legal_reminder_fee=None, title=None, status_code=None, deleted=None, minimum_days_from_due_date=None, id=None, reminder_number=None, updated_by=None, created_by=None, credit_days=None, customer_invoice_reminder_settings_id=None, custom_values=None):  # noqa: E501
        """CustomerInvoiceReminderRule - a model defined in Swagger"""  # noqa: E501
        self._description = None
        self._use_maximum_legal_reminder_fee = None
        self._title = None
        self._status_code = None
        self._deleted = None
        self._minimum_days_from_due_date = None
        self._id = None
        self._reminder_number = None
        self._updated_by = None
        self._created_by = None
        self._credit_days = None
        self._customer_invoice_reminder_settings_id = None
        self._custom_values = None
        self.discriminator = None
        if description is not None:
            self.description = description
        if use_maximum_legal_reminder_fee is not None:
            self.use_maximum_legal_reminder_fee = use_maximum_legal_reminder_fee
        if title is not None:
            self.title = title
        if status_code is not None:
            self.status_code = status_code
        if deleted is not None:
            self.deleted = deleted
        if minimum_days_from_due_date is not None:
            self.minimum_days_from_due_date = minimum_days_from_due_date
        if id is not None:
            self.id = id
        if reminder_number is not None:
            self.reminder_number = reminder_number
        if updated_by is not None:
            self.updated_by = updated_by
        if created_by is not None:
            self.created_by = created_by
        if credit_days is not None:
            self.credit_days = credit_days
        if customer_invoice_reminder_settings_id is not None:
            self.customer_invoice_reminder_settings_id = customer_invoice_reminder_settings_id
        if custom_values is not None:
            self.custom_values = custom_values

    @property
    def description(self):
        """Gets the description of this CustomerInvoiceReminderRule.  # noqa: E501


        :return: The description of this CustomerInvoiceReminderRule.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CustomerInvoiceReminderRule.


        :param description: The description of this CustomerInvoiceReminderRule.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def use_maximum_legal_reminder_fee(self):
        """Gets the use_maximum_legal_reminder_fee of this CustomerInvoiceReminderRule.  # noqa: E501


        :return: The use_maximum_legal_reminder_fee of this CustomerInvoiceReminderRule.  # noqa: E501
        :rtype: bool
        """
        return self._use_maximum_legal_reminder_fee

    @use_maximum_legal_reminder_fee.setter
    def use_maximum_legal_reminder_fee(self, use_maximum_legal_reminder_fee):
        """Sets the use_maximum_legal_reminder_fee of this CustomerInvoiceReminderRule.


        :param use_maximum_legal_reminder_fee: The use_maximum_legal_reminder_fee of this CustomerInvoiceReminderRule.  # noqa: E501
        :type: bool
        """

        self._use_maximum_legal_reminder_fee = use_maximum_legal_reminder_fee

    @property
    def title(self):
        """Gets the title of this CustomerInvoiceReminderRule.  # noqa: E501


        :return: The title of this CustomerInvoiceReminderRule.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this CustomerInvoiceReminderRule.


        :param title: The title of this CustomerInvoiceReminderRule.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def status_code(self):
        """Gets the status_code of this CustomerInvoiceReminderRule.  # noqa: E501


        :return: The status_code of this CustomerInvoiceReminderRule.  # noqa: E501
        :rtype: int
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this CustomerInvoiceReminderRule.


        :param status_code: The status_code of this CustomerInvoiceReminderRule.  # noqa: E501
        :type: int
        """

        self._status_code = status_code

    @property
    def deleted(self):
        """Gets the deleted of this CustomerInvoiceReminderRule.  # noqa: E501


        :return: The deleted of this CustomerInvoiceReminderRule.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this CustomerInvoiceReminderRule.


        :param deleted: The deleted of this CustomerInvoiceReminderRule.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def minimum_days_from_due_date(self):
        """Gets the minimum_days_from_due_date of this CustomerInvoiceReminderRule.  # noqa: E501


        :return: The minimum_days_from_due_date of this CustomerInvoiceReminderRule.  # noqa: E501
        :rtype: int
        """
        return self._minimum_days_from_due_date

    @minimum_days_from_due_date.setter
    def minimum_days_from_due_date(self, minimum_days_from_due_date):
        """Sets the minimum_days_from_due_date of this CustomerInvoiceReminderRule.


        :param minimum_days_from_due_date: The minimum_days_from_due_date of this CustomerInvoiceReminderRule.  # noqa: E501
        :type: int
        """

        self._minimum_days_from_due_date = minimum_days_from_due_date

    @property
    def id(self):
        """Gets the id of this CustomerInvoiceReminderRule.  # noqa: E501


        :return: The id of this CustomerInvoiceReminderRule.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CustomerInvoiceReminderRule.


        :param id: The id of this CustomerInvoiceReminderRule.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def reminder_number(self):
        """Gets the reminder_number of this CustomerInvoiceReminderRule.  # noqa: E501


        :return: The reminder_number of this CustomerInvoiceReminderRule.  # noqa: E501
        :rtype: int
        """
        return self._reminder_number

    @reminder_number.setter
    def reminder_number(self, reminder_number):
        """Sets the reminder_number of this CustomerInvoiceReminderRule.


        :param reminder_number: The reminder_number of this CustomerInvoiceReminderRule.  # noqa: E501
        :type: int
        """

        self._reminder_number = reminder_number

    @property
    def updated_by(self):
        """Gets the updated_by of this CustomerInvoiceReminderRule.  # noqa: E501


        :return: The updated_by of this CustomerInvoiceReminderRule.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this CustomerInvoiceReminderRule.


        :param updated_by: The updated_by of this CustomerInvoiceReminderRule.  # noqa: E501
        :type: str
        """

        self._updated_by = updated_by

    @property
    def created_by(self):
        """Gets the created_by of this CustomerInvoiceReminderRule.  # noqa: E501


        :return: The created_by of this CustomerInvoiceReminderRule.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this CustomerInvoiceReminderRule.


        :param created_by: The created_by of this CustomerInvoiceReminderRule.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def credit_days(self):
        """Gets the credit_days of this CustomerInvoiceReminderRule.  # noqa: E501


        :return: The credit_days of this CustomerInvoiceReminderRule.  # noqa: E501
        :rtype: int
        """
        return self._credit_days

    @credit_days.setter
    def credit_days(self, credit_days):
        """Sets the credit_days of this CustomerInvoiceReminderRule.


        :param credit_days: The credit_days of this CustomerInvoiceReminderRule.  # noqa: E501
        :type: int
        """

        self._credit_days = credit_days

    @property
    def customer_invoice_reminder_settings_id(self):
        """Gets the customer_invoice_reminder_settings_id of this CustomerInvoiceReminderRule.  # noqa: E501


        :return: The customer_invoice_reminder_settings_id of this CustomerInvoiceReminderRule.  # noqa: E501
        :rtype: int
        """
        return self._customer_invoice_reminder_settings_id

    @customer_invoice_reminder_settings_id.setter
    def customer_invoice_reminder_settings_id(self, customer_invoice_reminder_settings_id):
        """Sets the customer_invoice_reminder_settings_id of this CustomerInvoiceReminderRule.


        :param customer_invoice_reminder_settings_id: The customer_invoice_reminder_settings_id of this CustomerInvoiceReminderRule.  # noqa: E501
        :type: int
        """

        self._customer_invoice_reminder_settings_id = customer_invoice_reminder_settings_id

    @property
    def custom_values(self):
        """Gets the custom_values of this CustomerInvoiceReminderRule.  # noqa: E501


        :return: The custom_values of this CustomerInvoiceReminderRule.  # noqa: E501
        :rtype: CustomValues
        """
        return self._custom_values

    @custom_values.setter
    def custom_values(self, custom_values):
        """Sets the custom_values of this CustomerInvoiceReminderRule.


        :param custom_values: The custom_values of this CustomerInvoiceReminderRule.  # noqa: E501
        :type: CustomValues
        """

        self._custom_values = custom_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomerInvoiceReminderRule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomerInvoiceReminderRule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
