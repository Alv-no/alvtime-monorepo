# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MemberDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'total_balance': 'int',
        'name': 'str',
        'minutes_worked': 'int',
        'report_balance': 'int',
        'expected_minutes': 'int',
        'work_relation': 'WorkRelation',
        'time_off': 'list[FlexDetail]',
        'missing_days': 'list[FlexDetail]',
        'custom_values': 'CustomValues'
    }

    attribute_map = {
        'total_balance': 'TotalBalance',
        'name': 'Name',
        'minutes_worked': 'MinutesWorked',
        'report_balance': 'ReportBalance',
        'expected_minutes': 'ExpectedMinutes',
        'work_relation': 'WorkRelation',
        'time_off': 'TimeOff',
        'missing_days': 'MissingDays',
        'custom_values': 'CustomValues'
    }

    def __init__(self, total_balance=None, name=None, minutes_worked=None, report_balance=None, expected_minutes=None, work_relation=None, time_off=None, missing_days=None, custom_values=None):  # noqa: E501
        """MemberDetails - a model defined in Swagger"""  # noqa: E501
        self._total_balance = None
        self._name = None
        self._minutes_worked = None
        self._report_balance = None
        self._expected_minutes = None
        self._work_relation = None
        self._time_off = None
        self._missing_days = None
        self._custom_values = None
        self.discriminator = None
        if total_balance is not None:
            self.total_balance = total_balance
        if name is not None:
            self.name = name
        if minutes_worked is not None:
            self.minutes_worked = minutes_worked
        if report_balance is not None:
            self.report_balance = report_balance
        if expected_minutes is not None:
            self.expected_minutes = expected_minutes
        if work_relation is not None:
            self.work_relation = work_relation
        if time_off is not None:
            self.time_off = time_off
        if missing_days is not None:
            self.missing_days = missing_days
        if custom_values is not None:
            self.custom_values = custom_values

    @property
    def total_balance(self):
        """Gets the total_balance of this MemberDetails.  # noqa: E501


        :return: The total_balance of this MemberDetails.  # noqa: E501
        :rtype: int
        """
        return self._total_balance

    @total_balance.setter
    def total_balance(self, total_balance):
        """Sets the total_balance of this MemberDetails.


        :param total_balance: The total_balance of this MemberDetails.  # noqa: E501
        :type: int
        """

        self._total_balance = total_balance

    @property
    def name(self):
        """Gets the name of this MemberDetails.  # noqa: E501


        :return: The name of this MemberDetails.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MemberDetails.


        :param name: The name of this MemberDetails.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def minutes_worked(self):
        """Gets the minutes_worked of this MemberDetails.  # noqa: E501


        :return: The minutes_worked of this MemberDetails.  # noqa: E501
        :rtype: int
        """
        return self._minutes_worked

    @minutes_worked.setter
    def minutes_worked(self, minutes_worked):
        """Sets the minutes_worked of this MemberDetails.


        :param minutes_worked: The minutes_worked of this MemberDetails.  # noqa: E501
        :type: int
        """

        self._minutes_worked = minutes_worked

    @property
    def report_balance(self):
        """Gets the report_balance of this MemberDetails.  # noqa: E501


        :return: The report_balance of this MemberDetails.  # noqa: E501
        :rtype: int
        """
        return self._report_balance

    @report_balance.setter
    def report_balance(self, report_balance):
        """Sets the report_balance of this MemberDetails.


        :param report_balance: The report_balance of this MemberDetails.  # noqa: E501
        :type: int
        """

        self._report_balance = report_balance

    @property
    def expected_minutes(self):
        """Gets the expected_minutes of this MemberDetails.  # noqa: E501


        :return: The expected_minutes of this MemberDetails.  # noqa: E501
        :rtype: int
        """
        return self._expected_minutes

    @expected_minutes.setter
    def expected_minutes(self, expected_minutes):
        """Sets the expected_minutes of this MemberDetails.


        :param expected_minutes: The expected_minutes of this MemberDetails.  # noqa: E501
        :type: int
        """

        self._expected_minutes = expected_minutes

    @property
    def work_relation(self):
        """Gets the work_relation of this MemberDetails.  # noqa: E501


        :return: The work_relation of this MemberDetails.  # noqa: E501
        :rtype: WorkRelation
        """
        return self._work_relation

    @work_relation.setter
    def work_relation(self, work_relation):
        """Sets the work_relation of this MemberDetails.


        :param work_relation: The work_relation of this MemberDetails.  # noqa: E501
        :type: WorkRelation
        """

        self._work_relation = work_relation

    @property
    def time_off(self):
        """Gets the time_off of this MemberDetails.  # noqa: E501


        :return: The time_off of this MemberDetails.  # noqa: E501
        :rtype: list[FlexDetail]
        """
        return self._time_off

    @time_off.setter
    def time_off(self, time_off):
        """Sets the time_off of this MemberDetails.


        :param time_off: The time_off of this MemberDetails.  # noqa: E501
        :type: list[FlexDetail]
        """

        self._time_off = time_off

    @property
    def missing_days(self):
        """Gets the missing_days of this MemberDetails.  # noqa: E501


        :return: The missing_days of this MemberDetails.  # noqa: E501
        :rtype: list[FlexDetail]
        """
        return self._missing_days

    @missing_days.setter
    def missing_days(self, missing_days):
        """Sets the missing_days of this MemberDetails.


        :param missing_days: The missing_days of this MemberDetails.  # noqa: E501
        :type: list[FlexDetail]
        """

        self._missing_days = missing_days

    @property
    def custom_values(self):
        """Gets the custom_values of this MemberDetails.  # noqa: E501


        :return: The custom_values of this MemberDetails.  # noqa: E501
        :rtype: CustomValues
        """
        return self._custom_values

    @custom_values.setter
    def custom_values(self, custom_values):
        """Sets the custom_values of this MemberDetails.


        :param custom_values: The custom_values of this MemberDetails.  # noqa: E501
        :type: CustomValues
        """

        self._custom_values = custom_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MemberDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MemberDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
