# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SalaryTransaction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'wage_type_id': 'int',
        'taxbasis_id': 'int',
        'salary_balance_id': 'int',
        'dimensions_id': 'int',
        'municipality_no': 'str',
        'status_code': 'int',
        'deleted': 'bool',
        'holiday_pay_deduction': 'bool',
        'child_salary_transaction_id': 'int',
        'employee_number': 'int',
        'id': 'int',
        'vat_type_id': 'int',
        'updated_by': 'str',
        'employment_id': 'int',
        'text': 'str',
        'recurring_id': 'int',
        'created_by': 'str',
        'wage_type_number': 'int',
        'employee_id': 'int',
        'is_recurring_post': 'bool',
        'system_type': 'str',
        'account': 'int',
        'payroll_run_id': 'int',
        'payrollrun': 'PayrollRun',
        'employee': 'Employee',
        'employment': 'Employment',
        'dimensions': 'Dimensions',
        'supplements': 'list[SalaryTransactionSupplement]',
        'taxbasis': 'TaxBasis',
        'vat_type': 'VatType',
        'custom_values': 'CustomValues'
    }

    attribute_map = {
        'wage_type_id': 'WageTypeID',
        'taxbasis_id': 'TaxbasisID',
        'salary_balance_id': 'SalaryBalanceID',
        'dimensions_id': 'DimensionsID',
        'municipality_no': 'MunicipalityNo',
        'status_code': 'StatusCode',
        'deleted': 'Deleted',
        'holiday_pay_deduction': 'HolidayPayDeduction',
        'child_salary_transaction_id': 'ChildSalaryTransactionID',
        'employee_number': 'EmployeeNumber',
        'id': 'ID',
        'vat_type_id': 'VatTypeID',
        'updated_by': 'UpdatedBy',
        'employment_id': 'EmploymentID',
        'text': 'Text',
        'recurring_id': 'RecurringID',
        'created_by': 'CreatedBy',
        'wage_type_number': 'WageTypeNumber',
        'employee_id': 'EmployeeID',
        'is_recurring_post': 'IsRecurringPost',
        'system_type': 'SystemType',
        'account': 'Account',
        'payroll_run_id': 'PayrollRunID',
        'payrollrun': 'payrollrun',
        'employee': 'Employee',
        'employment': 'employment',
        'dimensions': 'Dimensions',
        'supplements': 'Supplements',
        'taxbasis': 'Taxbasis',
        'vat_type': 'VatType',
        'custom_values': 'CustomValues'
    }

    def __init__(self, wage_type_id=None, taxbasis_id=None, salary_balance_id=None, dimensions_id=None, municipality_no=None, status_code=None, deleted=None, holiday_pay_deduction=None, child_salary_transaction_id=None, employee_number=None, id=None, vat_type_id=None, updated_by=None, employment_id=None, text=None, recurring_id=None, created_by=None, wage_type_number=None, employee_id=None, is_recurring_post=None, system_type=None, account=None, payroll_run_id=None, payrollrun=None, employee=None, employment=None, dimensions=None, supplements=None, taxbasis=None, vat_type=None, custom_values=None):  # noqa: E501
        """SalaryTransaction - a model defined in Swagger"""  # noqa: E501
        self._wage_type_id = None
        self._taxbasis_id = None
        self._salary_balance_id = None
        self._dimensions_id = None
        self._municipality_no = None
        self._status_code = None
        self._deleted = None
        self._holiday_pay_deduction = None
        self._child_salary_transaction_id = None
        self._employee_number = None
        self._id = None
        self._vat_type_id = None
        self._updated_by = None
        self._employment_id = None
        self._text = None
        self._recurring_id = None
        self._created_by = None
        self._wage_type_number = None
        self._employee_id = None
        self._is_recurring_post = None
        self._system_type = None
        self._account = None
        self._payroll_run_id = None
        self._payrollrun = None
        self._employee = None
        self._employment = None
        self._dimensions = None
        self._supplements = None
        self._taxbasis = None
        self._vat_type = None
        self._custom_values = None
        self.discriminator = None
        if wage_type_id is not None:
            self.wage_type_id = wage_type_id
        if taxbasis_id is not None:
            self.taxbasis_id = taxbasis_id
        if salary_balance_id is not None:
            self.salary_balance_id = salary_balance_id
        if dimensions_id is not None:
            self.dimensions_id = dimensions_id
        if municipality_no is not None:
            self.municipality_no = municipality_no
        if status_code is not None:
            self.status_code = status_code
        if deleted is not None:
            self.deleted = deleted
        if holiday_pay_deduction is not None:
            self.holiday_pay_deduction = holiday_pay_deduction
        if child_salary_transaction_id is not None:
            self.child_salary_transaction_id = child_salary_transaction_id
        if employee_number is not None:
            self.employee_number = employee_number
        if id is not None:
            self.id = id
        if vat_type_id is not None:
            self.vat_type_id = vat_type_id
        if updated_by is not None:
            self.updated_by = updated_by
        if employment_id is not None:
            self.employment_id = employment_id
        if text is not None:
            self.text = text
        if recurring_id is not None:
            self.recurring_id = recurring_id
        if created_by is not None:
            self.created_by = created_by
        if wage_type_number is not None:
            self.wage_type_number = wage_type_number
        if employee_id is not None:
            self.employee_id = employee_id
        if is_recurring_post is not None:
            self.is_recurring_post = is_recurring_post
        if system_type is not None:
            self.system_type = system_type
        if account is not None:
            self.account = account
        if payroll_run_id is not None:
            self.payroll_run_id = payroll_run_id
        if payrollrun is not None:
            self.payrollrun = payrollrun
        if employee is not None:
            self.employee = employee
        if employment is not None:
            self.employment = employment
        if dimensions is not None:
            self.dimensions = dimensions
        if supplements is not None:
            self.supplements = supplements
        if taxbasis is not None:
            self.taxbasis = taxbasis
        if vat_type is not None:
            self.vat_type = vat_type
        if custom_values is not None:
            self.custom_values = custom_values

    @property
    def wage_type_id(self):
        """Gets the wage_type_id of this SalaryTransaction.  # noqa: E501


        :return: The wage_type_id of this SalaryTransaction.  # noqa: E501
        :rtype: int
        """
        return self._wage_type_id

    @wage_type_id.setter
    def wage_type_id(self, wage_type_id):
        """Sets the wage_type_id of this SalaryTransaction.


        :param wage_type_id: The wage_type_id of this SalaryTransaction.  # noqa: E501
        :type: int
        """

        self._wage_type_id = wage_type_id

    @property
    def taxbasis_id(self):
        """Gets the taxbasis_id of this SalaryTransaction.  # noqa: E501


        :return: The taxbasis_id of this SalaryTransaction.  # noqa: E501
        :rtype: int
        """
        return self._taxbasis_id

    @taxbasis_id.setter
    def taxbasis_id(self, taxbasis_id):
        """Sets the taxbasis_id of this SalaryTransaction.


        :param taxbasis_id: The taxbasis_id of this SalaryTransaction.  # noqa: E501
        :type: int
        """

        self._taxbasis_id = taxbasis_id

    @property
    def salary_balance_id(self):
        """Gets the salary_balance_id of this SalaryTransaction.  # noqa: E501


        :return: The salary_balance_id of this SalaryTransaction.  # noqa: E501
        :rtype: int
        """
        return self._salary_balance_id

    @salary_balance_id.setter
    def salary_balance_id(self, salary_balance_id):
        """Sets the salary_balance_id of this SalaryTransaction.


        :param salary_balance_id: The salary_balance_id of this SalaryTransaction.  # noqa: E501
        :type: int
        """

        self._salary_balance_id = salary_balance_id

    @property
    def dimensions_id(self):
        """Gets the dimensions_id of this SalaryTransaction.  # noqa: E501


        :return: The dimensions_id of this SalaryTransaction.  # noqa: E501
        :rtype: int
        """
        return self._dimensions_id

    @dimensions_id.setter
    def dimensions_id(self, dimensions_id):
        """Sets the dimensions_id of this SalaryTransaction.


        :param dimensions_id: The dimensions_id of this SalaryTransaction.  # noqa: E501
        :type: int
        """

        self._dimensions_id = dimensions_id

    @property
    def municipality_no(self):
        """Gets the municipality_no of this SalaryTransaction.  # noqa: E501


        :return: The municipality_no of this SalaryTransaction.  # noqa: E501
        :rtype: str
        """
        return self._municipality_no

    @municipality_no.setter
    def municipality_no(self, municipality_no):
        """Sets the municipality_no of this SalaryTransaction.


        :param municipality_no: The municipality_no of this SalaryTransaction.  # noqa: E501
        :type: str
        """

        self._municipality_no = municipality_no

    @property
    def status_code(self):
        """Gets the status_code of this SalaryTransaction.  # noqa: E501


        :return: The status_code of this SalaryTransaction.  # noqa: E501
        :rtype: int
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this SalaryTransaction.


        :param status_code: The status_code of this SalaryTransaction.  # noqa: E501
        :type: int
        """

        self._status_code = status_code

    @property
    def deleted(self):
        """Gets the deleted of this SalaryTransaction.  # noqa: E501


        :return: The deleted of this SalaryTransaction.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this SalaryTransaction.


        :param deleted: The deleted of this SalaryTransaction.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def holiday_pay_deduction(self):
        """Gets the holiday_pay_deduction of this SalaryTransaction.  # noqa: E501


        :return: The holiday_pay_deduction of this SalaryTransaction.  # noqa: E501
        :rtype: bool
        """
        return self._holiday_pay_deduction

    @holiday_pay_deduction.setter
    def holiday_pay_deduction(self, holiday_pay_deduction):
        """Sets the holiday_pay_deduction of this SalaryTransaction.


        :param holiday_pay_deduction: The holiday_pay_deduction of this SalaryTransaction.  # noqa: E501
        :type: bool
        """

        self._holiday_pay_deduction = holiday_pay_deduction

    @property
    def child_salary_transaction_id(self):
        """Gets the child_salary_transaction_id of this SalaryTransaction.  # noqa: E501


        :return: The child_salary_transaction_id of this SalaryTransaction.  # noqa: E501
        :rtype: int
        """
        return self._child_salary_transaction_id

    @child_salary_transaction_id.setter
    def child_salary_transaction_id(self, child_salary_transaction_id):
        """Sets the child_salary_transaction_id of this SalaryTransaction.


        :param child_salary_transaction_id: The child_salary_transaction_id of this SalaryTransaction.  # noqa: E501
        :type: int
        """

        self._child_salary_transaction_id = child_salary_transaction_id

    @property
    def employee_number(self):
        """Gets the employee_number of this SalaryTransaction.  # noqa: E501


        :return: The employee_number of this SalaryTransaction.  # noqa: E501
        :rtype: int
        """
        return self._employee_number

    @employee_number.setter
    def employee_number(self, employee_number):
        """Sets the employee_number of this SalaryTransaction.


        :param employee_number: The employee_number of this SalaryTransaction.  # noqa: E501
        :type: int
        """

        self._employee_number = employee_number

    @property
    def id(self):
        """Gets the id of this SalaryTransaction.  # noqa: E501


        :return: The id of this SalaryTransaction.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SalaryTransaction.


        :param id: The id of this SalaryTransaction.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def vat_type_id(self):
        """Gets the vat_type_id of this SalaryTransaction.  # noqa: E501


        :return: The vat_type_id of this SalaryTransaction.  # noqa: E501
        :rtype: int
        """
        return self._vat_type_id

    @vat_type_id.setter
    def vat_type_id(self, vat_type_id):
        """Sets the vat_type_id of this SalaryTransaction.


        :param vat_type_id: The vat_type_id of this SalaryTransaction.  # noqa: E501
        :type: int
        """

        self._vat_type_id = vat_type_id

    @property
    def updated_by(self):
        """Gets the updated_by of this SalaryTransaction.  # noqa: E501


        :return: The updated_by of this SalaryTransaction.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this SalaryTransaction.


        :param updated_by: The updated_by of this SalaryTransaction.  # noqa: E501
        :type: str
        """

        self._updated_by = updated_by

    @property
    def employment_id(self):
        """Gets the employment_id of this SalaryTransaction.  # noqa: E501


        :return: The employment_id of this SalaryTransaction.  # noqa: E501
        :rtype: int
        """
        return self._employment_id

    @employment_id.setter
    def employment_id(self, employment_id):
        """Sets the employment_id of this SalaryTransaction.


        :param employment_id: The employment_id of this SalaryTransaction.  # noqa: E501
        :type: int
        """

        self._employment_id = employment_id

    @property
    def text(self):
        """Gets the text of this SalaryTransaction.  # noqa: E501


        :return: The text of this SalaryTransaction.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this SalaryTransaction.


        :param text: The text of this SalaryTransaction.  # noqa: E501
        :type: str
        """

        self._text = text

    @property
    def recurring_id(self):
        """Gets the recurring_id of this SalaryTransaction.  # noqa: E501


        :return: The recurring_id of this SalaryTransaction.  # noqa: E501
        :rtype: int
        """
        return self._recurring_id

    @recurring_id.setter
    def recurring_id(self, recurring_id):
        """Sets the recurring_id of this SalaryTransaction.


        :param recurring_id: The recurring_id of this SalaryTransaction.  # noqa: E501
        :type: int
        """

        self._recurring_id = recurring_id

    @property
    def created_by(self):
        """Gets the created_by of this SalaryTransaction.  # noqa: E501


        :return: The created_by of this SalaryTransaction.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this SalaryTransaction.


        :param created_by: The created_by of this SalaryTransaction.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def wage_type_number(self):
        """Gets the wage_type_number of this SalaryTransaction.  # noqa: E501


        :return: The wage_type_number of this SalaryTransaction.  # noqa: E501
        :rtype: int
        """
        return self._wage_type_number

    @wage_type_number.setter
    def wage_type_number(self, wage_type_number):
        """Sets the wage_type_number of this SalaryTransaction.


        :param wage_type_number: The wage_type_number of this SalaryTransaction.  # noqa: E501
        :type: int
        """

        self._wage_type_number = wage_type_number

    @property
    def employee_id(self):
        """Gets the employee_id of this SalaryTransaction.  # noqa: E501


        :return: The employee_id of this SalaryTransaction.  # noqa: E501
        :rtype: int
        """
        return self._employee_id

    @employee_id.setter
    def employee_id(self, employee_id):
        """Sets the employee_id of this SalaryTransaction.


        :param employee_id: The employee_id of this SalaryTransaction.  # noqa: E501
        :type: int
        """

        self._employee_id = employee_id

    @property
    def is_recurring_post(self):
        """Gets the is_recurring_post of this SalaryTransaction.  # noqa: E501


        :return: The is_recurring_post of this SalaryTransaction.  # noqa: E501
        :rtype: bool
        """
        return self._is_recurring_post

    @is_recurring_post.setter
    def is_recurring_post(self, is_recurring_post):
        """Sets the is_recurring_post of this SalaryTransaction.


        :param is_recurring_post: The is_recurring_post of this SalaryTransaction.  # noqa: E501
        :type: bool
        """

        self._is_recurring_post = is_recurring_post

    @property
    def system_type(self):
        """Gets the system_type of this SalaryTransaction.  # noqa: E501


        :return: The system_type of this SalaryTransaction.  # noqa: E501
        :rtype: str
        """
        return self._system_type

    @system_type.setter
    def system_type(self, system_type):
        """Sets the system_type of this SalaryTransaction.


        :param system_type: The system_type of this SalaryTransaction.  # noqa: E501
        :type: str
        """

        self._system_type = system_type

    @property
    def account(self):
        """Gets the account of this SalaryTransaction.  # noqa: E501


        :return: The account of this SalaryTransaction.  # noqa: E501
        :rtype: int
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this SalaryTransaction.


        :param account: The account of this SalaryTransaction.  # noqa: E501
        :type: int
        """

        self._account = account

    @property
    def payroll_run_id(self):
        """Gets the payroll_run_id of this SalaryTransaction.  # noqa: E501


        :return: The payroll_run_id of this SalaryTransaction.  # noqa: E501
        :rtype: int
        """
        return self._payroll_run_id

    @payroll_run_id.setter
    def payroll_run_id(self, payroll_run_id):
        """Sets the payroll_run_id of this SalaryTransaction.


        :param payroll_run_id: The payroll_run_id of this SalaryTransaction.  # noqa: E501
        :type: int
        """

        self._payroll_run_id = payroll_run_id

    @property
    def payrollrun(self):
        """Gets the payrollrun of this SalaryTransaction.  # noqa: E501


        :return: The payrollrun of this SalaryTransaction.  # noqa: E501
        :rtype: PayrollRun
        """
        return self._payrollrun

    @payrollrun.setter
    def payrollrun(self, payrollrun):
        """Sets the payrollrun of this SalaryTransaction.


        :param payrollrun: The payrollrun of this SalaryTransaction.  # noqa: E501
        :type: PayrollRun
        """

        self._payrollrun = payrollrun

    @property
    def employee(self):
        """Gets the employee of this SalaryTransaction.  # noqa: E501


        :return: The employee of this SalaryTransaction.  # noqa: E501
        :rtype: Employee
        """
        return self._employee

    @employee.setter
    def employee(self, employee):
        """Sets the employee of this SalaryTransaction.


        :param employee: The employee of this SalaryTransaction.  # noqa: E501
        :type: Employee
        """

        self._employee = employee

    @property
    def employment(self):
        """Gets the employment of this SalaryTransaction.  # noqa: E501


        :return: The employment of this SalaryTransaction.  # noqa: E501
        :rtype: Employment
        """
        return self._employment

    @employment.setter
    def employment(self, employment):
        """Sets the employment of this SalaryTransaction.


        :param employment: The employment of this SalaryTransaction.  # noqa: E501
        :type: Employment
        """

        self._employment = employment

    @property
    def dimensions(self):
        """Gets the dimensions of this SalaryTransaction.  # noqa: E501


        :return: The dimensions of this SalaryTransaction.  # noqa: E501
        :rtype: Dimensions
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this SalaryTransaction.


        :param dimensions: The dimensions of this SalaryTransaction.  # noqa: E501
        :type: Dimensions
        """

        self._dimensions = dimensions

    @property
    def supplements(self):
        """Gets the supplements of this SalaryTransaction.  # noqa: E501


        :return: The supplements of this SalaryTransaction.  # noqa: E501
        :rtype: list[SalaryTransactionSupplement]
        """
        return self._supplements

    @supplements.setter
    def supplements(self, supplements):
        """Sets the supplements of this SalaryTransaction.


        :param supplements: The supplements of this SalaryTransaction.  # noqa: E501
        :type: list[SalaryTransactionSupplement]
        """

        self._supplements = supplements

    @property
    def taxbasis(self):
        """Gets the taxbasis of this SalaryTransaction.  # noqa: E501


        :return: The taxbasis of this SalaryTransaction.  # noqa: E501
        :rtype: TaxBasis
        """
        return self._taxbasis

    @taxbasis.setter
    def taxbasis(self, taxbasis):
        """Sets the taxbasis of this SalaryTransaction.


        :param taxbasis: The taxbasis of this SalaryTransaction.  # noqa: E501
        :type: TaxBasis
        """

        self._taxbasis = taxbasis

    @property
    def vat_type(self):
        """Gets the vat_type of this SalaryTransaction.  # noqa: E501


        :return: The vat_type of this SalaryTransaction.  # noqa: E501
        :rtype: VatType
        """
        return self._vat_type

    @vat_type.setter
    def vat_type(self, vat_type):
        """Sets the vat_type of this SalaryTransaction.


        :param vat_type: The vat_type of this SalaryTransaction.  # noqa: E501
        :type: VatType
        """

        self._vat_type = vat_type

    @property
    def custom_values(self):
        """Gets the custom_values of this SalaryTransaction.  # noqa: E501


        :return: The custom_values of this SalaryTransaction.  # noqa: E501
        :rtype: CustomValues
        """
        return self._custom_values

    @custom_values.setter
    def custom_values(self, custom_values):
        """Sets the custom_values of this SalaryTransaction.


        :param custom_values: The custom_values of this SalaryTransaction.  # noqa: E501
        :type: CustomValues
        """

        self._custom_values = custom_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SalaryTransaction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SalaryTransaction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
