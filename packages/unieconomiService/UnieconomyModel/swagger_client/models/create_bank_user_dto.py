# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateBankUserDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'phone': 'str',
        'admin_password': 'str',
        'is_admin': 'bool',
        'admin_user_id': 'int',
        'password': 'str',
        'custom_values': 'CustomValues'
    }

    attribute_map = {
        'phone': 'Phone',
        'admin_password': 'AdminPassword',
        'is_admin': 'IsAdmin',
        'admin_user_id': 'AdminUserId',
        'password': 'Password',
        'custom_values': 'CustomValues'
    }

    def __init__(self, phone=None, admin_password=None, is_admin=None, admin_user_id=None, password=None, custom_values=None):  # noqa: E501
        """CreateBankUserDTO - a model defined in Swagger"""  # noqa: E501
        self._phone = None
        self._admin_password = None
        self._is_admin = None
        self._admin_user_id = None
        self._password = None
        self._custom_values = None
        self.discriminator = None
        if phone is not None:
            self.phone = phone
        if admin_password is not None:
            self.admin_password = admin_password
        if is_admin is not None:
            self.is_admin = is_admin
        if admin_user_id is not None:
            self.admin_user_id = admin_user_id
        if password is not None:
            self.password = password
        if custom_values is not None:
            self.custom_values = custom_values

    @property
    def phone(self):
        """Gets the phone of this CreateBankUserDTO.  # noqa: E501


        :return: The phone of this CreateBankUserDTO.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this CreateBankUserDTO.


        :param phone: The phone of this CreateBankUserDTO.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def admin_password(self):
        """Gets the admin_password of this CreateBankUserDTO.  # noqa: E501


        :return: The admin_password of this CreateBankUserDTO.  # noqa: E501
        :rtype: str
        """
        return self._admin_password

    @admin_password.setter
    def admin_password(self, admin_password):
        """Sets the admin_password of this CreateBankUserDTO.


        :param admin_password: The admin_password of this CreateBankUserDTO.  # noqa: E501
        :type: str
        """

        self._admin_password = admin_password

    @property
    def is_admin(self):
        """Gets the is_admin of this CreateBankUserDTO.  # noqa: E501


        :return: The is_admin of this CreateBankUserDTO.  # noqa: E501
        :rtype: bool
        """
        return self._is_admin

    @is_admin.setter
    def is_admin(self, is_admin):
        """Sets the is_admin of this CreateBankUserDTO.


        :param is_admin: The is_admin of this CreateBankUserDTO.  # noqa: E501
        :type: bool
        """

        self._is_admin = is_admin

    @property
    def admin_user_id(self):
        """Gets the admin_user_id of this CreateBankUserDTO.  # noqa: E501


        :return: The admin_user_id of this CreateBankUserDTO.  # noqa: E501
        :rtype: int
        """
        return self._admin_user_id

    @admin_user_id.setter
    def admin_user_id(self, admin_user_id):
        """Sets the admin_user_id of this CreateBankUserDTO.


        :param admin_user_id: The admin_user_id of this CreateBankUserDTO.  # noqa: E501
        :type: int
        """

        self._admin_user_id = admin_user_id

    @property
    def password(self):
        """Gets the password of this CreateBankUserDTO.  # noqa: E501


        :return: The password of this CreateBankUserDTO.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this CreateBankUserDTO.


        :param password: The password of this CreateBankUserDTO.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def custom_values(self):
        """Gets the custom_values of this CreateBankUserDTO.  # noqa: E501


        :return: The custom_values of this CreateBankUserDTO.  # noqa: E501
        :rtype: CustomValues
        """
        return self._custom_values

    @custom_values.setter
    def custom_values(self, custom_values):
        """Sets the custom_values of this CreateBankUserDTO.


        :param custom_values: The custom_values of this CreateBankUserDTO.  # noqa: E501
        :type: CustomValues
        """

        self._custom_values = custom_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateBankUserDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateBankUserDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
