# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AnnualStatement(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'employer_tax_mandatory': 'bool',
        'year': 'int',
        'employee_name': 'str',
        'employer_phone_number': 'str',
        'employer_email': 'str',
        'employer_org_nr': 'str',
        'employer_country': 'str',
        'employer_name': 'str',
        'employee_municipal_number': 'str',
        'employee_number': 'int',
        'employee_city': 'str',
        'employer_web_address': 'str',
        'employer_city': 'str',
        'employee_post_code': 'str',
        'employee_municipal_name': 'str',
        'employer_country_code': 'str',
        'employer_address': 'str',
        'employee_address': 'str',
        'employer_post_code': 'str',
        'employee_s_sn': 'str',
        'contributions': 'list[AnnualStatementLine]',
        'pension_or_benefits': 'list[AnnualStatementLine]',
        'deductions': 'list[AnnualStatementLine]',
        'draws': 'list[AnnualStatementLine]',
        'custom_values': 'CustomValues'
    }

    attribute_map = {
        'employer_tax_mandatory': 'EmployerTaxMandatory',
        'year': 'Year',
        'employee_name': 'EmployeeName',
        'employer_phone_number': 'EmployerPhoneNumber',
        'employer_email': 'EmployerEmail',
        'employer_org_nr': 'EmployerOrgNr',
        'employer_country': 'EmployerCountry',
        'employer_name': 'EmployerName',
        'employee_municipal_number': 'EmployeeMunicipalNumber',
        'employee_number': 'EmployeeNumber',
        'employee_city': 'EmployeeCity',
        'employer_web_address': 'EmployerWebAddress',
        'employer_city': 'EmployerCity',
        'employee_post_code': 'EmployeePostCode',
        'employee_municipal_name': 'EmployeeMunicipalName',
        'employer_country_code': 'EmployerCountryCode',
        'employer_address': 'EmployerAddress',
        'employee_address': 'EmployeeAddress',
        'employer_post_code': 'EmployerPostCode',
        'employee_s_sn': 'EmployeeSSn',
        'contributions': 'Contributions',
        'pension_or_benefits': 'PensionOrBenefits',
        'deductions': 'Deductions',
        'draws': 'Draws',
        'custom_values': 'CustomValues'
    }

    def __init__(self, employer_tax_mandatory=None, year=None, employee_name=None, employer_phone_number=None, employer_email=None, employer_org_nr=None, employer_country=None, employer_name=None, employee_municipal_number=None, employee_number=None, employee_city=None, employer_web_address=None, employer_city=None, employee_post_code=None, employee_municipal_name=None, employer_country_code=None, employer_address=None, employee_address=None, employer_post_code=None, employee_s_sn=None, contributions=None, pension_or_benefits=None, deductions=None, draws=None, custom_values=None):  # noqa: E501
        """AnnualStatement - a model defined in Swagger"""  # noqa: E501
        self._employer_tax_mandatory = None
        self._year = None
        self._employee_name = None
        self._employer_phone_number = None
        self._employer_email = None
        self._employer_org_nr = None
        self._employer_country = None
        self._employer_name = None
        self._employee_municipal_number = None
        self._employee_number = None
        self._employee_city = None
        self._employer_web_address = None
        self._employer_city = None
        self._employee_post_code = None
        self._employee_municipal_name = None
        self._employer_country_code = None
        self._employer_address = None
        self._employee_address = None
        self._employer_post_code = None
        self._employee_s_sn = None
        self._contributions = None
        self._pension_or_benefits = None
        self._deductions = None
        self._draws = None
        self._custom_values = None
        self.discriminator = None
        if employer_tax_mandatory is not None:
            self.employer_tax_mandatory = employer_tax_mandatory
        if year is not None:
            self.year = year
        if employee_name is not None:
            self.employee_name = employee_name
        if employer_phone_number is not None:
            self.employer_phone_number = employer_phone_number
        if employer_email is not None:
            self.employer_email = employer_email
        if employer_org_nr is not None:
            self.employer_org_nr = employer_org_nr
        if employer_country is not None:
            self.employer_country = employer_country
        if employer_name is not None:
            self.employer_name = employer_name
        if employee_municipal_number is not None:
            self.employee_municipal_number = employee_municipal_number
        if employee_number is not None:
            self.employee_number = employee_number
        if employee_city is not None:
            self.employee_city = employee_city
        if employer_web_address is not None:
            self.employer_web_address = employer_web_address
        if employer_city is not None:
            self.employer_city = employer_city
        if employee_post_code is not None:
            self.employee_post_code = employee_post_code
        if employee_municipal_name is not None:
            self.employee_municipal_name = employee_municipal_name
        if employer_country_code is not None:
            self.employer_country_code = employer_country_code
        if employer_address is not None:
            self.employer_address = employer_address
        if employee_address is not None:
            self.employee_address = employee_address
        if employer_post_code is not None:
            self.employer_post_code = employer_post_code
        if employee_s_sn is not None:
            self.employee_s_sn = employee_s_sn
        if contributions is not None:
            self.contributions = contributions
        if pension_or_benefits is not None:
            self.pension_or_benefits = pension_or_benefits
        if deductions is not None:
            self.deductions = deductions
        if draws is not None:
            self.draws = draws
        if custom_values is not None:
            self.custom_values = custom_values

    @property
    def employer_tax_mandatory(self):
        """Gets the employer_tax_mandatory of this AnnualStatement.  # noqa: E501


        :return: The employer_tax_mandatory of this AnnualStatement.  # noqa: E501
        :rtype: bool
        """
        return self._employer_tax_mandatory

    @employer_tax_mandatory.setter
    def employer_tax_mandatory(self, employer_tax_mandatory):
        """Sets the employer_tax_mandatory of this AnnualStatement.


        :param employer_tax_mandatory: The employer_tax_mandatory of this AnnualStatement.  # noqa: E501
        :type: bool
        """

        self._employer_tax_mandatory = employer_tax_mandatory

    @property
    def year(self):
        """Gets the year of this AnnualStatement.  # noqa: E501


        :return: The year of this AnnualStatement.  # noqa: E501
        :rtype: int
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this AnnualStatement.


        :param year: The year of this AnnualStatement.  # noqa: E501
        :type: int
        """

        self._year = year

    @property
    def employee_name(self):
        """Gets the employee_name of this AnnualStatement.  # noqa: E501


        :return: The employee_name of this AnnualStatement.  # noqa: E501
        :rtype: str
        """
        return self._employee_name

    @employee_name.setter
    def employee_name(self, employee_name):
        """Sets the employee_name of this AnnualStatement.


        :param employee_name: The employee_name of this AnnualStatement.  # noqa: E501
        :type: str
        """

        self._employee_name = employee_name

    @property
    def employer_phone_number(self):
        """Gets the employer_phone_number of this AnnualStatement.  # noqa: E501


        :return: The employer_phone_number of this AnnualStatement.  # noqa: E501
        :rtype: str
        """
        return self._employer_phone_number

    @employer_phone_number.setter
    def employer_phone_number(self, employer_phone_number):
        """Sets the employer_phone_number of this AnnualStatement.


        :param employer_phone_number: The employer_phone_number of this AnnualStatement.  # noqa: E501
        :type: str
        """

        self._employer_phone_number = employer_phone_number

    @property
    def employer_email(self):
        """Gets the employer_email of this AnnualStatement.  # noqa: E501


        :return: The employer_email of this AnnualStatement.  # noqa: E501
        :rtype: str
        """
        return self._employer_email

    @employer_email.setter
    def employer_email(self, employer_email):
        """Sets the employer_email of this AnnualStatement.


        :param employer_email: The employer_email of this AnnualStatement.  # noqa: E501
        :type: str
        """

        self._employer_email = employer_email

    @property
    def employer_org_nr(self):
        """Gets the employer_org_nr of this AnnualStatement.  # noqa: E501


        :return: The employer_org_nr of this AnnualStatement.  # noqa: E501
        :rtype: str
        """
        return self._employer_org_nr

    @employer_org_nr.setter
    def employer_org_nr(self, employer_org_nr):
        """Sets the employer_org_nr of this AnnualStatement.


        :param employer_org_nr: The employer_org_nr of this AnnualStatement.  # noqa: E501
        :type: str
        """

        self._employer_org_nr = employer_org_nr

    @property
    def employer_country(self):
        """Gets the employer_country of this AnnualStatement.  # noqa: E501


        :return: The employer_country of this AnnualStatement.  # noqa: E501
        :rtype: str
        """
        return self._employer_country

    @employer_country.setter
    def employer_country(self, employer_country):
        """Sets the employer_country of this AnnualStatement.


        :param employer_country: The employer_country of this AnnualStatement.  # noqa: E501
        :type: str
        """

        self._employer_country = employer_country

    @property
    def employer_name(self):
        """Gets the employer_name of this AnnualStatement.  # noqa: E501


        :return: The employer_name of this AnnualStatement.  # noqa: E501
        :rtype: str
        """
        return self._employer_name

    @employer_name.setter
    def employer_name(self, employer_name):
        """Sets the employer_name of this AnnualStatement.


        :param employer_name: The employer_name of this AnnualStatement.  # noqa: E501
        :type: str
        """

        self._employer_name = employer_name

    @property
    def employee_municipal_number(self):
        """Gets the employee_municipal_number of this AnnualStatement.  # noqa: E501


        :return: The employee_municipal_number of this AnnualStatement.  # noqa: E501
        :rtype: str
        """
        return self._employee_municipal_number

    @employee_municipal_number.setter
    def employee_municipal_number(self, employee_municipal_number):
        """Sets the employee_municipal_number of this AnnualStatement.


        :param employee_municipal_number: The employee_municipal_number of this AnnualStatement.  # noqa: E501
        :type: str
        """

        self._employee_municipal_number = employee_municipal_number

    @property
    def employee_number(self):
        """Gets the employee_number of this AnnualStatement.  # noqa: E501


        :return: The employee_number of this AnnualStatement.  # noqa: E501
        :rtype: int
        """
        return self._employee_number

    @employee_number.setter
    def employee_number(self, employee_number):
        """Sets the employee_number of this AnnualStatement.


        :param employee_number: The employee_number of this AnnualStatement.  # noqa: E501
        :type: int
        """

        self._employee_number = employee_number

    @property
    def employee_city(self):
        """Gets the employee_city of this AnnualStatement.  # noqa: E501


        :return: The employee_city of this AnnualStatement.  # noqa: E501
        :rtype: str
        """
        return self._employee_city

    @employee_city.setter
    def employee_city(self, employee_city):
        """Sets the employee_city of this AnnualStatement.


        :param employee_city: The employee_city of this AnnualStatement.  # noqa: E501
        :type: str
        """

        self._employee_city = employee_city

    @property
    def employer_web_address(self):
        """Gets the employer_web_address of this AnnualStatement.  # noqa: E501


        :return: The employer_web_address of this AnnualStatement.  # noqa: E501
        :rtype: str
        """
        return self._employer_web_address

    @employer_web_address.setter
    def employer_web_address(self, employer_web_address):
        """Sets the employer_web_address of this AnnualStatement.


        :param employer_web_address: The employer_web_address of this AnnualStatement.  # noqa: E501
        :type: str
        """

        self._employer_web_address = employer_web_address

    @property
    def employer_city(self):
        """Gets the employer_city of this AnnualStatement.  # noqa: E501


        :return: The employer_city of this AnnualStatement.  # noqa: E501
        :rtype: str
        """
        return self._employer_city

    @employer_city.setter
    def employer_city(self, employer_city):
        """Sets the employer_city of this AnnualStatement.


        :param employer_city: The employer_city of this AnnualStatement.  # noqa: E501
        :type: str
        """

        self._employer_city = employer_city

    @property
    def employee_post_code(self):
        """Gets the employee_post_code of this AnnualStatement.  # noqa: E501


        :return: The employee_post_code of this AnnualStatement.  # noqa: E501
        :rtype: str
        """
        return self._employee_post_code

    @employee_post_code.setter
    def employee_post_code(self, employee_post_code):
        """Sets the employee_post_code of this AnnualStatement.


        :param employee_post_code: The employee_post_code of this AnnualStatement.  # noqa: E501
        :type: str
        """

        self._employee_post_code = employee_post_code

    @property
    def employee_municipal_name(self):
        """Gets the employee_municipal_name of this AnnualStatement.  # noqa: E501


        :return: The employee_municipal_name of this AnnualStatement.  # noqa: E501
        :rtype: str
        """
        return self._employee_municipal_name

    @employee_municipal_name.setter
    def employee_municipal_name(self, employee_municipal_name):
        """Sets the employee_municipal_name of this AnnualStatement.


        :param employee_municipal_name: The employee_municipal_name of this AnnualStatement.  # noqa: E501
        :type: str
        """

        self._employee_municipal_name = employee_municipal_name

    @property
    def employer_country_code(self):
        """Gets the employer_country_code of this AnnualStatement.  # noqa: E501


        :return: The employer_country_code of this AnnualStatement.  # noqa: E501
        :rtype: str
        """
        return self._employer_country_code

    @employer_country_code.setter
    def employer_country_code(self, employer_country_code):
        """Sets the employer_country_code of this AnnualStatement.


        :param employer_country_code: The employer_country_code of this AnnualStatement.  # noqa: E501
        :type: str
        """

        self._employer_country_code = employer_country_code

    @property
    def employer_address(self):
        """Gets the employer_address of this AnnualStatement.  # noqa: E501


        :return: The employer_address of this AnnualStatement.  # noqa: E501
        :rtype: str
        """
        return self._employer_address

    @employer_address.setter
    def employer_address(self, employer_address):
        """Sets the employer_address of this AnnualStatement.


        :param employer_address: The employer_address of this AnnualStatement.  # noqa: E501
        :type: str
        """

        self._employer_address = employer_address

    @property
    def employee_address(self):
        """Gets the employee_address of this AnnualStatement.  # noqa: E501


        :return: The employee_address of this AnnualStatement.  # noqa: E501
        :rtype: str
        """
        return self._employee_address

    @employee_address.setter
    def employee_address(self, employee_address):
        """Sets the employee_address of this AnnualStatement.


        :param employee_address: The employee_address of this AnnualStatement.  # noqa: E501
        :type: str
        """

        self._employee_address = employee_address

    @property
    def employer_post_code(self):
        """Gets the employer_post_code of this AnnualStatement.  # noqa: E501


        :return: The employer_post_code of this AnnualStatement.  # noqa: E501
        :rtype: str
        """
        return self._employer_post_code

    @employer_post_code.setter
    def employer_post_code(self, employer_post_code):
        """Sets the employer_post_code of this AnnualStatement.


        :param employer_post_code: The employer_post_code of this AnnualStatement.  # noqa: E501
        :type: str
        """

        self._employer_post_code = employer_post_code

    @property
    def employee_s_sn(self):
        """Gets the employee_s_sn of this AnnualStatement.  # noqa: E501


        :return: The employee_s_sn of this AnnualStatement.  # noqa: E501
        :rtype: str
        """
        return self._employee_s_sn

    @employee_s_sn.setter
    def employee_s_sn(self, employee_s_sn):
        """Sets the employee_s_sn of this AnnualStatement.


        :param employee_s_sn: The employee_s_sn of this AnnualStatement.  # noqa: E501
        :type: str
        """

        self._employee_s_sn = employee_s_sn

    @property
    def contributions(self):
        """Gets the contributions of this AnnualStatement.  # noqa: E501


        :return: The contributions of this AnnualStatement.  # noqa: E501
        :rtype: list[AnnualStatementLine]
        """
        return self._contributions

    @contributions.setter
    def contributions(self, contributions):
        """Sets the contributions of this AnnualStatement.


        :param contributions: The contributions of this AnnualStatement.  # noqa: E501
        :type: list[AnnualStatementLine]
        """

        self._contributions = contributions

    @property
    def pension_or_benefits(self):
        """Gets the pension_or_benefits of this AnnualStatement.  # noqa: E501


        :return: The pension_or_benefits of this AnnualStatement.  # noqa: E501
        :rtype: list[AnnualStatementLine]
        """
        return self._pension_or_benefits

    @pension_or_benefits.setter
    def pension_or_benefits(self, pension_or_benefits):
        """Sets the pension_or_benefits of this AnnualStatement.


        :param pension_or_benefits: The pension_or_benefits of this AnnualStatement.  # noqa: E501
        :type: list[AnnualStatementLine]
        """

        self._pension_or_benefits = pension_or_benefits

    @property
    def deductions(self):
        """Gets the deductions of this AnnualStatement.  # noqa: E501


        :return: The deductions of this AnnualStatement.  # noqa: E501
        :rtype: list[AnnualStatementLine]
        """
        return self._deductions

    @deductions.setter
    def deductions(self, deductions):
        """Sets the deductions of this AnnualStatement.


        :param deductions: The deductions of this AnnualStatement.  # noqa: E501
        :type: list[AnnualStatementLine]
        """

        self._deductions = deductions

    @property
    def draws(self):
        """Gets the draws of this AnnualStatement.  # noqa: E501


        :return: The draws of this AnnualStatement.  # noqa: E501
        :rtype: list[AnnualStatementLine]
        """
        return self._draws

    @draws.setter
    def draws(self, draws):
        """Sets the draws of this AnnualStatement.


        :param draws: The draws of this AnnualStatement.  # noqa: E501
        :type: list[AnnualStatementLine]
        """

        self._draws = draws

    @property
    def custom_values(self):
        """Gets the custom_values of this AnnualStatement.  # noqa: E501


        :return: The custom_values of this AnnualStatement.  # noqa: E501
        :rtype: CustomValues
        """
        return self._custom_values

    @custom_values.setter
    def custom_values(self, custom_values):
        """Sets the custom_values of this AnnualStatement.


        :param custom_values: The custom_values of this AnnualStatement.  # noqa: E501
        :type: CustomValues
        """

        self._custom_values = custom_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AnnualStatement, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnnualStatement):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
