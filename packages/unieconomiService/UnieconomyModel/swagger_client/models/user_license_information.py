# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UserLicenseInformation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'user_license_key': 'str',
        'global_identity': 'str',
        'comment': 'str',
        'customer_agreement': 'CustomerLicenseAgreementInfo',
        'user_type': 'UserLicenseType',
        'company': 'CompanyLicenseInfomation',
        'contract_type': 'ContractLicenseType',
        'user_license_agreement': 'LicenseAgreementInfo',
        'custom_values': 'CustomValues'
    }

    attribute_map = {
        'name': 'Name',
        'user_license_key': 'UserLicenseKey',
        'global_identity': 'GlobalIdentity',
        'comment': 'Comment',
        'customer_agreement': 'CustomerAgreement',
        'user_type': 'UserType',
        'company': 'Company',
        'contract_type': 'ContractType',
        'user_license_agreement': 'UserLicenseAgreement',
        'custom_values': 'CustomValues'
    }

    def __init__(self, name=None, user_license_key=None, global_identity=None, comment=None, customer_agreement=None, user_type=None, company=None, contract_type=None, user_license_agreement=None, custom_values=None):  # noqa: E501
        """UserLicenseInformation - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._user_license_key = None
        self._global_identity = None
        self._comment = None
        self._customer_agreement = None
        self._user_type = None
        self._company = None
        self._contract_type = None
        self._user_license_agreement = None
        self._custom_values = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if user_license_key is not None:
            self.user_license_key = user_license_key
        if global_identity is not None:
            self.global_identity = global_identity
        if comment is not None:
            self.comment = comment
        if customer_agreement is not None:
            self.customer_agreement = customer_agreement
        if user_type is not None:
            self.user_type = user_type
        if company is not None:
            self.company = company
        if contract_type is not None:
            self.contract_type = contract_type
        if user_license_agreement is not None:
            self.user_license_agreement = user_license_agreement
        if custom_values is not None:
            self.custom_values = custom_values

    @property
    def name(self):
        """Gets the name of this UserLicenseInformation.  # noqa: E501


        :return: The name of this UserLicenseInformation.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UserLicenseInformation.


        :param name: The name of this UserLicenseInformation.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def user_license_key(self):
        """Gets the user_license_key of this UserLicenseInformation.  # noqa: E501


        :return: The user_license_key of this UserLicenseInformation.  # noqa: E501
        :rtype: str
        """
        return self._user_license_key

    @user_license_key.setter
    def user_license_key(self, user_license_key):
        """Sets the user_license_key of this UserLicenseInformation.


        :param user_license_key: The user_license_key of this UserLicenseInformation.  # noqa: E501
        :type: str
        """

        self._user_license_key = user_license_key

    @property
    def global_identity(self):
        """Gets the global_identity of this UserLicenseInformation.  # noqa: E501


        :return: The global_identity of this UserLicenseInformation.  # noqa: E501
        :rtype: str
        """
        return self._global_identity

    @global_identity.setter
    def global_identity(self, global_identity):
        """Sets the global_identity of this UserLicenseInformation.


        :param global_identity: The global_identity of this UserLicenseInformation.  # noqa: E501
        :type: str
        """

        self._global_identity = global_identity

    @property
    def comment(self):
        """Gets the comment of this UserLicenseInformation.  # noqa: E501


        :return: The comment of this UserLicenseInformation.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this UserLicenseInformation.


        :param comment: The comment of this UserLicenseInformation.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def customer_agreement(self):
        """Gets the customer_agreement of this UserLicenseInformation.  # noqa: E501


        :return: The customer_agreement of this UserLicenseInformation.  # noqa: E501
        :rtype: CustomerLicenseAgreementInfo
        """
        return self._customer_agreement

    @customer_agreement.setter
    def customer_agreement(self, customer_agreement):
        """Sets the customer_agreement of this UserLicenseInformation.


        :param customer_agreement: The customer_agreement of this UserLicenseInformation.  # noqa: E501
        :type: CustomerLicenseAgreementInfo
        """

        self._customer_agreement = customer_agreement

    @property
    def user_type(self):
        """Gets the user_type of this UserLicenseInformation.  # noqa: E501


        :return: The user_type of this UserLicenseInformation.  # noqa: E501
        :rtype: UserLicenseType
        """
        return self._user_type

    @user_type.setter
    def user_type(self, user_type):
        """Sets the user_type of this UserLicenseInformation.


        :param user_type: The user_type of this UserLicenseInformation.  # noqa: E501
        :type: UserLicenseType
        """

        self._user_type = user_type

    @property
    def company(self):
        """Gets the company of this UserLicenseInformation.  # noqa: E501


        :return: The company of this UserLicenseInformation.  # noqa: E501
        :rtype: CompanyLicenseInfomation
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this UserLicenseInformation.


        :param company: The company of this UserLicenseInformation.  # noqa: E501
        :type: CompanyLicenseInfomation
        """

        self._company = company

    @property
    def contract_type(self):
        """Gets the contract_type of this UserLicenseInformation.  # noqa: E501


        :return: The contract_type of this UserLicenseInformation.  # noqa: E501
        :rtype: ContractLicenseType
        """
        return self._contract_type

    @contract_type.setter
    def contract_type(self, contract_type):
        """Sets the contract_type of this UserLicenseInformation.


        :param contract_type: The contract_type of this UserLicenseInformation.  # noqa: E501
        :type: ContractLicenseType
        """

        self._contract_type = contract_type

    @property
    def user_license_agreement(self):
        """Gets the user_license_agreement of this UserLicenseInformation.  # noqa: E501


        :return: The user_license_agreement of this UserLicenseInformation.  # noqa: E501
        :rtype: LicenseAgreementInfo
        """
        return self._user_license_agreement

    @user_license_agreement.setter
    def user_license_agreement(self, user_license_agreement):
        """Sets the user_license_agreement of this UserLicenseInformation.


        :param user_license_agreement: The user_license_agreement of this UserLicenseInformation.  # noqa: E501
        :type: LicenseAgreementInfo
        """

        self._user_license_agreement = user_license_agreement

    @property
    def custom_values(self):
        """Gets the custom_values of this UserLicenseInformation.  # noqa: E501


        :return: The custom_values of this UserLicenseInformation.  # noqa: E501
        :rtype: CustomValues
        """
        return self._custom_values

    @custom_values.setter
    def custom_values(self, custom_values):
        """Sets the custom_values of this UserLicenseInformation.


        :param custom_values: The custom_values of this UserLicenseInformation.  # noqa: E501
        :type: CustomValues
        """

        self._custom_values = custom_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserLicenseInformation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserLicenseInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
