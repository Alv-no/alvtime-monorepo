# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TaxCardReadStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_job': 'bool',
        'main_status': 'str',
        'title': 'str',
        'text': 'str',
        'employeestatus': 'list[EmployeeStatus]',
        'custom_values': 'CustomValues'
    }

    attribute_map = {
        'is_job': 'IsJob',
        'main_status': 'mainStatus',
        'title': 'Title',
        'text': 'Text',
        'employeestatus': 'employeestatus',
        'custom_values': 'CustomValues'
    }

    def __init__(self, is_job=None, main_status=None, title=None, text=None, employeestatus=None, custom_values=None):  # noqa: E501
        """TaxCardReadStatus - a model defined in Swagger"""  # noqa: E501
        self._is_job = None
        self._main_status = None
        self._title = None
        self._text = None
        self._employeestatus = None
        self._custom_values = None
        self.discriminator = None
        if is_job is not None:
            self.is_job = is_job
        if main_status is not None:
            self.main_status = main_status
        if title is not None:
            self.title = title
        if text is not None:
            self.text = text
        if employeestatus is not None:
            self.employeestatus = employeestatus
        if custom_values is not None:
            self.custom_values = custom_values

    @property
    def is_job(self):
        """Gets the is_job of this TaxCardReadStatus.  # noqa: E501


        :return: The is_job of this TaxCardReadStatus.  # noqa: E501
        :rtype: bool
        """
        return self._is_job

    @is_job.setter
    def is_job(self, is_job):
        """Sets the is_job of this TaxCardReadStatus.


        :param is_job: The is_job of this TaxCardReadStatus.  # noqa: E501
        :type: bool
        """

        self._is_job = is_job

    @property
    def main_status(self):
        """Gets the main_status of this TaxCardReadStatus.  # noqa: E501


        :return: The main_status of this TaxCardReadStatus.  # noqa: E501
        :rtype: str
        """
        return self._main_status

    @main_status.setter
    def main_status(self, main_status):
        """Sets the main_status of this TaxCardReadStatus.


        :param main_status: The main_status of this TaxCardReadStatus.  # noqa: E501
        :type: str
        """

        self._main_status = main_status

    @property
    def title(self):
        """Gets the title of this TaxCardReadStatus.  # noqa: E501


        :return: The title of this TaxCardReadStatus.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this TaxCardReadStatus.


        :param title: The title of this TaxCardReadStatus.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def text(self):
        """Gets the text of this TaxCardReadStatus.  # noqa: E501


        :return: The text of this TaxCardReadStatus.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this TaxCardReadStatus.


        :param text: The text of this TaxCardReadStatus.  # noqa: E501
        :type: str
        """

        self._text = text

    @property
    def employeestatus(self):
        """Gets the employeestatus of this TaxCardReadStatus.  # noqa: E501


        :return: The employeestatus of this TaxCardReadStatus.  # noqa: E501
        :rtype: list[EmployeeStatus]
        """
        return self._employeestatus

    @employeestatus.setter
    def employeestatus(self, employeestatus):
        """Sets the employeestatus of this TaxCardReadStatus.


        :param employeestatus: The employeestatus of this TaxCardReadStatus.  # noqa: E501
        :type: list[EmployeeStatus]
        """

        self._employeestatus = employeestatus

    @property
    def custom_values(self):
        """Gets the custom_values of this TaxCardReadStatus.  # noqa: E501


        :return: The custom_values of this TaxCardReadStatus.  # noqa: E501
        :rtype: CustomValues
        """
        return self._custom_values

    @custom_values.setter
    def custom_values(self, custom_values):
        """Sets the custom_values of this TaxCardReadStatus.


        :param custom_values: The custom_values of this TaxCardReadStatus.  # noqa: E501
        :type: CustomValues
        """

        self._custom_values = custom_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TaxCardReadStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaxCardReadStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
