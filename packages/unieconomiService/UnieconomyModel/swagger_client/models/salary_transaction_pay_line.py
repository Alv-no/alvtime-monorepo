# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SalaryTransactionPayLine(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'employee_name': 'str',
        'employee_number': 'int',
        'city': 'str',
        'address': 'str',
        'postal_code': 'str',
        'account': 'str',
        'custom_values': 'CustomValues'
    }

    attribute_map = {
        'employee_name': 'EmployeeName',
        'employee_number': 'EmployeeNumber',
        'city': 'City',
        'address': 'Address',
        'postal_code': 'PostalCode',
        'account': 'Account',
        'custom_values': 'CustomValues'
    }

    def __init__(self, employee_name=None, employee_number=None, city=None, address=None, postal_code=None, account=None, custom_values=None):  # noqa: E501
        """SalaryTransactionPayLine - a model defined in Swagger"""  # noqa: E501
        self._employee_name = None
        self._employee_number = None
        self._city = None
        self._address = None
        self._postal_code = None
        self._account = None
        self._custom_values = None
        self.discriminator = None
        if employee_name is not None:
            self.employee_name = employee_name
        if employee_number is not None:
            self.employee_number = employee_number
        if city is not None:
            self.city = city
        if address is not None:
            self.address = address
        if postal_code is not None:
            self.postal_code = postal_code
        if account is not None:
            self.account = account
        if custom_values is not None:
            self.custom_values = custom_values

    @property
    def employee_name(self):
        """Gets the employee_name of this SalaryTransactionPayLine.  # noqa: E501


        :return: The employee_name of this SalaryTransactionPayLine.  # noqa: E501
        :rtype: str
        """
        return self._employee_name

    @employee_name.setter
    def employee_name(self, employee_name):
        """Sets the employee_name of this SalaryTransactionPayLine.


        :param employee_name: The employee_name of this SalaryTransactionPayLine.  # noqa: E501
        :type: str
        """

        self._employee_name = employee_name

    @property
    def employee_number(self):
        """Gets the employee_number of this SalaryTransactionPayLine.  # noqa: E501


        :return: The employee_number of this SalaryTransactionPayLine.  # noqa: E501
        :rtype: int
        """
        return self._employee_number

    @employee_number.setter
    def employee_number(self, employee_number):
        """Sets the employee_number of this SalaryTransactionPayLine.


        :param employee_number: The employee_number of this SalaryTransactionPayLine.  # noqa: E501
        :type: int
        """

        self._employee_number = employee_number

    @property
    def city(self):
        """Gets the city of this SalaryTransactionPayLine.  # noqa: E501


        :return: The city of this SalaryTransactionPayLine.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this SalaryTransactionPayLine.


        :param city: The city of this SalaryTransactionPayLine.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def address(self):
        """Gets the address of this SalaryTransactionPayLine.  # noqa: E501


        :return: The address of this SalaryTransactionPayLine.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this SalaryTransactionPayLine.


        :param address: The address of this SalaryTransactionPayLine.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def postal_code(self):
        """Gets the postal_code of this SalaryTransactionPayLine.  # noqa: E501


        :return: The postal_code of this SalaryTransactionPayLine.  # noqa: E501
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this SalaryTransactionPayLine.


        :param postal_code: The postal_code of this SalaryTransactionPayLine.  # noqa: E501
        :type: str
        """

        self._postal_code = postal_code

    @property
    def account(self):
        """Gets the account of this SalaryTransactionPayLine.  # noqa: E501


        :return: The account of this SalaryTransactionPayLine.  # noqa: E501
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this SalaryTransactionPayLine.


        :param account: The account of this SalaryTransactionPayLine.  # noqa: E501
        :type: str
        """

        self._account = account

    @property
    def custom_values(self):
        """Gets the custom_values of this SalaryTransactionPayLine.  # noqa: E501


        :return: The custom_values of this SalaryTransactionPayLine.  # noqa: E501
        :rtype: CustomValues
        """
        return self._custom_values

    @custom_values.setter
    def custom_values(self, custom_values):
        """Sets the custom_values of this SalaryTransactionPayLine.


        :param custom_values: The custom_values of this SalaryTransactionPayLine.  # noqa: E501
        :type: CustomValues
        """

        self._custom_values = custom_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SalaryTransactionPayLine, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SalaryTransactionPayLine):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
