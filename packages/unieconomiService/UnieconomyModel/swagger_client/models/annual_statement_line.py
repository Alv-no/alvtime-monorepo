# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AnnualStatementLine(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'line_index': 'int',
        'description': 'str',
        'is_deduction': 'bool',
        'tax_return_post': 'str',
        'supplement_package_name': 'str',
        'supplements': 'list[SupplementInfo]',
        'custom_values': 'CustomValues'
    }

    attribute_map = {
        'line_index': 'LineIndex',
        'description': 'Description',
        'is_deduction': 'IsDeduction',
        'tax_return_post': 'TaxReturnPost',
        'supplement_package_name': 'SupplementPackageName',
        'supplements': 'Supplements',
        'custom_values': 'CustomValues'
    }

    def __init__(self, line_index=None, description=None, is_deduction=None, tax_return_post=None, supplement_package_name=None, supplements=None, custom_values=None):  # noqa: E501
        """AnnualStatementLine - a model defined in Swagger"""  # noqa: E501
        self._line_index = None
        self._description = None
        self._is_deduction = None
        self._tax_return_post = None
        self._supplement_package_name = None
        self._supplements = None
        self._custom_values = None
        self.discriminator = None
        if line_index is not None:
            self.line_index = line_index
        if description is not None:
            self.description = description
        if is_deduction is not None:
            self.is_deduction = is_deduction
        if tax_return_post is not None:
            self.tax_return_post = tax_return_post
        if supplement_package_name is not None:
            self.supplement_package_name = supplement_package_name
        if supplements is not None:
            self.supplements = supplements
        if custom_values is not None:
            self.custom_values = custom_values

    @property
    def line_index(self):
        """Gets the line_index of this AnnualStatementLine.  # noqa: E501


        :return: The line_index of this AnnualStatementLine.  # noqa: E501
        :rtype: int
        """
        return self._line_index

    @line_index.setter
    def line_index(self, line_index):
        """Sets the line_index of this AnnualStatementLine.


        :param line_index: The line_index of this AnnualStatementLine.  # noqa: E501
        :type: int
        """

        self._line_index = line_index

    @property
    def description(self):
        """Gets the description of this AnnualStatementLine.  # noqa: E501


        :return: The description of this AnnualStatementLine.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AnnualStatementLine.


        :param description: The description of this AnnualStatementLine.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def is_deduction(self):
        """Gets the is_deduction of this AnnualStatementLine.  # noqa: E501


        :return: The is_deduction of this AnnualStatementLine.  # noqa: E501
        :rtype: bool
        """
        return self._is_deduction

    @is_deduction.setter
    def is_deduction(self, is_deduction):
        """Sets the is_deduction of this AnnualStatementLine.


        :param is_deduction: The is_deduction of this AnnualStatementLine.  # noqa: E501
        :type: bool
        """

        self._is_deduction = is_deduction

    @property
    def tax_return_post(self):
        """Gets the tax_return_post of this AnnualStatementLine.  # noqa: E501


        :return: The tax_return_post of this AnnualStatementLine.  # noqa: E501
        :rtype: str
        """
        return self._tax_return_post

    @tax_return_post.setter
    def tax_return_post(self, tax_return_post):
        """Sets the tax_return_post of this AnnualStatementLine.


        :param tax_return_post: The tax_return_post of this AnnualStatementLine.  # noqa: E501
        :type: str
        """

        self._tax_return_post = tax_return_post

    @property
    def supplement_package_name(self):
        """Gets the supplement_package_name of this AnnualStatementLine.  # noqa: E501


        :return: The supplement_package_name of this AnnualStatementLine.  # noqa: E501
        :rtype: str
        """
        return self._supplement_package_name

    @supplement_package_name.setter
    def supplement_package_name(self, supplement_package_name):
        """Sets the supplement_package_name of this AnnualStatementLine.


        :param supplement_package_name: The supplement_package_name of this AnnualStatementLine.  # noqa: E501
        :type: str
        """

        self._supplement_package_name = supplement_package_name

    @property
    def supplements(self):
        """Gets the supplements of this AnnualStatementLine.  # noqa: E501


        :return: The supplements of this AnnualStatementLine.  # noqa: E501
        :rtype: list[SupplementInfo]
        """
        return self._supplements

    @supplements.setter
    def supplements(self, supplements):
        """Sets the supplements of this AnnualStatementLine.


        :param supplements: The supplements of this AnnualStatementLine.  # noqa: E501
        :type: list[SupplementInfo]
        """

        self._supplements = supplements

    @property
    def custom_values(self):
        """Gets the custom_values of this AnnualStatementLine.  # noqa: E501


        :return: The custom_values of this AnnualStatementLine.  # noqa: E501
        :rtype: CustomValues
        """
        return self._custom_values

    @custom_values.setter
    def custom_values(self, custom_values):
        """Sets the custom_values of this AnnualStatementLine.


        :param custom_values: The custom_values of this AnnualStatementLine.  # noqa: E501
        :type: CustomValues
        """

        self._custom_values = custom_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AnnualStatementLine, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnnualStatementLine):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
