# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DistributionPlanElementValidation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'element_type': 'str',
        'is_valid': 'bool',
        'element_type_name': 'str',
        'priority': 'int',
        'plan_element': 'DistributionPlanElement',
        'custom_values': 'CustomValues'
    }

    attribute_map = {
        'element_type': 'ElementType',
        'is_valid': 'IsValid',
        'element_type_name': 'ElementTypeName',
        'priority': 'Priority',
        'plan_element': 'PlanElement',
        'custom_values': 'CustomValues'
    }

    def __init__(self, element_type=None, is_valid=None, element_type_name=None, priority=None, plan_element=None, custom_values=None):  # noqa: E501
        """DistributionPlanElementValidation - a model defined in Swagger"""  # noqa: E501
        self._element_type = None
        self._is_valid = None
        self._element_type_name = None
        self._priority = None
        self._plan_element = None
        self._custom_values = None
        self.discriminator = None
        if element_type is not None:
            self.element_type = element_type
        if is_valid is not None:
            self.is_valid = is_valid
        if element_type_name is not None:
            self.element_type_name = element_type_name
        if priority is not None:
            self.priority = priority
        if plan_element is not None:
            self.plan_element = plan_element
        if custom_values is not None:
            self.custom_values = custom_values

    @property
    def element_type(self):
        """Gets the element_type of this DistributionPlanElementValidation.  # noqa: E501


        :return: The element_type of this DistributionPlanElementValidation.  # noqa: E501
        :rtype: str
        """
        return self._element_type

    @element_type.setter
    def element_type(self, element_type):
        """Sets the element_type of this DistributionPlanElementValidation.


        :param element_type: The element_type of this DistributionPlanElementValidation.  # noqa: E501
        :type: str
        """

        self._element_type = element_type

    @property
    def is_valid(self):
        """Gets the is_valid of this DistributionPlanElementValidation.  # noqa: E501


        :return: The is_valid of this DistributionPlanElementValidation.  # noqa: E501
        :rtype: bool
        """
        return self._is_valid

    @is_valid.setter
    def is_valid(self, is_valid):
        """Sets the is_valid of this DistributionPlanElementValidation.


        :param is_valid: The is_valid of this DistributionPlanElementValidation.  # noqa: E501
        :type: bool
        """

        self._is_valid = is_valid

    @property
    def element_type_name(self):
        """Gets the element_type_name of this DistributionPlanElementValidation.  # noqa: E501


        :return: The element_type_name of this DistributionPlanElementValidation.  # noqa: E501
        :rtype: str
        """
        return self._element_type_name

    @element_type_name.setter
    def element_type_name(self, element_type_name):
        """Sets the element_type_name of this DistributionPlanElementValidation.


        :param element_type_name: The element_type_name of this DistributionPlanElementValidation.  # noqa: E501
        :type: str
        """

        self._element_type_name = element_type_name

    @property
    def priority(self):
        """Gets the priority of this DistributionPlanElementValidation.  # noqa: E501


        :return: The priority of this DistributionPlanElementValidation.  # noqa: E501
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this DistributionPlanElementValidation.


        :param priority: The priority of this DistributionPlanElementValidation.  # noqa: E501
        :type: int
        """

        self._priority = priority

    @property
    def plan_element(self):
        """Gets the plan_element of this DistributionPlanElementValidation.  # noqa: E501


        :return: The plan_element of this DistributionPlanElementValidation.  # noqa: E501
        :rtype: DistributionPlanElement
        """
        return self._plan_element

    @plan_element.setter
    def plan_element(self, plan_element):
        """Sets the plan_element of this DistributionPlanElementValidation.


        :param plan_element: The plan_element of this DistributionPlanElementValidation.  # noqa: E501
        :type: DistributionPlanElement
        """

        self._plan_element = plan_element

    @property
    def custom_values(self):
        """Gets the custom_values of this DistributionPlanElementValidation.  # noqa: E501


        :return: The custom_values of this DistributionPlanElementValidation.  # noqa: E501
        :rtype: CustomValues
        """
        return self._custom_values

    @custom_values.setter
    def custom_values(self, custom_values):
        """Sets the custom_values of this DistributionPlanElementValidation.


        :param custom_values: The custom_values of this DistributionPlanElementValidation.  # noqa: E501
        :type: CustomValues
        """

        self._custom_values = custom_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DistributionPlanElementValidation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DistributionPlanElementValidation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
