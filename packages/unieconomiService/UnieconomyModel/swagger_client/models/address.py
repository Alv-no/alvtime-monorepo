# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Address(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'business_relation_id': 'int',
        'country_code': 'str',
        'address_line1': 'str',
        'country': 'str',
        'status_code': 'int',
        'deleted': 'bool',
        'address_line2': 'str',
        'city': 'str',
        'address_line3': 'str',
        'id': 'int',
        'postal_code': 'str',
        'region': 'str',
        'updated_by': 'str',
        'created_by': 'str',
        'business_relation': 'BusinessRelation',
        'custom_values': 'CustomValues'
    }

    attribute_map = {
        'business_relation_id': 'BusinessRelationID',
        'country_code': 'CountryCode',
        'address_line1': 'AddressLine1',
        'country': 'Country',
        'status_code': 'StatusCode',
        'deleted': 'Deleted',
        'address_line2': 'AddressLine2',
        'city': 'City',
        'address_line3': 'AddressLine3',
        'id': 'ID',
        'postal_code': 'PostalCode',
        'region': 'Region',
        'updated_by': 'UpdatedBy',
        'created_by': 'CreatedBy',
        'business_relation': 'BusinessRelation',
        'custom_values': 'CustomValues'
    }

    def __init__(self, business_relation_id=None, country_code=None, address_line1=None, country=None, status_code=None, deleted=None, address_line2=None, city=None, address_line3=None, id=None, postal_code=None, region=None, updated_by=None, created_by=None, business_relation=None, custom_values=None):  # noqa: E501
        """Address - a model defined in Swagger"""  # noqa: E501
        self._business_relation_id = None
        self._country_code = None
        self._address_line1 = None
        self._country = None
        self._status_code = None
        self._deleted = None
        self._address_line2 = None
        self._city = None
        self._address_line3 = None
        self._id = None
        self._postal_code = None
        self._region = None
        self._updated_by = None
        self._created_by = None
        self._business_relation = None
        self._custom_values = None
        self.discriminator = None
        if business_relation_id is not None:
            self.business_relation_id = business_relation_id
        if country_code is not None:
            self.country_code = country_code
        if address_line1 is not None:
            self.address_line1 = address_line1
        if country is not None:
            self.country = country
        if status_code is not None:
            self.status_code = status_code
        if deleted is not None:
            self.deleted = deleted
        if address_line2 is not None:
            self.address_line2 = address_line2
        if city is not None:
            self.city = city
        if address_line3 is not None:
            self.address_line3 = address_line3
        if id is not None:
            self.id = id
        if postal_code is not None:
            self.postal_code = postal_code
        if region is not None:
            self.region = region
        if updated_by is not None:
            self.updated_by = updated_by
        if created_by is not None:
            self.created_by = created_by
        if business_relation is not None:
            self.business_relation = business_relation
        if custom_values is not None:
            self.custom_values = custom_values

    @property
    def business_relation_id(self):
        """Gets the business_relation_id of this Address.  # noqa: E501


        :return: The business_relation_id of this Address.  # noqa: E501
        :rtype: int
        """
        return self._business_relation_id

    @business_relation_id.setter
    def business_relation_id(self, business_relation_id):
        """Sets the business_relation_id of this Address.


        :param business_relation_id: The business_relation_id of this Address.  # noqa: E501
        :type: int
        """

        self._business_relation_id = business_relation_id

    @property
    def country_code(self):
        """Gets the country_code of this Address.  # noqa: E501


        :return: The country_code of this Address.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this Address.


        :param country_code: The country_code of this Address.  # noqa: E501
        :type: str
        """

        self._country_code = country_code

    @property
    def address_line1(self):
        """Gets the address_line1 of this Address.  # noqa: E501


        :return: The address_line1 of this Address.  # noqa: E501
        :rtype: str
        """
        return self._address_line1

    @address_line1.setter
    def address_line1(self, address_line1):
        """Sets the address_line1 of this Address.


        :param address_line1: The address_line1 of this Address.  # noqa: E501
        :type: str
        """

        self._address_line1 = address_line1

    @property
    def country(self):
        """Gets the country of this Address.  # noqa: E501


        :return: The country of this Address.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Address.


        :param country: The country of this Address.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def status_code(self):
        """Gets the status_code of this Address.  # noqa: E501


        :return: The status_code of this Address.  # noqa: E501
        :rtype: int
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this Address.


        :param status_code: The status_code of this Address.  # noqa: E501
        :type: int
        """

        self._status_code = status_code

    @property
    def deleted(self):
        """Gets the deleted of this Address.  # noqa: E501


        :return: The deleted of this Address.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this Address.


        :param deleted: The deleted of this Address.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def address_line2(self):
        """Gets the address_line2 of this Address.  # noqa: E501


        :return: The address_line2 of this Address.  # noqa: E501
        :rtype: str
        """
        return self._address_line2

    @address_line2.setter
    def address_line2(self, address_line2):
        """Sets the address_line2 of this Address.


        :param address_line2: The address_line2 of this Address.  # noqa: E501
        :type: str
        """

        self._address_line2 = address_line2

    @property
    def city(self):
        """Gets the city of this Address.  # noqa: E501


        :return: The city of this Address.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Address.


        :param city: The city of this Address.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def address_line3(self):
        """Gets the address_line3 of this Address.  # noqa: E501


        :return: The address_line3 of this Address.  # noqa: E501
        :rtype: str
        """
        return self._address_line3

    @address_line3.setter
    def address_line3(self, address_line3):
        """Sets the address_line3 of this Address.


        :param address_line3: The address_line3 of this Address.  # noqa: E501
        :type: str
        """

        self._address_line3 = address_line3

    @property
    def id(self):
        """Gets the id of this Address.  # noqa: E501


        :return: The id of this Address.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Address.


        :param id: The id of this Address.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def postal_code(self):
        """Gets the postal_code of this Address.  # noqa: E501


        :return: The postal_code of this Address.  # noqa: E501
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this Address.


        :param postal_code: The postal_code of this Address.  # noqa: E501
        :type: str
        """

        self._postal_code = postal_code

    @property
    def region(self):
        """Gets the region of this Address.  # noqa: E501


        :return: The region of this Address.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this Address.


        :param region: The region of this Address.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def updated_by(self):
        """Gets the updated_by of this Address.  # noqa: E501


        :return: The updated_by of this Address.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this Address.


        :param updated_by: The updated_by of this Address.  # noqa: E501
        :type: str
        """

        self._updated_by = updated_by

    @property
    def created_by(self):
        """Gets the created_by of this Address.  # noqa: E501


        :return: The created_by of this Address.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Address.


        :param created_by: The created_by of this Address.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def business_relation(self):
        """Gets the business_relation of this Address.  # noqa: E501


        :return: The business_relation of this Address.  # noqa: E501
        :rtype: BusinessRelation
        """
        return self._business_relation

    @business_relation.setter
    def business_relation(self, business_relation):
        """Sets the business_relation of this Address.


        :param business_relation: The business_relation of this Address.  # noqa: E501
        :type: BusinessRelation
        """

        self._business_relation = business_relation

    @property
    def custom_values(self):
        """Gets the custom_values of this Address.  # noqa: E501


        :return: The custom_values of this Address.  # noqa: E501
        :rtype: CustomValues
        """
        return self._custom_values

    @custom_values.setter
    def custom_values(self, custom_values):
        """Sets the custom_values of this Address.


        :param custom_values: The custom_values of this Address.  # noqa: E501
        :type: CustomValues
        """

        self._custom_values = custom_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Address, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Address):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
