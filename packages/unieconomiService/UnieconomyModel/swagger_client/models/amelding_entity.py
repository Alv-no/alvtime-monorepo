# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AmeldingEntity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sums': 'Sums',
        'employees': 'list[Employees]',
        'transaction_types': 'list[TransactionTypes]',
        'custom_values': 'CustomValues'
    }

    attribute_map = {
        'sums': 'sums',
        'employees': 'employees',
        'transaction_types': 'transactionTypes',
        'custom_values': 'CustomValues'
    }

    def __init__(self, sums=None, employees=None, transaction_types=None, custom_values=None):  # noqa: E501
        """AmeldingEntity - a model defined in Swagger"""  # noqa: E501
        self._sums = None
        self._employees = None
        self._transaction_types = None
        self._custom_values = None
        self.discriminator = None
        if sums is not None:
            self.sums = sums
        if employees is not None:
            self.employees = employees
        if transaction_types is not None:
            self.transaction_types = transaction_types
        if custom_values is not None:
            self.custom_values = custom_values

    @property
    def sums(self):
        """Gets the sums of this AmeldingEntity.  # noqa: E501


        :return: The sums of this AmeldingEntity.  # noqa: E501
        :rtype: Sums
        """
        return self._sums

    @sums.setter
    def sums(self, sums):
        """Sets the sums of this AmeldingEntity.


        :param sums: The sums of this AmeldingEntity.  # noqa: E501
        :type: Sums
        """

        self._sums = sums

    @property
    def employees(self):
        """Gets the employees of this AmeldingEntity.  # noqa: E501


        :return: The employees of this AmeldingEntity.  # noqa: E501
        :rtype: list[Employees]
        """
        return self._employees

    @employees.setter
    def employees(self, employees):
        """Sets the employees of this AmeldingEntity.


        :param employees: The employees of this AmeldingEntity.  # noqa: E501
        :type: list[Employees]
        """

        self._employees = employees

    @property
    def transaction_types(self):
        """Gets the transaction_types of this AmeldingEntity.  # noqa: E501


        :return: The transaction_types of this AmeldingEntity.  # noqa: E501
        :rtype: list[TransactionTypes]
        """
        return self._transaction_types

    @transaction_types.setter
    def transaction_types(self, transaction_types):
        """Sets the transaction_types of this AmeldingEntity.


        :param transaction_types: The transaction_types of this AmeldingEntity.  # noqa: E501
        :type: list[TransactionTypes]
        """

        self._transaction_types = transaction_types

    @property
    def custom_values(self):
        """Gets the custom_values of this AmeldingEntity.  # noqa: E501


        :return: The custom_values of this AmeldingEntity.  # noqa: E501
        :rtype: CustomValues
        """
        return self._custom_values

    @custom_values.setter
    def custom_values(self, custom_values):
        """Sets the custom_values of this AmeldingEntity.


        :param custom_values: The custom_values of this AmeldingEntity.  # noqa: E501
        :type: CustomValues
        """

        self._custom_values = custom_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AmeldingEntity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AmeldingEntity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
