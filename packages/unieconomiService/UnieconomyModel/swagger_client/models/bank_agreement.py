# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BankAgreement(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'order_name': 'str',
        'account_owner_org_number': 'str',
        'customer_name': 'str',
        'service_account_id': 'int',
        'account_owner_name': 'str',
        'order_mobile': 'str',
        'deleted': 'bool',
        'receipt_id': 'str',
        'service_id': 'str',
        'id': 'int',
        'order_email': 'str',
        'updated_by': 'str',
        'created_by': 'str',
        'customer_org_number': 'str',
        'company_id': 'int',
        'service_account': 'ServiceAccount',
        'company': 'Company',
        'services': 'list[BankService]',
        'custom_values': 'CustomValues'
    }

    attribute_map = {
        'order_name': 'OrderName',
        'account_owner_org_number': 'AccountOwnerOrgNumber',
        'customer_name': 'CustomerName',
        'service_account_id': 'ServiceAccountID',
        'account_owner_name': 'AccountOwnerName',
        'order_mobile': 'OrderMobile',
        'deleted': 'Deleted',
        'receipt_id': 'ReceiptID',
        'service_id': 'ServiceID',
        'id': 'ID',
        'order_email': 'OrderEmail',
        'updated_by': 'UpdatedBy',
        'created_by': 'CreatedBy',
        'customer_org_number': 'CustomerOrgNumber',
        'company_id': 'CompanyID',
        'service_account': 'ServiceAccount',
        'company': 'Company',
        'services': 'Services',
        'custom_values': 'CustomValues'
    }

    def __init__(self, order_name=None, account_owner_org_number=None, customer_name=None, service_account_id=None, account_owner_name=None, order_mobile=None, deleted=None, receipt_id=None, service_id=None, id=None, order_email=None, updated_by=None, created_by=None, customer_org_number=None, company_id=None, service_account=None, company=None, services=None, custom_values=None):  # noqa: E501
        """BankAgreement - a model defined in Swagger"""  # noqa: E501
        self._order_name = None
        self._account_owner_org_number = None
        self._customer_name = None
        self._service_account_id = None
        self._account_owner_name = None
        self._order_mobile = None
        self._deleted = None
        self._receipt_id = None
        self._service_id = None
        self._id = None
        self._order_email = None
        self._updated_by = None
        self._created_by = None
        self._customer_org_number = None
        self._company_id = None
        self._service_account = None
        self._company = None
        self._services = None
        self._custom_values = None
        self.discriminator = None
        if order_name is not None:
            self.order_name = order_name
        if account_owner_org_number is not None:
            self.account_owner_org_number = account_owner_org_number
        if customer_name is not None:
            self.customer_name = customer_name
        if service_account_id is not None:
            self.service_account_id = service_account_id
        if account_owner_name is not None:
            self.account_owner_name = account_owner_name
        if order_mobile is not None:
            self.order_mobile = order_mobile
        if deleted is not None:
            self.deleted = deleted
        if receipt_id is not None:
            self.receipt_id = receipt_id
        if service_id is not None:
            self.service_id = service_id
        if id is not None:
            self.id = id
        if order_email is not None:
            self.order_email = order_email
        if updated_by is not None:
            self.updated_by = updated_by
        if created_by is not None:
            self.created_by = created_by
        if customer_org_number is not None:
            self.customer_org_number = customer_org_number
        if company_id is not None:
            self.company_id = company_id
        if service_account is not None:
            self.service_account = service_account
        if company is not None:
            self.company = company
        if services is not None:
            self.services = services
        if custom_values is not None:
            self.custom_values = custom_values

    @property
    def order_name(self):
        """Gets the order_name of this BankAgreement.  # noqa: E501


        :return: The order_name of this BankAgreement.  # noqa: E501
        :rtype: str
        """
        return self._order_name

    @order_name.setter
    def order_name(self, order_name):
        """Sets the order_name of this BankAgreement.


        :param order_name: The order_name of this BankAgreement.  # noqa: E501
        :type: str
        """

        self._order_name = order_name

    @property
    def account_owner_org_number(self):
        """Gets the account_owner_org_number of this BankAgreement.  # noqa: E501


        :return: The account_owner_org_number of this BankAgreement.  # noqa: E501
        :rtype: str
        """
        return self._account_owner_org_number

    @account_owner_org_number.setter
    def account_owner_org_number(self, account_owner_org_number):
        """Sets the account_owner_org_number of this BankAgreement.


        :param account_owner_org_number: The account_owner_org_number of this BankAgreement.  # noqa: E501
        :type: str
        """

        self._account_owner_org_number = account_owner_org_number

    @property
    def customer_name(self):
        """Gets the customer_name of this BankAgreement.  # noqa: E501


        :return: The customer_name of this BankAgreement.  # noqa: E501
        :rtype: str
        """
        return self._customer_name

    @customer_name.setter
    def customer_name(self, customer_name):
        """Sets the customer_name of this BankAgreement.


        :param customer_name: The customer_name of this BankAgreement.  # noqa: E501
        :type: str
        """

        self._customer_name = customer_name

    @property
    def service_account_id(self):
        """Gets the service_account_id of this BankAgreement.  # noqa: E501


        :return: The service_account_id of this BankAgreement.  # noqa: E501
        :rtype: int
        """
        return self._service_account_id

    @service_account_id.setter
    def service_account_id(self, service_account_id):
        """Sets the service_account_id of this BankAgreement.


        :param service_account_id: The service_account_id of this BankAgreement.  # noqa: E501
        :type: int
        """

        self._service_account_id = service_account_id

    @property
    def account_owner_name(self):
        """Gets the account_owner_name of this BankAgreement.  # noqa: E501


        :return: The account_owner_name of this BankAgreement.  # noqa: E501
        :rtype: str
        """
        return self._account_owner_name

    @account_owner_name.setter
    def account_owner_name(self, account_owner_name):
        """Sets the account_owner_name of this BankAgreement.


        :param account_owner_name: The account_owner_name of this BankAgreement.  # noqa: E501
        :type: str
        """

        self._account_owner_name = account_owner_name

    @property
    def order_mobile(self):
        """Gets the order_mobile of this BankAgreement.  # noqa: E501


        :return: The order_mobile of this BankAgreement.  # noqa: E501
        :rtype: str
        """
        return self._order_mobile

    @order_mobile.setter
    def order_mobile(self, order_mobile):
        """Sets the order_mobile of this BankAgreement.


        :param order_mobile: The order_mobile of this BankAgreement.  # noqa: E501
        :type: str
        """

        self._order_mobile = order_mobile

    @property
    def deleted(self):
        """Gets the deleted of this BankAgreement.  # noqa: E501


        :return: The deleted of this BankAgreement.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this BankAgreement.


        :param deleted: The deleted of this BankAgreement.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def receipt_id(self):
        """Gets the receipt_id of this BankAgreement.  # noqa: E501


        :return: The receipt_id of this BankAgreement.  # noqa: E501
        :rtype: str
        """
        return self._receipt_id

    @receipt_id.setter
    def receipt_id(self, receipt_id):
        """Sets the receipt_id of this BankAgreement.


        :param receipt_id: The receipt_id of this BankAgreement.  # noqa: E501
        :type: str
        """

        self._receipt_id = receipt_id

    @property
    def service_id(self):
        """Gets the service_id of this BankAgreement.  # noqa: E501


        :return: The service_id of this BankAgreement.  # noqa: E501
        :rtype: str
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id):
        """Sets the service_id of this BankAgreement.


        :param service_id: The service_id of this BankAgreement.  # noqa: E501
        :type: str
        """

        self._service_id = service_id

    @property
    def id(self):
        """Gets the id of this BankAgreement.  # noqa: E501


        :return: The id of this BankAgreement.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BankAgreement.


        :param id: The id of this BankAgreement.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def order_email(self):
        """Gets the order_email of this BankAgreement.  # noqa: E501


        :return: The order_email of this BankAgreement.  # noqa: E501
        :rtype: str
        """
        return self._order_email

    @order_email.setter
    def order_email(self, order_email):
        """Sets the order_email of this BankAgreement.


        :param order_email: The order_email of this BankAgreement.  # noqa: E501
        :type: str
        """

        self._order_email = order_email

    @property
    def updated_by(self):
        """Gets the updated_by of this BankAgreement.  # noqa: E501


        :return: The updated_by of this BankAgreement.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this BankAgreement.


        :param updated_by: The updated_by of this BankAgreement.  # noqa: E501
        :type: str
        """

        self._updated_by = updated_by

    @property
    def created_by(self):
        """Gets the created_by of this BankAgreement.  # noqa: E501


        :return: The created_by of this BankAgreement.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this BankAgreement.


        :param created_by: The created_by of this BankAgreement.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def customer_org_number(self):
        """Gets the customer_org_number of this BankAgreement.  # noqa: E501


        :return: The customer_org_number of this BankAgreement.  # noqa: E501
        :rtype: str
        """
        return self._customer_org_number

    @customer_org_number.setter
    def customer_org_number(self, customer_org_number):
        """Sets the customer_org_number of this BankAgreement.


        :param customer_org_number: The customer_org_number of this BankAgreement.  # noqa: E501
        :type: str
        """

        self._customer_org_number = customer_org_number

    @property
    def company_id(self):
        """Gets the company_id of this BankAgreement.  # noqa: E501


        :return: The company_id of this BankAgreement.  # noqa: E501
        :rtype: int
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this BankAgreement.


        :param company_id: The company_id of this BankAgreement.  # noqa: E501
        :type: int
        """

        self._company_id = company_id

    @property
    def service_account(self):
        """Gets the service_account of this BankAgreement.  # noqa: E501


        :return: The service_account of this BankAgreement.  # noqa: E501
        :rtype: ServiceAccount
        """
        return self._service_account

    @service_account.setter
    def service_account(self, service_account):
        """Sets the service_account of this BankAgreement.


        :param service_account: The service_account of this BankAgreement.  # noqa: E501
        :type: ServiceAccount
        """

        self._service_account = service_account

    @property
    def company(self):
        """Gets the company of this BankAgreement.  # noqa: E501


        :return: The company of this BankAgreement.  # noqa: E501
        :rtype: Company
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this BankAgreement.


        :param company: The company of this BankAgreement.  # noqa: E501
        :type: Company
        """

        self._company = company

    @property
    def services(self):
        """Gets the services of this BankAgreement.  # noqa: E501


        :return: The services of this BankAgreement.  # noqa: E501
        :rtype: list[BankService]
        """
        return self._services

    @services.setter
    def services(self, services):
        """Sets the services of this BankAgreement.


        :param services: The services of this BankAgreement.  # noqa: E501
        :type: list[BankService]
        """

        self._services = services

    @property
    def custom_values(self):
        """Gets the custom_values of this BankAgreement.  # noqa: E501


        :return: The custom_values of this BankAgreement.  # noqa: E501
        :rtype: CustomValues
        """
        return self._custom_values

    @custom_values.setter
    def custom_values(self, custom_values):
        """Sets the custom_values of this BankAgreement.


        :param custom_values: The custom_values of this BankAgreement.  # noqa: E501
        :type: CustomValues
        """

        self._custom_values = custom_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BankAgreement, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BankAgreement):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
