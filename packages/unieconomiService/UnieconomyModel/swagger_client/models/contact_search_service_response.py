# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ContactSearchServiceResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'success': 'bool',
        'error_message': 'str',
        'error_code': 'int',
        'object_name': 'str',
        'method': 'str',
        'custom_values': 'CustomValues'
    }

    attribute_map = {
        'success': 'Success',
        'error_message': 'ErrorMessage',
        'error_code': 'ErrorCode',
        'object_name': 'ObjectName',
        'method': 'Method',
        'custom_values': 'CustomValues'
    }

    def __init__(self, success=None, error_message=None, error_code=None, object_name=None, method=None, custom_values=None):  # noqa: E501
        """ContactSearchServiceResponse - a model defined in Swagger"""  # noqa: E501
        self._success = None
        self._error_message = None
        self._error_code = None
        self._object_name = None
        self._method = None
        self._custom_values = None
        self.discriminator = None
        if success is not None:
            self.success = success
        if error_message is not None:
            self.error_message = error_message
        if error_code is not None:
            self.error_code = error_code
        if object_name is not None:
            self.object_name = object_name
        if method is not None:
            self.method = method
        if custom_values is not None:
            self.custom_values = custom_values

    @property
    def success(self):
        """Gets the success of this ContactSearchServiceResponse.  # noqa: E501


        :return: The success of this ContactSearchServiceResponse.  # noqa: E501
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this ContactSearchServiceResponse.


        :param success: The success of this ContactSearchServiceResponse.  # noqa: E501
        :type: bool
        """

        self._success = success

    @property
    def error_message(self):
        """Gets the error_message of this ContactSearchServiceResponse.  # noqa: E501


        :return: The error_message of this ContactSearchServiceResponse.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this ContactSearchServiceResponse.


        :param error_message: The error_message of this ContactSearchServiceResponse.  # noqa: E501
        :type: str
        """

        self._error_message = error_message

    @property
    def error_code(self):
        """Gets the error_code of this ContactSearchServiceResponse.  # noqa: E501


        :return: The error_code of this ContactSearchServiceResponse.  # noqa: E501
        :rtype: int
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this ContactSearchServiceResponse.


        :param error_code: The error_code of this ContactSearchServiceResponse.  # noqa: E501
        :type: int
        """

        self._error_code = error_code

    @property
    def object_name(self):
        """Gets the object_name of this ContactSearchServiceResponse.  # noqa: E501


        :return: The object_name of this ContactSearchServiceResponse.  # noqa: E501
        :rtype: str
        """
        return self._object_name

    @object_name.setter
    def object_name(self, object_name):
        """Sets the object_name of this ContactSearchServiceResponse.


        :param object_name: The object_name of this ContactSearchServiceResponse.  # noqa: E501
        :type: str
        """

        self._object_name = object_name

    @property
    def method(self):
        """Gets the method of this ContactSearchServiceResponse.  # noqa: E501


        :return: The method of this ContactSearchServiceResponse.  # noqa: E501
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this ContactSearchServiceResponse.


        :param method: The method of this ContactSearchServiceResponse.  # noqa: E501
        :type: str
        """

        self._method = method

    @property
    def custom_values(self):
        """Gets the custom_values of this ContactSearchServiceResponse.  # noqa: E501


        :return: The custom_values of this ContactSearchServiceResponse.  # noqa: E501
        :rtype: CustomValues
        """
        return self._custom_values

    @custom_values.setter
    def custom_values(self, custom_values):
        """Sets the custom_values of this ContactSearchServiceResponse.


        :param custom_values: The custom_values of this ContactSearchServiceResponse.  # noqa: E501
        :type: CustomValues
        """

        self._custom_values = custom_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ContactSearchServiceResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContactSearchServiceResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
