# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ReportRow(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_number': 'int',
        'account_year': 'int',
        'sub_group_number': 'int',
        'account_name': 'str',
        'group_name': 'str',
        'is_sub_total': 'bool',
        'id': 'int',
        'sub_group_name': 'str',
        'group_number': 'int',
        'custom_values': 'CustomValues'
    }

    attribute_map = {
        'account_number': 'AccountNumber',
        'account_year': 'AccountYear',
        'sub_group_number': 'SubGroupNumber',
        'account_name': 'AccountName',
        'group_name': 'GroupName',
        'is_sub_total': 'IsSubTotal',
        'id': 'ID',
        'sub_group_name': 'SubGroupName',
        'group_number': 'GroupNumber',
        'custom_values': 'CustomValues'
    }

    def __init__(self, account_number=None, account_year=None, sub_group_number=None, account_name=None, group_name=None, is_sub_total=None, id=None, sub_group_name=None, group_number=None, custom_values=None):  # noqa: E501
        """ReportRow - a model defined in Swagger"""  # noqa: E501
        self._account_number = None
        self._account_year = None
        self._sub_group_number = None
        self._account_name = None
        self._group_name = None
        self._is_sub_total = None
        self._id = None
        self._sub_group_name = None
        self._group_number = None
        self._custom_values = None
        self.discriminator = None
        if account_number is not None:
            self.account_number = account_number
        if account_year is not None:
            self.account_year = account_year
        if sub_group_number is not None:
            self.sub_group_number = sub_group_number
        if account_name is not None:
            self.account_name = account_name
        if group_name is not None:
            self.group_name = group_name
        if is_sub_total is not None:
            self.is_sub_total = is_sub_total
        if id is not None:
            self.id = id
        if sub_group_name is not None:
            self.sub_group_name = sub_group_name
        if group_number is not None:
            self.group_number = group_number
        if custom_values is not None:
            self.custom_values = custom_values

    @property
    def account_number(self):
        """Gets the account_number of this ReportRow.  # noqa: E501


        :return: The account_number of this ReportRow.  # noqa: E501
        :rtype: int
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this ReportRow.


        :param account_number: The account_number of this ReportRow.  # noqa: E501
        :type: int
        """

        self._account_number = account_number

    @property
    def account_year(self):
        """Gets the account_year of this ReportRow.  # noqa: E501


        :return: The account_year of this ReportRow.  # noqa: E501
        :rtype: int
        """
        return self._account_year

    @account_year.setter
    def account_year(self, account_year):
        """Sets the account_year of this ReportRow.


        :param account_year: The account_year of this ReportRow.  # noqa: E501
        :type: int
        """

        self._account_year = account_year

    @property
    def sub_group_number(self):
        """Gets the sub_group_number of this ReportRow.  # noqa: E501


        :return: The sub_group_number of this ReportRow.  # noqa: E501
        :rtype: int
        """
        return self._sub_group_number

    @sub_group_number.setter
    def sub_group_number(self, sub_group_number):
        """Sets the sub_group_number of this ReportRow.


        :param sub_group_number: The sub_group_number of this ReportRow.  # noqa: E501
        :type: int
        """

        self._sub_group_number = sub_group_number

    @property
    def account_name(self):
        """Gets the account_name of this ReportRow.  # noqa: E501


        :return: The account_name of this ReportRow.  # noqa: E501
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this ReportRow.


        :param account_name: The account_name of this ReportRow.  # noqa: E501
        :type: str
        """

        self._account_name = account_name

    @property
    def group_name(self):
        """Gets the group_name of this ReportRow.  # noqa: E501


        :return: The group_name of this ReportRow.  # noqa: E501
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this ReportRow.


        :param group_name: The group_name of this ReportRow.  # noqa: E501
        :type: str
        """

        self._group_name = group_name

    @property
    def is_sub_total(self):
        """Gets the is_sub_total of this ReportRow.  # noqa: E501


        :return: The is_sub_total of this ReportRow.  # noqa: E501
        :rtype: bool
        """
        return self._is_sub_total

    @is_sub_total.setter
    def is_sub_total(self, is_sub_total):
        """Sets the is_sub_total of this ReportRow.


        :param is_sub_total: The is_sub_total of this ReportRow.  # noqa: E501
        :type: bool
        """

        self._is_sub_total = is_sub_total

    @property
    def id(self):
        """Gets the id of this ReportRow.  # noqa: E501


        :return: The id of this ReportRow.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ReportRow.


        :param id: The id of this ReportRow.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def sub_group_name(self):
        """Gets the sub_group_name of this ReportRow.  # noqa: E501


        :return: The sub_group_name of this ReportRow.  # noqa: E501
        :rtype: str
        """
        return self._sub_group_name

    @sub_group_name.setter
    def sub_group_name(self, sub_group_name):
        """Sets the sub_group_name of this ReportRow.


        :param sub_group_name: The sub_group_name of this ReportRow.  # noqa: E501
        :type: str
        """

        self._sub_group_name = sub_group_name

    @property
    def group_number(self):
        """Gets the group_number of this ReportRow.  # noqa: E501


        :return: The group_number of this ReportRow.  # noqa: E501
        :rtype: int
        """
        return self._group_number

    @group_number.setter
    def group_number(self, group_number):
        """Sets the group_number of this ReportRow.


        :param group_number: The group_number of this ReportRow.  # noqa: E501
        :type: int
        """

        self._group_number = group_number

    @property
    def custom_values(self):
        """Gets the custom_values of this ReportRow.  # noqa: E501


        :return: The custom_values of this ReportRow.  # noqa: E501
        :rtype: CustomValues
        """
        return self._custom_values

    @custom_values.setter
    def custom_values(self, custom_values):
        """Sets the custom_values of this ReportRow.


        :param custom_values: The custom_values of this ReportRow.  # noqa: E501
        :type: CustomValues
        """

        self._custom_values = custom_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReportRow, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportRow):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
