# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InvoicePaymentData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bank_charge_account_id': 'int',
        'account_id': 'int',
        'dimensions_id': 'int',
        'from_bank_account_id': 'int',
        'agio_account_id': 'int',
        'payment_id': 'str',
        'currency_code_id': 'int',
        'custom_values': 'CustomValues'
    }

    attribute_map = {
        'bank_charge_account_id': 'BankChargeAccountID',
        'account_id': 'AccountID',
        'dimensions_id': 'DimensionsID',
        'from_bank_account_id': 'FromBankAccountID',
        'agio_account_id': 'AgioAccountID',
        'payment_id': 'PaymentID',
        'currency_code_id': 'CurrencyCodeID',
        'custom_values': 'CustomValues'
    }

    def __init__(self, bank_charge_account_id=None, account_id=None, dimensions_id=None, from_bank_account_id=None, agio_account_id=None, payment_id=None, currency_code_id=None, custom_values=None):  # noqa: E501
        """InvoicePaymentData - a model defined in Swagger"""  # noqa: E501
        self._bank_charge_account_id = None
        self._account_id = None
        self._dimensions_id = None
        self._from_bank_account_id = None
        self._agio_account_id = None
        self._payment_id = None
        self._currency_code_id = None
        self._custom_values = None
        self.discriminator = None
        if bank_charge_account_id is not None:
            self.bank_charge_account_id = bank_charge_account_id
        if account_id is not None:
            self.account_id = account_id
        if dimensions_id is not None:
            self.dimensions_id = dimensions_id
        if from_bank_account_id is not None:
            self.from_bank_account_id = from_bank_account_id
        if agio_account_id is not None:
            self.agio_account_id = agio_account_id
        if payment_id is not None:
            self.payment_id = payment_id
        if currency_code_id is not None:
            self.currency_code_id = currency_code_id
        if custom_values is not None:
            self.custom_values = custom_values

    @property
    def bank_charge_account_id(self):
        """Gets the bank_charge_account_id of this InvoicePaymentData.  # noqa: E501


        :return: The bank_charge_account_id of this InvoicePaymentData.  # noqa: E501
        :rtype: int
        """
        return self._bank_charge_account_id

    @bank_charge_account_id.setter
    def bank_charge_account_id(self, bank_charge_account_id):
        """Sets the bank_charge_account_id of this InvoicePaymentData.


        :param bank_charge_account_id: The bank_charge_account_id of this InvoicePaymentData.  # noqa: E501
        :type: int
        """

        self._bank_charge_account_id = bank_charge_account_id

    @property
    def account_id(self):
        """Gets the account_id of this InvoicePaymentData.  # noqa: E501


        :return: The account_id of this InvoicePaymentData.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this InvoicePaymentData.


        :param account_id: The account_id of this InvoicePaymentData.  # noqa: E501
        :type: int
        """

        self._account_id = account_id

    @property
    def dimensions_id(self):
        """Gets the dimensions_id of this InvoicePaymentData.  # noqa: E501


        :return: The dimensions_id of this InvoicePaymentData.  # noqa: E501
        :rtype: int
        """
        return self._dimensions_id

    @dimensions_id.setter
    def dimensions_id(self, dimensions_id):
        """Sets the dimensions_id of this InvoicePaymentData.


        :param dimensions_id: The dimensions_id of this InvoicePaymentData.  # noqa: E501
        :type: int
        """

        self._dimensions_id = dimensions_id

    @property
    def from_bank_account_id(self):
        """Gets the from_bank_account_id of this InvoicePaymentData.  # noqa: E501


        :return: The from_bank_account_id of this InvoicePaymentData.  # noqa: E501
        :rtype: int
        """
        return self._from_bank_account_id

    @from_bank_account_id.setter
    def from_bank_account_id(self, from_bank_account_id):
        """Sets the from_bank_account_id of this InvoicePaymentData.


        :param from_bank_account_id: The from_bank_account_id of this InvoicePaymentData.  # noqa: E501
        :type: int
        """

        self._from_bank_account_id = from_bank_account_id

    @property
    def agio_account_id(self):
        """Gets the agio_account_id of this InvoicePaymentData.  # noqa: E501


        :return: The agio_account_id of this InvoicePaymentData.  # noqa: E501
        :rtype: int
        """
        return self._agio_account_id

    @agio_account_id.setter
    def agio_account_id(self, agio_account_id):
        """Sets the agio_account_id of this InvoicePaymentData.


        :param agio_account_id: The agio_account_id of this InvoicePaymentData.  # noqa: E501
        :type: int
        """

        self._agio_account_id = agio_account_id

    @property
    def payment_id(self):
        """Gets the payment_id of this InvoicePaymentData.  # noqa: E501


        :return: The payment_id of this InvoicePaymentData.  # noqa: E501
        :rtype: str
        """
        return self._payment_id

    @payment_id.setter
    def payment_id(self, payment_id):
        """Sets the payment_id of this InvoicePaymentData.


        :param payment_id: The payment_id of this InvoicePaymentData.  # noqa: E501
        :type: str
        """

        self._payment_id = payment_id

    @property
    def currency_code_id(self):
        """Gets the currency_code_id of this InvoicePaymentData.  # noqa: E501


        :return: The currency_code_id of this InvoicePaymentData.  # noqa: E501
        :rtype: int
        """
        return self._currency_code_id

    @currency_code_id.setter
    def currency_code_id(self, currency_code_id):
        """Sets the currency_code_id of this InvoicePaymentData.


        :param currency_code_id: The currency_code_id of this InvoicePaymentData.  # noqa: E501
        :type: int
        """

        self._currency_code_id = currency_code_id

    @property
    def custom_values(self):
        """Gets the custom_values of this InvoicePaymentData.  # noqa: E501


        :return: The custom_values of this InvoicePaymentData.  # noqa: E501
        :rtype: CustomValues
        """
        return self._custom_values

    @custom_values.setter
    def custom_values(self, custom_values):
        """Sets the custom_values of this InvoicePaymentData.


        :param custom_values: The custom_values of this InvoicePaymentData.  # noqa: E501
        :type: CustomValues
        """

        self._custom_values = custom_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InvoicePaymentData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InvoicePaymentData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
