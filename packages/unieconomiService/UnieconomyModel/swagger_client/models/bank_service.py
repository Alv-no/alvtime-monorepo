# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BankService(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'kid_rule': 'str',
        'division_name': 'str',
        'deleted': 'bool',
        'file_type': 'str',
        'id': 'int',
        'division_id': 'int',
        'updated_by': 'str',
        'confirm_in_netbank': 'bool',
        'bank_agreement_id': 'int',
        'created_by': 'str',
        'service_type': 'int',
        'bank_agreement': 'BankAgreement',
        'bank_accounts': 'list[BankServiceBankAccount]',
        'custom_values': 'CustomValues'
    }

    attribute_map = {
        'kid_rule': 'KidRule',
        'division_name': 'DivisionName',
        'deleted': 'Deleted',
        'file_type': 'FileType',
        'id': 'ID',
        'division_id': 'DivisionID',
        'updated_by': 'UpdatedBy',
        'confirm_in_netbank': 'ConfirmInNetbank',
        'bank_agreement_id': 'BankAgreementID',
        'created_by': 'CreatedBy',
        'service_type': 'ServiceType',
        'bank_agreement': 'BankAgreement',
        'bank_accounts': 'BankAccounts',
        'custom_values': 'CustomValues'
    }

    def __init__(self, kid_rule=None, division_name=None, deleted=None, file_type=None, id=None, division_id=None, updated_by=None, confirm_in_netbank=None, bank_agreement_id=None, created_by=None, service_type=None, bank_agreement=None, bank_accounts=None, custom_values=None):  # noqa: E501
        """BankService - a model defined in Swagger"""  # noqa: E501
        self._kid_rule = None
        self._division_name = None
        self._deleted = None
        self._file_type = None
        self._id = None
        self._division_id = None
        self._updated_by = None
        self._confirm_in_netbank = None
        self._bank_agreement_id = None
        self._created_by = None
        self._service_type = None
        self._bank_agreement = None
        self._bank_accounts = None
        self._custom_values = None
        self.discriminator = None
        if kid_rule is not None:
            self.kid_rule = kid_rule
        if division_name is not None:
            self.division_name = division_name
        if deleted is not None:
            self.deleted = deleted
        if file_type is not None:
            self.file_type = file_type
        if id is not None:
            self.id = id
        if division_id is not None:
            self.division_id = division_id
        if updated_by is not None:
            self.updated_by = updated_by
        if confirm_in_netbank is not None:
            self.confirm_in_netbank = confirm_in_netbank
        if bank_agreement_id is not None:
            self.bank_agreement_id = bank_agreement_id
        if created_by is not None:
            self.created_by = created_by
        if service_type is not None:
            self.service_type = service_type
        if bank_agreement is not None:
            self.bank_agreement = bank_agreement
        if bank_accounts is not None:
            self.bank_accounts = bank_accounts
        if custom_values is not None:
            self.custom_values = custom_values

    @property
    def kid_rule(self):
        """Gets the kid_rule of this BankService.  # noqa: E501


        :return: The kid_rule of this BankService.  # noqa: E501
        :rtype: str
        """
        return self._kid_rule

    @kid_rule.setter
    def kid_rule(self, kid_rule):
        """Sets the kid_rule of this BankService.


        :param kid_rule: The kid_rule of this BankService.  # noqa: E501
        :type: str
        """

        self._kid_rule = kid_rule

    @property
    def division_name(self):
        """Gets the division_name of this BankService.  # noqa: E501


        :return: The division_name of this BankService.  # noqa: E501
        :rtype: str
        """
        return self._division_name

    @division_name.setter
    def division_name(self, division_name):
        """Sets the division_name of this BankService.


        :param division_name: The division_name of this BankService.  # noqa: E501
        :type: str
        """

        self._division_name = division_name

    @property
    def deleted(self):
        """Gets the deleted of this BankService.  # noqa: E501


        :return: The deleted of this BankService.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this BankService.


        :param deleted: The deleted of this BankService.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def file_type(self):
        """Gets the file_type of this BankService.  # noqa: E501


        :return: The file_type of this BankService.  # noqa: E501
        :rtype: str
        """
        return self._file_type

    @file_type.setter
    def file_type(self, file_type):
        """Sets the file_type of this BankService.


        :param file_type: The file_type of this BankService.  # noqa: E501
        :type: str
        """

        self._file_type = file_type

    @property
    def id(self):
        """Gets the id of this BankService.  # noqa: E501


        :return: The id of this BankService.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BankService.


        :param id: The id of this BankService.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def division_id(self):
        """Gets the division_id of this BankService.  # noqa: E501


        :return: The division_id of this BankService.  # noqa: E501
        :rtype: int
        """
        return self._division_id

    @division_id.setter
    def division_id(self, division_id):
        """Sets the division_id of this BankService.


        :param division_id: The division_id of this BankService.  # noqa: E501
        :type: int
        """

        self._division_id = division_id

    @property
    def updated_by(self):
        """Gets the updated_by of this BankService.  # noqa: E501


        :return: The updated_by of this BankService.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this BankService.


        :param updated_by: The updated_by of this BankService.  # noqa: E501
        :type: str
        """

        self._updated_by = updated_by

    @property
    def confirm_in_netbank(self):
        """Gets the confirm_in_netbank of this BankService.  # noqa: E501


        :return: The confirm_in_netbank of this BankService.  # noqa: E501
        :rtype: bool
        """
        return self._confirm_in_netbank

    @confirm_in_netbank.setter
    def confirm_in_netbank(self, confirm_in_netbank):
        """Sets the confirm_in_netbank of this BankService.


        :param confirm_in_netbank: The confirm_in_netbank of this BankService.  # noqa: E501
        :type: bool
        """

        self._confirm_in_netbank = confirm_in_netbank

    @property
    def bank_agreement_id(self):
        """Gets the bank_agreement_id of this BankService.  # noqa: E501


        :return: The bank_agreement_id of this BankService.  # noqa: E501
        :rtype: int
        """
        return self._bank_agreement_id

    @bank_agreement_id.setter
    def bank_agreement_id(self, bank_agreement_id):
        """Sets the bank_agreement_id of this BankService.


        :param bank_agreement_id: The bank_agreement_id of this BankService.  # noqa: E501
        :type: int
        """

        self._bank_agreement_id = bank_agreement_id

    @property
    def created_by(self):
        """Gets the created_by of this BankService.  # noqa: E501


        :return: The created_by of this BankService.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this BankService.


        :param created_by: The created_by of this BankService.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def service_type(self):
        """Gets the service_type of this BankService.  # noqa: E501


        :return: The service_type of this BankService.  # noqa: E501
        :rtype: int
        """
        return self._service_type

    @service_type.setter
    def service_type(self, service_type):
        """Sets the service_type of this BankService.


        :param service_type: The service_type of this BankService.  # noqa: E501
        :type: int
        """

        self._service_type = service_type

    @property
    def bank_agreement(self):
        """Gets the bank_agreement of this BankService.  # noqa: E501


        :return: The bank_agreement of this BankService.  # noqa: E501
        :rtype: BankAgreement
        """
        return self._bank_agreement

    @bank_agreement.setter
    def bank_agreement(self, bank_agreement):
        """Sets the bank_agreement of this BankService.


        :param bank_agreement: The bank_agreement of this BankService.  # noqa: E501
        :type: BankAgreement
        """

        self._bank_agreement = bank_agreement

    @property
    def bank_accounts(self):
        """Gets the bank_accounts of this BankService.  # noqa: E501


        :return: The bank_accounts of this BankService.  # noqa: E501
        :rtype: list[BankServiceBankAccount]
        """
        return self._bank_accounts

    @bank_accounts.setter
    def bank_accounts(self, bank_accounts):
        """Sets the bank_accounts of this BankService.


        :param bank_accounts: The bank_accounts of this BankService.  # noqa: E501
        :type: list[BankServiceBankAccount]
        """

        self._bank_accounts = bank_accounts

    @property
    def custom_values(self):
        """Gets the custom_values of this BankService.  # noqa: E501


        :return: The custom_values of this BankService.  # noqa: E501
        :rtype: CustomValues
        """
        return self._custom_values

    @custom_values.setter
    def custom_values(self, custom_values):
        """Sets the custom_values of this BankService.


        :param custom_values: The custom_values of this BankService.  # noqa: E501
        :type: CustomValues
        """

        self._custom_values = custom_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BankService, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BankService):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
