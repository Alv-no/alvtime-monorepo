# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BankIntegrationAgreement(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'email': 'str',
        'name': 'str',
        'default_agreement': 'bool',
        'status_code': 'int',
        'deleted': 'bool',
        'properties_json': 'str',
        'bank_account_id': 'int',
        'service_template_id': 'str',
        'service_id': 'str',
        'id': 'int',
        'bank_acceptance': 'bool',
        'is_inbound': 'bool',
        'service_provider': 'int',
        'has_ordered_integration_change': 'bool',
        'has_new_account_information': 'bool',
        'updated_by': 'str',
        'is_bank_balance': 'bool',
        'created_by': 'str',
        'is_outgoing': 'bool',
        'bank_account': 'BankAccount',
        'custom_values': 'CustomValues'
    }

    attribute_map = {
        'email': 'Email',
        'name': 'Name',
        'default_agreement': 'DefaultAgreement',
        'status_code': 'StatusCode',
        'deleted': 'Deleted',
        'properties_json': 'PropertiesJson',
        'bank_account_id': 'BankAccountID',
        'service_template_id': 'ServiceTemplateID',
        'service_id': 'ServiceID',
        'id': 'ID',
        'bank_acceptance': 'BankAcceptance',
        'is_inbound': 'IsInbound',
        'service_provider': 'ServiceProvider',
        'has_ordered_integration_change': 'HasOrderedIntegrationChange',
        'has_new_account_information': 'HasNewAccountInformation',
        'updated_by': 'UpdatedBy',
        'is_bank_balance': 'IsBankBalance',
        'created_by': 'CreatedBy',
        'is_outgoing': 'IsOutgoing',
        'bank_account': 'BankAccount',
        'custom_values': 'CustomValues'
    }

    def __init__(self, email=None, name=None, default_agreement=None, status_code=None, deleted=None, properties_json=None, bank_account_id=None, service_template_id=None, service_id=None, id=None, bank_acceptance=None, is_inbound=None, service_provider=None, has_ordered_integration_change=None, has_new_account_information=None, updated_by=None, is_bank_balance=None, created_by=None, is_outgoing=None, bank_account=None, custom_values=None):  # noqa: E501
        """BankIntegrationAgreement - a model defined in Swagger"""  # noqa: E501
        self._email = None
        self._name = None
        self._default_agreement = None
        self._status_code = None
        self._deleted = None
        self._properties_json = None
        self._bank_account_id = None
        self._service_template_id = None
        self._service_id = None
        self._id = None
        self._bank_acceptance = None
        self._is_inbound = None
        self._service_provider = None
        self._has_ordered_integration_change = None
        self._has_new_account_information = None
        self._updated_by = None
        self._is_bank_balance = None
        self._created_by = None
        self._is_outgoing = None
        self._bank_account = None
        self._custom_values = None
        self.discriminator = None
        if email is not None:
            self.email = email
        if name is not None:
            self.name = name
        if default_agreement is not None:
            self.default_agreement = default_agreement
        if status_code is not None:
            self.status_code = status_code
        if deleted is not None:
            self.deleted = deleted
        if properties_json is not None:
            self.properties_json = properties_json
        if bank_account_id is not None:
            self.bank_account_id = bank_account_id
        if service_template_id is not None:
            self.service_template_id = service_template_id
        if service_id is not None:
            self.service_id = service_id
        if id is not None:
            self.id = id
        if bank_acceptance is not None:
            self.bank_acceptance = bank_acceptance
        if is_inbound is not None:
            self.is_inbound = is_inbound
        if service_provider is not None:
            self.service_provider = service_provider
        if has_ordered_integration_change is not None:
            self.has_ordered_integration_change = has_ordered_integration_change
        if has_new_account_information is not None:
            self.has_new_account_information = has_new_account_information
        if updated_by is not None:
            self.updated_by = updated_by
        if is_bank_balance is not None:
            self.is_bank_balance = is_bank_balance
        if created_by is not None:
            self.created_by = created_by
        if is_outgoing is not None:
            self.is_outgoing = is_outgoing
        if bank_account is not None:
            self.bank_account = bank_account
        if custom_values is not None:
            self.custom_values = custom_values

    @property
    def email(self):
        """Gets the email of this BankIntegrationAgreement.  # noqa: E501


        :return: The email of this BankIntegrationAgreement.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this BankIntegrationAgreement.


        :param email: The email of this BankIntegrationAgreement.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def name(self):
        """Gets the name of this BankIntegrationAgreement.  # noqa: E501


        :return: The name of this BankIntegrationAgreement.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BankIntegrationAgreement.


        :param name: The name of this BankIntegrationAgreement.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def default_agreement(self):
        """Gets the default_agreement of this BankIntegrationAgreement.  # noqa: E501


        :return: The default_agreement of this BankIntegrationAgreement.  # noqa: E501
        :rtype: bool
        """
        return self._default_agreement

    @default_agreement.setter
    def default_agreement(self, default_agreement):
        """Sets the default_agreement of this BankIntegrationAgreement.


        :param default_agreement: The default_agreement of this BankIntegrationAgreement.  # noqa: E501
        :type: bool
        """

        self._default_agreement = default_agreement

    @property
    def status_code(self):
        """Gets the status_code of this BankIntegrationAgreement.  # noqa: E501


        :return: The status_code of this BankIntegrationAgreement.  # noqa: E501
        :rtype: int
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this BankIntegrationAgreement.


        :param status_code: The status_code of this BankIntegrationAgreement.  # noqa: E501
        :type: int
        """

        self._status_code = status_code

    @property
    def deleted(self):
        """Gets the deleted of this BankIntegrationAgreement.  # noqa: E501


        :return: The deleted of this BankIntegrationAgreement.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this BankIntegrationAgreement.


        :param deleted: The deleted of this BankIntegrationAgreement.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def properties_json(self):
        """Gets the properties_json of this BankIntegrationAgreement.  # noqa: E501


        :return: The properties_json of this BankIntegrationAgreement.  # noqa: E501
        :rtype: str
        """
        return self._properties_json

    @properties_json.setter
    def properties_json(self, properties_json):
        """Sets the properties_json of this BankIntegrationAgreement.


        :param properties_json: The properties_json of this BankIntegrationAgreement.  # noqa: E501
        :type: str
        """

        self._properties_json = properties_json

    @property
    def bank_account_id(self):
        """Gets the bank_account_id of this BankIntegrationAgreement.  # noqa: E501


        :return: The bank_account_id of this BankIntegrationAgreement.  # noqa: E501
        :rtype: int
        """
        return self._bank_account_id

    @bank_account_id.setter
    def bank_account_id(self, bank_account_id):
        """Sets the bank_account_id of this BankIntegrationAgreement.


        :param bank_account_id: The bank_account_id of this BankIntegrationAgreement.  # noqa: E501
        :type: int
        """

        self._bank_account_id = bank_account_id

    @property
    def service_template_id(self):
        """Gets the service_template_id of this BankIntegrationAgreement.  # noqa: E501


        :return: The service_template_id of this BankIntegrationAgreement.  # noqa: E501
        :rtype: str
        """
        return self._service_template_id

    @service_template_id.setter
    def service_template_id(self, service_template_id):
        """Sets the service_template_id of this BankIntegrationAgreement.


        :param service_template_id: The service_template_id of this BankIntegrationAgreement.  # noqa: E501
        :type: str
        """

        self._service_template_id = service_template_id

    @property
    def service_id(self):
        """Gets the service_id of this BankIntegrationAgreement.  # noqa: E501


        :return: The service_id of this BankIntegrationAgreement.  # noqa: E501
        :rtype: str
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id):
        """Sets the service_id of this BankIntegrationAgreement.


        :param service_id: The service_id of this BankIntegrationAgreement.  # noqa: E501
        :type: str
        """

        self._service_id = service_id

    @property
    def id(self):
        """Gets the id of this BankIntegrationAgreement.  # noqa: E501


        :return: The id of this BankIntegrationAgreement.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BankIntegrationAgreement.


        :param id: The id of this BankIntegrationAgreement.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def bank_acceptance(self):
        """Gets the bank_acceptance of this BankIntegrationAgreement.  # noqa: E501


        :return: The bank_acceptance of this BankIntegrationAgreement.  # noqa: E501
        :rtype: bool
        """
        return self._bank_acceptance

    @bank_acceptance.setter
    def bank_acceptance(self, bank_acceptance):
        """Sets the bank_acceptance of this BankIntegrationAgreement.


        :param bank_acceptance: The bank_acceptance of this BankIntegrationAgreement.  # noqa: E501
        :type: bool
        """

        self._bank_acceptance = bank_acceptance

    @property
    def is_inbound(self):
        """Gets the is_inbound of this BankIntegrationAgreement.  # noqa: E501


        :return: The is_inbound of this BankIntegrationAgreement.  # noqa: E501
        :rtype: bool
        """
        return self._is_inbound

    @is_inbound.setter
    def is_inbound(self, is_inbound):
        """Sets the is_inbound of this BankIntegrationAgreement.


        :param is_inbound: The is_inbound of this BankIntegrationAgreement.  # noqa: E501
        :type: bool
        """

        self._is_inbound = is_inbound

    @property
    def service_provider(self):
        """Gets the service_provider of this BankIntegrationAgreement.  # noqa: E501


        :return: The service_provider of this BankIntegrationAgreement.  # noqa: E501
        :rtype: int
        """
        return self._service_provider

    @service_provider.setter
    def service_provider(self, service_provider):
        """Sets the service_provider of this BankIntegrationAgreement.


        :param service_provider: The service_provider of this BankIntegrationAgreement.  # noqa: E501
        :type: int
        """

        self._service_provider = service_provider

    @property
    def has_ordered_integration_change(self):
        """Gets the has_ordered_integration_change of this BankIntegrationAgreement.  # noqa: E501


        :return: The has_ordered_integration_change of this BankIntegrationAgreement.  # noqa: E501
        :rtype: bool
        """
        return self._has_ordered_integration_change

    @has_ordered_integration_change.setter
    def has_ordered_integration_change(self, has_ordered_integration_change):
        """Sets the has_ordered_integration_change of this BankIntegrationAgreement.


        :param has_ordered_integration_change: The has_ordered_integration_change of this BankIntegrationAgreement.  # noqa: E501
        :type: bool
        """

        self._has_ordered_integration_change = has_ordered_integration_change

    @property
    def has_new_account_information(self):
        """Gets the has_new_account_information of this BankIntegrationAgreement.  # noqa: E501


        :return: The has_new_account_information of this BankIntegrationAgreement.  # noqa: E501
        :rtype: bool
        """
        return self._has_new_account_information

    @has_new_account_information.setter
    def has_new_account_information(self, has_new_account_information):
        """Sets the has_new_account_information of this BankIntegrationAgreement.


        :param has_new_account_information: The has_new_account_information of this BankIntegrationAgreement.  # noqa: E501
        :type: bool
        """

        self._has_new_account_information = has_new_account_information

    @property
    def updated_by(self):
        """Gets the updated_by of this BankIntegrationAgreement.  # noqa: E501


        :return: The updated_by of this BankIntegrationAgreement.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this BankIntegrationAgreement.


        :param updated_by: The updated_by of this BankIntegrationAgreement.  # noqa: E501
        :type: str
        """

        self._updated_by = updated_by

    @property
    def is_bank_balance(self):
        """Gets the is_bank_balance of this BankIntegrationAgreement.  # noqa: E501


        :return: The is_bank_balance of this BankIntegrationAgreement.  # noqa: E501
        :rtype: bool
        """
        return self._is_bank_balance

    @is_bank_balance.setter
    def is_bank_balance(self, is_bank_balance):
        """Sets the is_bank_balance of this BankIntegrationAgreement.


        :param is_bank_balance: The is_bank_balance of this BankIntegrationAgreement.  # noqa: E501
        :type: bool
        """

        self._is_bank_balance = is_bank_balance

    @property
    def created_by(self):
        """Gets the created_by of this BankIntegrationAgreement.  # noqa: E501


        :return: The created_by of this BankIntegrationAgreement.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this BankIntegrationAgreement.


        :param created_by: The created_by of this BankIntegrationAgreement.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def is_outgoing(self):
        """Gets the is_outgoing of this BankIntegrationAgreement.  # noqa: E501


        :return: The is_outgoing of this BankIntegrationAgreement.  # noqa: E501
        :rtype: bool
        """
        return self._is_outgoing

    @is_outgoing.setter
    def is_outgoing(self, is_outgoing):
        """Sets the is_outgoing of this BankIntegrationAgreement.


        :param is_outgoing: The is_outgoing of this BankIntegrationAgreement.  # noqa: E501
        :type: bool
        """

        self._is_outgoing = is_outgoing

    @property
    def bank_account(self):
        """Gets the bank_account of this BankIntegrationAgreement.  # noqa: E501


        :return: The bank_account of this BankIntegrationAgreement.  # noqa: E501
        :rtype: BankAccount
        """
        return self._bank_account

    @bank_account.setter
    def bank_account(self, bank_account):
        """Sets the bank_account of this BankIntegrationAgreement.


        :param bank_account: The bank_account of this BankIntegrationAgreement.  # noqa: E501
        :type: BankAccount
        """

        self._bank_account = bank_account

    @property
    def custom_values(self):
        """Gets the custom_values of this BankIntegrationAgreement.  # noqa: E501


        :return: The custom_values of this BankIntegrationAgreement.  # noqa: E501
        :rtype: CustomValues
        """
        return self._custom_values

    @custom_values.setter
    def custom_values(self, custom_values):
        """Sets the custom_values of this BankIntegrationAgreement.


        :param custom_values: The custom_values of this BankIntegrationAgreement.  # noqa: E501
        :type: CustomValues
        """

        self._custom_values = custom_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BankIntegrationAgreement, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BankIntegrationAgreement):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
