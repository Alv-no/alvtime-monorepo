# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class VatReportSummaryPerPost(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_historic_data': 'bool',
        'has_tax_amount': 'bool',
        'vat_code_group_no': 'str',
        'has_tax_basis': 'bool',
        'vat_post_report_as_negative_amount': 'bool',
        'vat_code_group_name': 'str',
        'vat_post_no': 'str',
        'number_of_journal_entry_lines': 'int',
        'vat_post_name': 'str',
        'vat_code_group_id': 'int',
        'vat_post_id': 'int',
        'custom_values': 'CustomValues'
    }

    attribute_map = {
        'is_historic_data': 'IsHistoricData',
        'has_tax_amount': 'HasTaxAmount',
        'vat_code_group_no': 'VatCodeGroupNo',
        'has_tax_basis': 'HasTaxBasis',
        'vat_post_report_as_negative_amount': 'VatPostReportAsNegativeAmount',
        'vat_code_group_name': 'VatCodeGroupName',
        'vat_post_no': 'VatPostNo',
        'number_of_journal_entry_lines': 'NumberOfJournalEntryLines',
        'vat_post_name': 'VatPostName',
        'vat_code_group_id': 'VatCodeGroupID',
        'vat_post_id': 'VatPostID',
        'custom_values': 'CustomValues'
    }

    def __init__(self, is_historic_data=None, has_tax_amount=None, vat_code_group_no=None, has_tax_basis=None, vat_post_report_as_negative_amount=None, vat_code_group_name=None, vat_post_no=None, number_of_journal_entry_lines=None, vat_post_name=None, vat_code_group_id=None, vat_post_id=None, custom_values=None):  # noqa: E501
        """VatReportSummaryPerPost - a model defined in Swagger"""  # noqa: E501
        self._is_historic_data = None
        self._has_tax_amount = None
        self._vat_code_group_no = None
        self._has_tax_basis = None
        self._vat_post_report_as_negative_amount = None
        self._vat_code_group_name = None
        self._vat_post_no = None
        self._number_of_journal_entry_lines = None
        self._vat_post_name = None
        self._vat_code_group_id = None
        self._vat_post_id = None
        self._custom_values = None
        self.discriminator = None
        if is_historic_data is not None:
            self.is_historic_data = is_historic_data
        if has_tax_amount is not None:
            self.has_tax_amount = has_tax_amount
        if vat_code_group_no is not None:
            self.vat_code_group_no = vat_code_group_no
        if has_tax_basis is not None:
            self.has_tax_basis = has_tax_basis
        if vat_post_report_as_negative_amount is not None:
            self.vat_post_report_as_negative_amount = vat_post_report_as_negative_amount
        if vat_code_group_name is not None:
            self.vat_code_group_name = vat_code_group_name
        if vat_post_no is not None:
            self.vat_post_no = vat_post_no
        if number_of_journal_entry_lines is not None:
            self.number_of_journal_entry_lines = number_of_journal_entry_lines
        if vat_post_name is not None:
            self.vat_post_name = vat_post_name
        if vat_code_group_id is not None:
            self.vat_code_group_id = vat_code_group_id
        if vat_post_id is not None:
            self.vat_post_id = vat_post_id
        if custom_values is not None:
            self.custom_values = custom_values

    @property
    def is_historic_data(self):
        """Gets the is_historic_data of this VatReportSummaryPerPost.  # noqa: E501


        :return: The is_historic_data of this VatReportSummaryPerPost.  # noqa: E501
        :rtype: bool
        """
        return self._is_historic_data

    @is_historic_data.setter
    def is_historic_data(self, is_historic_data):
        """Sets the is_historic_data of this VatReportSummaryPerPost.


        :param is_historic_data: The is_historic_data of this VatReportSummaryPerPost.  # noqa: E501
        :type: bool
        """

        self._is_historic_data = is_historic_data

    @property
    def has_tax_amount(self):
        """Gets the has_tax_amount of this VatReportSummaryPerPost.  # noqa: E501


        :return: The has_tax_amount of this VatReportSummaryPerPost.  # noqa: E501
        :rtype: bool
        """
        return self._has_tax_amount

    @has_tax_amount.setter
    def has_tax_amount(self, has_tax_amount):
        """Sets the has_tax_amount of this VatReportSummaryPerPost.


        :param has_tax_amount: The has_tax_amount of this VatReportSummaryPerPost.  # noqa: E501
        :type: bool
        """

        self._has_tax_amount = has_tax_amount

    @property
    def vat_code_group_no(self):
        """Gets the vat_code_group_no of this VatReportSummaryPerPost.  # noqa: E501


        :return: The vat_code_group_no of this VatReportSummaryPerPost.  # noqa: E501
        :rtype: str
        """
        return self._vat_code_group_no

    @vat_code_group_no.setter
    def vat_code_group_no(self, vat_code_group_no):
        """Sets the vat_code_group_no of this VatReportSummaryPerPost.


        :param vat_code_group_no: The vat_code_group_no of this VatReportSummaryPerPost.  # noqa: E501
        :type: str
        """

        self._vat_code_group_no = vat_code_group_no

    @property
    def has_tax_basis(self):
        """Gets the has_tax_basis of this VatReportSummaryPerPost.  # noqa: E501


        :return: The has_tax_basis of this VatReportSummaryPerPost.  # noqa: E501
        :rtype: bool
        """
        return self._has_tax_basis

    @has_tax_basis.setter
    def has_tax_basis(self, has_tax_basis):
        """Sets the has_tax_basis of this VatReportSummaryPerPost.


        :param has_tax_basis: The has_tax_basis of this VatReportSummaryPerPost.  # noqa: E501
        :type: bool
        """

        self._has_tax_basis = has_tax_basis

    @property
    def vat_post_report_as_negative_amount(self):
        """Gets the vat_post_report_as_negative_amount of this VatReportSummaryPerPost.  # noqa: E501


        :return: The vat_post_report_as_negative_amount of this VatReportSummaryPerPost.  # noqa: E501
        :rtype: bool
        """
        return self._vat_post_report_as_negative_amount

    @vat_post_report_as_negative_amount.setter
    def vat_post_report_as_negative_amount(self, vat_post_report_as_negative_amount):
        """Sets the vat_post_report_as_negative_amount of this VatReportSummaryPerPost.


        :param vat_post_report_as_negative_amount: The vat_post_report_as_negative_amount of this VatReportSummaryPerPost.  # noqa: E501
        :type: bool
        """

        self._vat_post_report_as_negative_amount = vat_post_report_as_negative_amount

    @property
    def vat_code_group_name(self):
        """Gets the vat_code_group_name of this VatReportSummaryPerPost.  # noqa: E501


        :return: The vat_code_group_name of this VatReportSummaryPerPost.  # noqa: E501
        :rtype: str
        """
        return self._vat_code_group_name

    @vat_code_group_name.setter
    def vat_code_group_name(self, vat_code_group_name):
        """Sets the vat_code_group_name of this VatReportSummaryPerPost.


        :param vat_code_group_name: The vat_code_group_name of this VatReportSummaryPerPost.  # noqa: E501
        :type: str
        """

        self._vat_code_group_name = vat_code_group_name

    @property
    def vat_post_no(self):
        """Gets the vat_post_no of this VatReportSummaryPerPost.  # noqa: E501


        :return: The vat_post_no of this VatReportSummaryPerPost.  # noqa: E501
        :rtype: str
        """
        return self._vat_post_no

    @vat_post_no.setter
    def vat_post_no(self, vat_post_no):
        """Sets the vat_post_no of this VatReportSummaryPerPost.


        :param vat_post_no: The vat_post_no of this VatReportSummaryPerPost.  # noqa: E501
        :type: str
        """

        self._vat_post_no = vat_post_no

    @property
    def number_of_journal_entry_lines(self):
        """Gets the number_of_journal_entry_lines of this VatReportSummaryPerPost.  # noqa: E501


        :return: The number_of_journal_entry_lines of this VatReportSummaryPerPost.  # noqa: E501
        :rtype: int
        """
        return self._number_of_journal_entry_lines

    @number_of_journal_entry_lines.setter
    def number_of_journal_entry_lines(self, number_of_journal_entry_lines):
        """Sets the number_of_journal_entry_lines of this VatReportSummaryPerPost.


        :param number_of_journal_entry_lines: The number_of_journal_entry_lines of this VatReportSummaryPerPost.  # noqa: E501
        :type: int
        """

        self._number_of_journal_entry_lines = number_of_journal_entry_lines

    @property
    def vat_post_name(self):
        """Gets the vat_post_name of this VatReportSummaryPerPost.  # noqa: E501


        :return: The vat_post_name of this VatReportSummaryPerPost.  # noqa: E501
        :rtype: str
        """
        return self._vat_post_name

    @vat_post_name.setter
    def vat_post_name(self, vat_post_name):
        """Sets the vat_post_name of this VatReportSummaryPerPost.


        :param vat_post_name: The vat_post_name of this VatReportSummaryPerPost.  # noqa: E501
        :type: str
        """

        self._vat_post_name = vat_post_name

    @property
    def vat_code_group_id(self):
        """Gets the vat_code_group_id of this VatReportSummaryPerPost.  # noqa: E501


        :return: The vat_code_group_id of this VatReportSummaryPerPost.  # noqa: E501
        :rtype: int
        """
        return self._vat_code_group_id

    @vat_code_group_id.setter
    def vat_code_group_id(self, vat_code_group_id):
        """Sets the vat_code_group_id of this VatReportSummaryPerPost.


        :param vat_code_group_id: The vat_code_group_id of this VatReportSummaryPerPost.  # noqa: E501
        :type: int
        """

        self._vat_code_group_id = vat_code_group_id

    @property
    def vat_post_id(self):
        """Gets the vat_post_id of this VatReportSummaryPerPost.  # noqa: E501


        :return: The vat_post_id of this VatReportSummaryPerPost.  # noqa: E501
        :rtype: int
        """
        return self._vat_post_id

    @vat_post_id.setter
    def vat_post_id(self, vat_post_id):
        """Sets the vat_post_id of this VatReportSummaryPerPost.


        :param vat_post_id: The vat_post_id of this VatReportSummaryPerPost.  # noqa: E501
        :type: int
        """

        self._vat_post_id = vat_post_id

    @property
    def custom_values(self):
        """Gets the custom_values of this VatReportSummaryPerPost.  # noqa: E501


        :return: The custom_values of this VatReportSummaryPerPost.  # noqa: E501
        :rtype: CustomValues
        """
        return self._custom_values

    @custom_values.setter
    def custom_values(self, custom_values):
        """Sets the custom_values of this VatReportSummaryPerPost.


        :param custom_values: The custom_values of this VatReportSummaryPerPost.  # noqa: E501
        :type: CustomValues
        """

        self._custom_values = custom_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VatReportSummaryPerPost, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VatReportSummaryPerPost):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
