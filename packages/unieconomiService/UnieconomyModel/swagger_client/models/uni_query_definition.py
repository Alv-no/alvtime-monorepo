# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UniQueryDefinition(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_id': 'int',
        'category': 'str',
        'main_model_name': 'str',
        'code': 'str',
        'description': 'str',
        'system_generated_query': 'bool',
        'sort_index': 'int',
        'name': 'str',
        'click_param': 'str',
        'status_code': 'int',
        'deleted': 'bool',
        'is_shared': 'bool',
        'module_id': 'int',
        'click_url': 'str',
        'id': 'int',
        'updated_by': 'str',
        'created_by': 'str',
        'uni_query_filters': 'list[UniQueryFilter]',
        'uni_query_fields': 'list[UniQueryField]',
        'custom_values': 'CustomValues'
    }

    attribute_map = {
        'user_id': 'UserID',
        'category': 'Category',
        'main_model_name': 'MainModelName',
        'code': 'Code',
        'description': 'Description',
        'system_generated_query': 'SystemGeneratedQuery',
        'sort_index': 'SortIndex',
        'name': 'Name',
        'click_param': 'ClickParam',
        'status_code': 'StatusCode',
        'deleted': 'Deleted',
        'is_shared': 'IsShared',
        'module_id': 'ModuleID',
        'click_url': 'ClickUrl',
        'id': 'ID',
        'updated_by': 'UpdatedBy',
        'created_by': 'CreatedBy',
        'uni_query_filters': 'UniQueryFilters',
        'uni_query_fields': 'UniQueryFields',
        'custom_values': 'CustomValues'
    }

    def __init__(self, user_id=None, category=None, main_model_name=None, code=None, description=None, system_generated_query=None, sort_index=None, name=None, click_param=None, status_code=None, deleted=None, is_shared=None, module_id=None, click_url=None, id=None, updated_by=None, created_by=None, uni_query_filters=None, uni_query_fields=None, custom_values=None):  # noqa: E501
        """UniQueryDefinition - a model defined in Swagger"""  # noqa: E501
        self._user_id = None
        self._category = None
        self._main_model_name = None
        self._code = None
        self._description = None
        self._system_generated_query = None
        self._sort_index = None
        self._name = None
        self._click_param = None
        self._status_code = None
        self._deleted = None
        self._is_shared = None
        self._module_id = None
        self._click_url = None
        self._id = None
        self._updated_by = None
        self._created_by = None
        self._uni_query_filters = None
        self._uni_query_fields = None
        self._custom_values = None
        self.discriminator = None
        if user_id is not None:
            self.user_id = user_id
        if category is not None:
            self.category = category
        if main_model_name is not None:
            self.main_model_name = main_model_name
        if code is not None:
            self.code = code
        if description is not None:
            self.description = description
        if system_generated_query is not None:
            self.system_generated_query = system_generated_query
        if sort_index is not None:
            self.sort_index = sort_index
        if name is not None:
            self.name = name
        if click_param is not None:
            self.click_param = click_param
        if status_code is not None:
            self.status_code = status_code
        if deleted is not None:
            self.deleted = deleted
        if is_shared is not None:
            self.is_shared = is_shared
        if module_id is not None:
            self.module_id = module_id
        if click_url is not None:
            self.click_url = click_url
        if id is not None:
            self.id = id
        if updated_by is not None:
            self.updated_by = updated_by
        if created_by is not None:
            self.created_by = created_by
        if uni_query_filters is not None:
            self.uni_query_filters = uni_query_filters
        if uni_query_fields is not None:
            self.uni_query_fields = uni_query_fields
        if custom_values is not None:
            self.custom_values = custom_values

    @property
    def user_id(self):
        """Gets the user_id of this UniQueryDefinition.  # noqa: E501


        :return: The user_id of this UniQueryDefinition.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this UniQueryDefinition.


        :param user_id: The user_id of this UniQueryDefinition.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def category(self):
        """Gets the category of this UniQueryDefinition.  # noqa: E501


        :return: The category of this UniQueryDefinition.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this UniQueryDefinition.


        :param category: The category of this UniQueryDefinition.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def main_model_name(self):
        """Gets the main_model_name of this UniQueryDefinition.  # noqa: E501


        :return: The main_model_name of this UniQueryDefinition.  # noqa: E501
        :rtype: str
        """
        return self._main_model_name

    @main_model_name.setter
    def main_model_name(self, main_model_name):
        """Sets the main_model_name of this UniQueryDefinition.


        :param main_model_name: The main_model_name of this UniQueryDefinition.  # noqa: E501
        :type: str
        """

        self._main_model_name = main_model_name

    @property
    def code(self):
        """Gets the code of this UniQueryDefinition.  # noqa: E501


        :return: The code of this UniQueryDefinition.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this UniQueryDefinition.


        :param code: The code of this UniQueryDefinition.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def description(self):
        """Gets the description of this UniQueryDefinition.  # noqa: E501


        :return: The description of this UniQueryDefinition.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UniQueryDefinition.


        :param description: The description of this UniQueryDefinition.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def system_generated_query(self):
        """Gets the system_generated_query of this UniQueryDefinition.  # noqa: E501


        :return: The system_generated_query of this UniQueryDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._system_generated_query

    @system_generated_query.setter
    def system_generated_query(self, system_generated_query):
        """Sets the system_generated_query of this UniQueryDefinition.


        :param system_generated_query: The system_generated_query of this UniQueryDefinition.  # noqa: E501
        :type: bool
        """

        self._system_generated_query = system_generated_query

    @property
    def sort_index(self):
        """Gets the sort_index of this UniQueryDefinition.  # noqa: E501


        :return: The sort_index of this UniQueryDefinition.  # noqa: E501
        :rtype: int
        """
        return self._sort_index

    @sort_index.setter
    def sort_index(self, sort_index):
        """Sets the sort_index of this UniQueryDefinition.


        :param sort_index: The sort_index of this UniQueryDefinition.  # noqa: E501
        :type: int
        """

        self._sort_index = sort_index

    @property
    def name(self):
        """Gets the name of this UniQueryDefinition.  # noqa: E501


        :return: The name of this UniQueryDefinition.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UniQueryDefinition.


        :param name: The name of this UniQueryDefinition.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def click_param(self):
        """Gets the click_param of this UniQueryDefinition.  # noqa: E501


        :return: The click_param of this UniQueryDefinition.  # noqa: E501
        :rtype: str
        """
        return self._click_param

    @click_param.setter
    def click_param(self, click_param):
        """Sets the click_param of this UniQueryDefinition.


        :param click_param: The click_param of this UniQueryDefinition.  # noqa: E501
        :type: str
        """

        self._click_param = click_param

    @property
    def status_code(self):
        """Gets the status_code of this UniQueryDefinition.  # noqa: E501


        :return: The status_code of this UniQueryDefinition.  # noqa: E501
        :rtype: int
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this UniQueryDefinition.


        :param status_code: The status_code of this UniQueryDefinition.  # noqa: E501
        :type: int
        """

        self._status_code = status_code

    @property
    def deleted(self):
        """Gets the deleted of this UniQueryDefinition.  # noqa: E501


        :return: The deleted of this UniQueryDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this UniQueryDefinition.


        :param deleted: The deleted of this UniQueryDefinition.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def is_shared(self):
        """Gets the is_shared of this UniQueryDefinition.  # noqa: E501


        :return: The is_shared of this UniQueryDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._is_shared

    @is_shared.setter
    def is_shared(self, is_shared):
        """Sets the is_shared of this UniQueryDefinition.


        :param is_shared: The is_shared of this UniQueryDefinition.  # noqa: E501
        :type: bool
        """

        self._is_shared = is_shared

    @property
    def module_id(self):
        """Gets the module_id of this UniQueryDefinition.  # noqa: E501


        :return: The module_id of this UniQueryDefinition.  # noqa: E501
        :rtype: int
        """
        return self._module_id

    @module_id.setter
    def module_id(self, module_id):
        """Sets the module_id of this UniQueryDefinition.


        :param module_id: The module_id of this UniQueryDefinition.  # noqa: E501
        :type: int
        """

        self._module_id = module_id

    @property
    def click_url(self):
        """Gets the click_url of this UniQueryDefinition.  # noqa: E501


        :return: The click_url of this UniQueryDefinition.  # noqa: E501
        :rtype: str
        """
        return self._click_url

    @click_url.setter
    def click_url(self, click_url):
        """Sets the click_url of this UniQueryDefinition.


        :param click_url: The click_url of this UniQueryDefinition.  # noqa: E501
        :type: str
        """

        self._click_url = click_url

    @property
    def id(self):
        """Gets the id of this UniQueryDefinition.  # noqa: E501


        :return: The id of this UniQueryDefinition.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UniQueryDefinition.


        :param id: The id of this UniQueryDefinition.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def updated_by(self):
        """Gets the updated_by of this UniQueryDefinition.  # noqa: E501


        :return: The updated_by of this UniQueryDefinition.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this UniQueryDefinition.


        :param updated_by: The updated_by of this UniQueryDefinition.  # noqa: E501
        :type: str
        """

        self._updated_by = updated_by

    @property
    def created_by(self):
        """Gets the created_by of this UniQueryDefinition.  # noqa: E501


        :return: The created_by of this UniQueryDefinition.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this UniQueryDefinition.


        :param created_by: The created_by of this UniQueryDefinition.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def uni_query_filters(self):
        """Gets the uni_query_filters of this UniQueryDefinition.  # noqa: E501


        :return: The uni_query_filters of this UniQueryDefinition.  # noqa: E501
        :rtype: list[UniQueryFilter]
        """
        return self._uni_query_filters

    @uni_query_filters.setter
    def uni_query_filters(self, uni_query_filters):
        """Sets the uni_query_filters of this UniQueryDefinition.


        :param uni_query_filters: The uni_query_filters of this UniQueryDefinition.  # noqa: E501
        :type: list[UniQueryFilter]
        """

        self._uni_query_filters = uni_query_filters

    @property
    def uni_query_fields(self):
        """Gets the uni_query_fields of this UniQueryDefinition.  # noqa: E501


        :return: The uni_query_fields of this UniQueryDefinition.  # noqa: E501
        :rtype: list[UniQueryField]
        """
        return self._uni_query_fields

    @uni_query_fields.setter
    def uni_query_fields(self, uni_query_fields):
        """Sets the uni_query_fields of this UniQueryDefinition.


        :param uni_query_fields: The uni_query_fields of this UniQueryDefinition.  # noqa: E501
        :type: list[UniQueryField]
        """

        self._uni_query_fields = uni_query_fields

    @property
    def custom_values(self):
        """Gets the custom_values of this UniQueryDefinition.  # noqa: E501


        :return: The custom_values of this UniQueryDefinition.  # noqa: E501
        :rtype: CustomValues
        """
        return self._custom_values

    @custom_values.setter
    def custom_values(self, custom_values):
        """Sets the custom_values of this UniQueryDefinition.


        :param custom_values: The custom_values of this UniQueryDefinition.  # noqa: E501
        :type: CustomValues
        """

        self._custom_values = custom_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UniQueryDefinition, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UniQueryDefinition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
