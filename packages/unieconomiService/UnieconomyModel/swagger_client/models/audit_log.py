# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AuditLog(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'old_value': 'str',
        'route': 'str',
        'field': 'str',
        'deleted': 'bool',
        'verb': 'str',
        'entity_type': 'str',
        'action': 'str',
        'id': 'int',
        'client_id': 'str',
        'updated_by': 'str',
        'new_value': 'str',
        'created_by': 'str',
        'entity_id': 'int',
        'transaction': 'str',
        'custom_values': 'CustomValues'
    }

    attribute_map = {
        'old_value': 'OldValue',
        'route': 'Route',
        'field': 'Field',
        'deleted': 'Deleted',
        'verb': 'Verb',
        'entity_type': 'EntityType',
        'action': 'Action',
        'id': 'ID',
        'client_id': 'ClientID',
        'updated_by': 'UpdatedBy',
        'new_value': 'NewValue',
        'created_by': 'CreatedBy',
        'entity_id': 'EntityID',
        'transaction': 'Transaction',
        'custom_values': 'CustomValues'
    }

    def __init__(self, old_value=None, route=None, field=None, deleted=None, verb=None, entity_type=None, action=None, id=None, client_id=None, updated_by=None, new_value=None, created_by=None, entity_id=None, transaction=None, custom_values=None):  # noqa: E501
        """AuditLog - a model defined in Swagger"""  # noqa: E501
        self._old_value = None
        self._route = None
        self._field = None
        self._deleted = None
        self._verb = None
        self._entity_type = None
        self._action = None
        self._id = None
        self._client_id = None
        self._updated_by = None
        self._new_value = None
        self._created_by = None
        self._entity_id = None
        self._transaction = None
        self._custom_values = None
        self.discriminator = None
        if old_value is not None:
            self.old_value = old_value
        if route is not None:
            self.route = route
        if field is not None:
            self.field = field
        if deleted is not None:
            self.deleted = deleted
        if verb is not None:
            self.verb = verb
        if entity_type is not None:
            self.entity_type = entity_type
        if action is not None:
            self.action = action
        if id is not None:
            self.id = id
        if client_id is not None:
            self.client_id = client_id
        if updated_by is not None:
            self.updated_by = updated_by
        if new_value is not None:
            self.new_value = new_value
        if created_by is not None:
            self.created_by = created_by
        if entity_id is not None:
            self.entity_id = entity_id
        if transaction is not None:
            self.transaction = transaction
        if custom_values is not None:
            self.custom_values = custom_values

    @property
    def old_value(self):
        """Gets the old_value of this AuditLog.  # noqa: E501


        :return: The old_value of this AuditLog.  # noqa: E501
        :rtype: str
        """
        return self._old_value

    @old_value.setter
    def old_value(self, old_value):
        """Sets the old_value of this AuditLog.


        :param old_value: The old_value of this AuditLog.  # noqa: E501
        :type: str
        """

        self._old_value = old_value

    @property
    def route(self):
        """Gets the route of this AuditLog.  # noqa: E501


        :return: The route of this AuditLog.  # noqa: E501
        :rtype: str
        """
        return self._route

    @route.setter
    def route(self, route):
        """Sets the route of this AuditLog.


        :param route: The route of this AuditLog.  # noqa: E501
        :type: str
        """

        self._route = route

    @property
    def field(self):
        """Gets the field of this AuditLog.  # noqa: E501


        :return: The field of this AuditLog.  # noqa: E501
        :rtype: str
        """
        return self._field

    @field.setter
    def field(self, field):
        """Sets the field of this AuditLog.


        :param field: The field of this AuditLog.  # noqa: E501
        :type: str
        """

        self._field = field

    @property
    def deleted(self):
        """Gets the deleted of this AuditLog.  # noqa: E501


        :return: The deleted of this AuditLog.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this AuditLog.


        :param deleted: The deleted of this AuditLog.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def verb(self):
        """Gets the verb of this AuditLog.  # noqa: E501


        :return: The verb of this AuditLog.  # noqa: E501
        :rtype: str
        """
        return self._verb

    @verb.setter
    def verb(self, verb):
        """Sets the verb of this AuditLog.


        :param verb: The verb of this AuditLog.  # noqa: E501
        :type: str
        """

        self._verb = verb

    @property
    def entity_type(self):
        """Gets the entity_type of this AuditLog.  # noqa: E501


        :return: The entity_type of this AuditLog.  # noqa: E501
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this AuditLog.


        :param entity_type: The entity_type of this AuditLog.  # noqa: E501
        :type: str
        """

        self._entity_type = entity_type

    @property
    def action(self):
        """Gets the action of this AuditLog.  # noqa: E501


        :return: The action of this AuditLog.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this AuditLog.


        :param action: The action of this AuditLog.  # noqa: E501
        :type: str
        """

        self._action = action

    @property
    def id(self):
        """Gets the id of this AuditLog.  # noqa: E501


        :return: The id of this AuditLog.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AuditLog.


        :param id: The id of this AuditLog.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def client_id(self):
        """Gets the client_id of this AuditLog.  # noqa: E501


        :return: The client_id of this AuditLog.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this AuditLog.


        :param client_id: The client_id of this AuditLog.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def updated_by(self):
        """Gets the updated_by of this AuditLog.  # noqa: E501


        :return: The updated_by of this AuditLog.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this AuditLog.


        :param updated_by: The updated_by of this AuditLog.  # noqa: E501
        :type: str
        """

        self._updated_by = updated_by

    @property
    def new_value(self):
        """Gets the new_value of this AuditLog.  # noqa: E501


        :return: The new_value of this AuditLog.  # noqa: E501
        :rtype: str
        """
        return self._new_value

    @new_value.setter
    def new_value(self, new_value):
        """Sets the new_value of this AuditLog.


        :param new_value: The new_value of this AuditLog.  # noqa: E501
        :type: str
        """

        self._new_value = new_value

    @property
    def created_by(self):
        """Gets the created_by of this AuditLog.  # noqa: E501


        :return: The created_by of this AuditLog.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this AuditLog.


        :param created_by: The created_by of this AuditLog.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def entity_id(self):
        """Gets the entity_id of this AuditLog.  # noqa: E501


        :return: The entity_id of this AuditLog.  # noqa: E501
        :rtype: int
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this AuditLog.


        :param entity_id: The entity_id of this AuditLog.  # noqa: E501
        :type: int
        """

        self._entity_id = entity_id

    @property
    def transaction(self):
        """Gets the transaction of this AuditLog.  # noqa: E501


        :return: The transaction of this AuditLog.  # noqa: E501
        :rtype: str
        """
        return self._transaction

    @transaction.setter
    def transaction(self, transaction):
        """Sets the transaction of this AuditLog.


        :param transaction: The transaction of this AuditLog.  # noqa: E501
        :type: str
        """

        self._transaction = transaction

    @property
    def custom_values(self):
        """Gets the custom_values of this AuditLog.  # noqa: E501


        :return: The custom_values of this AuditLog.  # noqa: E501
        :rtype: CustomValues
        """
        return self._custom_values

    @custom_values.setter
    def custom_values(self, custom_values):
        """Sets the custom_values of this AuditLog.


        :param custom_values: The custom_values of this AuditLog.  # noqa: E501
        :type: CustomValues
        """

        self._custom_values = custom_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AuditLog, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuditLog):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
