# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FieldLayoutDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'section': 'int',
        '_property': 'str',
        'label': 'str',
        'hidden': 'bool',
        'sectionheader': 'str',
        'line_break': 'bool',
        'url': 'str',
        'description': 'str',
        'display_field': 'str',
        'width': 'str',
        'legend': 'str',
        'field_set': 'int',
        'placement': 'int',
        'status_code': 'int',
        'deleted': 'bool',
        'entity_type': 'str',
        'help_text': 'str',
        'field_type': 'str',
        'id': 'int',
        'alignment': 'str',
        'value_list': 'str',
        'updated_by': 'str',
        'component_layout_id': 'int',
        'placeholder': 'str',
        'created_by': 'str',
        'read_only': 'bool',
        'lookup_entity_type': 'str',
        'combo': 'int',
        'options': 'str',
        'lookup_field': 'bool',
        'validations': 'list[EntityValidationRule]',
        'custom_values': 'CustomValues'
    }

    attribute_map = {
        'section': 'Section',
        '_property': 'Property',
        'label': 'Label',
        'hidden': 'Hidden',
        'sectionheader': 'Sectionheader',
        'line_break': 'LineBreak',
        'url': 'Url',
        'description': 'Description',
        'display_field': 'DisplayField',
        'width': 'Width',
        'legend': 'Legend',
        'field_set': 'FieldSet',
        'placement': 'Placement',
        'status_code': 'StatusCode',
        'deleted': 'Deleted',
        'entity_type': 'EntityType',
        'help_text': 'HelpText',
        'field_type': 'FieldType',
        'id': 'ID',
        'alignment': 'Alignment',
        'value_list': 'ValueList',
        'updated_by': 'UpdatedBy',
        'component_layout_id': 'ComponentLayoutID',
        'placeholder': 'Placeholder',
        'created_by': 'CreatedBy',
        'read_only': 'ReadOnly',
        'lookup_entity_type': 'LookupEntityType',
        'combo': 'Combo',
        'options': 'Options',
        'lookup_field': 'LookupField',
        'validations': 'Validations',
        'custom_values': 'CustomValues'
    }

    def __init__(self, section=None, _property=None, label=None, hidden=None, sectionheader=None, line_break=None, url=None, description=None, display_field=None, width=None, legend=None, field_set=None, placement=None, status_code=None, deleted=None, entity_type=None, help_text=None, field_type=None, id=None, alignment=None, value_list=None, updated_by=None, component_layout_id=None, placeholder=None, created_by=None, read_only=None, lookup_entity_type=None, combo=None, options=None, lookup_field=None, validations=None, custom_values=None):  # noqa: E501
        """FieldLayoutDto - a model defined in Swagger"""  # noqa: E501
        self._section = None
        self.__property = None
        self._label = None
        self._hidden = None
        self._sectionheader = None
        self._line_break = None
        self._url = None
        self._description = None
        self._display_field = None
        self._width = None
        self._legend = None
        self._field_set = None
        self._placement = None
        self._status_code = None
        self._deleted = None
        self._entity_type = None
        self._help_text = None
        self._field_type = None
        self._id = None
        self._alignment = None
        self._value_list = None
        self._updated_by = None
        self._component_layout_id = None
        self._placeholder = None
        self._created_by = None
        self._read_only = None
        self._lookup_entity_type = None
        self._combo = None
        self._options = None
        self._lookup_field = None
        self._validations = None
        self._custom_values = None
        self.discriminator = None
        if section is not None:
            self.section = section
        if _property is not None:
            self._property = _property
        if label is not None:
            self.label = label
        if hidden is not None:
            self.hidden = hidden
        if sectionheader is not None:
            self.sectionheader = sectionheader
        if line_break is not None:
            self.line_break = line_break
        if url is not None:
            self.url = url
        if description is not None:
            self.description = description
        if display_field is not None:
            self.display_field = display_field
        if width is not None:
            self.width = width
        if legend is not None:
            self.legend = legend
        if field_set is not None:
            self.field_set = field_set
        if placement is not None:
            self.placement = placement
        if status_code is not None:
            self.status_code = status_code
        if deleted is not None:
            self.deleted = deleted
        if entity_type is not None:
            self.entity_type = entity_type
        if help_text is not None:
            self.help_text = help_text
        if field_type is not None:
            self.field_type = field_type
        if id is not None:
            self.id = id
        if alignment is not None:
            self.alignment = alignment
        if value_list is not None:
            self.value_list = value_list
        if updated_by is not None:
            self.updated_by = updated_by
        if component_layout_id is not None:
            self.component_layout_id = component_layout_id
        if placeholder is not None:
            self.placeholder = placeholder
        if created_by is not None:
            self.created_by = created_by
        if read_only is not None:
            self.read_only = read_only
        if lookup_entity_type is not None:
            self.lookup_entity_type = lookup_entity_type
        if combo is not None:
            self.combo = combo
        if options is not None:
            self.options = options
        if lookup_field is not None:
            self.lookup_field = lookup_field
        if validations is not None:
            self.validations = validations
        if custom_values is not None:
            self.custom_values = custom_values

    @property
    def section(self):
        """Gets the section of this FieldLayoutDto.  # noqa: E501


        :return: The section of this FieldLayoutDto.  # noqa: E501
        :rtype: int
        """
        return self._section

    @section.setter
    def section(self, section):
        """Sets the section of this FieldLayoutDto.


        :param section: The section of this FieldLayoutDto.  # noqa: E501
        :type: int
        """

        self._section = section

    @property
    def _property(self):
        """Gets the _property of this FieldLayoutDto.  # noqa: E501


        :return: The _property of this FieldLayoutDto.  # noqa: E501
        :rtype: str
        """
        return self.__property

    @_property.setter
    def _property(self, _property):
        """Sets the _property of this FieldLayoutDto.


        :param _property: The _property of this FieldLayoutDto.  # noqa: E501
        :type: str
        """

        self.__property = _property

    @property
    def label(self):
        """Gets the label of this FieldLayoutDto.  # noqa: E501


        :return: The label of this FieldLayoutDto.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this FieldLayoutDto.


        :param label: The label of this FieldLayoutDto.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def hidden(self):
        """Gets the hidden of this FieldLayoutDto.  # noqa: E501


        :return: The hidden of this FieldLayoutDto.  # noqa: E501
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this FieldLayoutDto.


        :param hidden: The hidden of this FieldLayoutDto.  # noqa: E501
        :type: bool
        """

        self._hidden = hidden

    @property
    def sectionheader(self):
        """Gets the sectionheader of this FieldLayoutDto.  # noqa: E501


        :return: The sectionheader of this FieldLayoutDto.  # noqa: E501
        :rtype: str
        """
        return self._sectionheader

    @sectionheader.setter
    def sectionheader(self, sectionheader):
        """Sets the sectionheader of this FieldLayoutDto.


        :param sectionheader: The sectionheader of this FieldLayoutDto.  # noqa: E501
        :type: str
        """

        self._sectionheader = sectionheader

    @property
    def line_break(self):
        """Gets the line_break of this FieldLayoutDto.  # noqa: E501


        :return: The line_break of this FieldLayoutDto.  # noqa: E501
        :rtype: bool
        """
        return self._line_break

    @line_break.setter
    def line_break(self, line_break):
        """Sets the line_break of this FieldLayoutDto.


        :param line_break: The line_break of this FieldLayoutDto.  # noqa: E501
        :type: bool
        """

        self._line_break = line_break

    @property
    def url(self):
        """Gets the url of this FieldLayoutDto.  # noqa: E501


        :return: The url of this FieldLayoutDto.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this FieldLayoutDto.


        :param url: The url of this FieldLayoutDto.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def description(self):
        """Gets the description of this FieldLayoutDto.  # noqa: E501


        :return: The description of this FieldLayoutDto.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this FieldLayoutDto.


        :param description: The description of this FieldLayoutDto.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def display_field(self):
        """Gets the display_field of this FieldLayoutDto.  # noqa: E501


        :return: The display_field of this FieldLayoutDto.  # noqa: E501
        :rtype: str
        """
        return self._display_field

    @display_field.setter
    def display_field(self, display_field):
        """Sets the display_field of this FieldLayoutDto.


        :param display_field: The display_field of this FieldLayoutDto.  # noqa: E501
        :type: str
        """

        self._display_field = display_field

    @property
    def width(self):
        """Gets the width of this FieldLayoutDto.  # noqa: E501


        :return: The width of this FieldLayoutDto.  # noqa: E501
        :rtype: str
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this FieldLayoutDto.


        :param width: The width of this FieldLayoutDto.  # noqa: E501
        :type: str
        """

        self._width = width

    @property
    def legend(self):
        """Gets the legend of this FieldLayoutDto.  # noqa: E501


        :return: The legend of this FieldLayoutDto.  # noqa: E501
        :rtype: str
        """
        return self._legend

    @legend.setter
    def legend(self, legend):
        """Sets the legend of this FieldLayoutDto.


        :param legend: The legend of this FieldLayoutDto.  # noqa: E501
        :type: str
        """

        self._legend = legend

    @property
    def field_set(self):
        """Gets the field_set of this FieldLayoutDto.  # noqa: E501


        :return: The field_set of this FieldLayoutDto.  # noqa: E501
        :rtype: int
        """
        return self._field_set

    @field_set.setter
    def field_set(self, field_set):
        """Sets the field_set of this FieldLayoutDto.


        :param field_set: The field_set of this FieldLayoutDto.  # noqa: E501
        :type: int
        """

        self._field_set = field_set

    @property
    def placement(self):
        """Gets the placement of this FieldLayoutDto.  # noqa: E501


        :return: The placement of this FieldLayoutDto.  # noqa: E501
        :rtype: int
        """
        return self._placement

    @placement.setter
    def placement(self, placement):
        """Sets the placement of this FieldLayoutDto.


        :param placement: The placement of this FieldLayoutDto.  # noqa: E501
        :type: int
        """

        self._placement = placement

    @property
    def status_code(self):
        """Gets the status_code of this FieldLayoutDto.  # noqa: E501


        :return: The status_code of this FieldLayoutDto.  # noqa: E501
        :rtype: int
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this FieldLayoutDto.


        :param status_code: The status_code of this FieldLayoutDto.  # noqa: E501
        :type: int
        """

        self._status_code = status_code

    @property
    def deleted(self):
        """Gets the deleted of this FieldLayoutDto.  # noqa: E501


        :return: The deleted of this FieldLayoutDto.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this FieldLayoutDto.


        :param deleted: The deleted of this FieldLayoutDto.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def entity_type(self):
        """Gets the entity_type of this FieldLayoutDto.  # noqa: E501


        :return: The entity_type of this FieldLayoutDto.  # noqa: E501
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this FieldLayoutDto.


        :param entity_type: The entity_type of this FieldLayoutDto.  # noqa: E501
        :type: str
        """

        self._entity_type = entity_type

    @property
    def help_text(self):
        """Gets the help_text of this FieldLayoutDto.  # noqa: E501


        :return: The help_text of this FieldLayoutDto.  # noqa: E501
        :rtype: str
        """
        return self._help_text

    @help_text.setter
    def help_text(self, help_text):
        """Sets the help_text of this FieldLayoutDto.


        :param help_text: The help_text of this FieldLayoutDto.  # noqa: E501
        :type: str
        """

        self._help_text = help_text

    @property
    def field_type(self):
        """Gets the field_type of this FieldLayoutDto.  # noqa: E501


        :return: The field_type of this FieldLayoutDto.  # noqa: E501
        :rtype: str
        """
        return self._field_type

    @field_type.setter
    def field_type(self, field_type):
        """Sets the field_type of this FieldLayoutDto.


        :param field_type: The field_type of this FieldLayoutDto.  # noqa: E501
        :type: str
        """

        self._field_type = field_type

    @property
    def id(self):
        """Gets the id of this FieldLayoutDto.  # noqa: E501


        :return: The id of this FieldLayoutDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FieldLayoutDto.


        :param id: The id of this FieldLayoutDto.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def alignment(self):
        """Gets the alignment of this FieldLayoutDto.  # noqa: E501


        :return: The alignment of this FieldLayoutDto.  # noqa: E501
        :rtype: str
        """
        return self._alignment

    @alignment.setter
    def alignment(self, alignment):
        """Sets the alignment of this FieldLayoutDto.


        :param alignment: The alignment of this FieldLayoutDto.  # noqa: E501
        :type: str
        """

        self._alignment = alignment

    @property
    def value_list(self):
        """Gets the value_list of this FieldLayoutDto.  # noqa: E501


        :return: The value_list of this FieldLayoutDto.  # noqa: E501
        :rtype: str
        """
        return self._value_list

    @value_list.setter
    def value_list(self, value_list):
        """Sets the value_list of this FieldLayoutDto.


        :param value_list: The value_list of this FieldLayoutDto.  # noqa: E501
        :type: str
        """

        self._value_list = value_list

    @property
    def updated_by(self):
        """Gets the updated_by of this FieldLayoutDto.  # noqa: E501


        :return: The updated_by of this FieldLayoutDto.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this FieldLayoutDto.


        :param updated_by: The updated_by of this FieldLayoutDto.  # noqa: E501
        :type: str
        """

        self._updated_by = updated_by

    @property
    def component_layout_id(self):
        """Gets the component_layout_id of this FieldLayoutDto.  # noqa: E501


        :return: The component_layout_id of this FieldLayoutDto.  # noqa: E501
        :rtype: int
        """
        return self._component_layout_id

    @component_layout_id.setter
    def component_layout_id(self, component_layout_id):
        """Sets the component_layout_id of this FieldLayoutDto.


        :param component_layout_id: The component_layout_id of this FieldLayoutDto.  # noqa: E501
        :type: int
        """

        self._component_layout_id = component_layout_id

    @property
    def placeholder(self):
        """Gets the placeholder of this FieldLayoutDto.  # noqa: E501


        :return: The placeholder of this FieldLayoutDto.  # noqa: E501
        :rtype: str
        """
        return self._placeholder

    @placeholder.setter
    def placeholder(self, placeholder):
        """Sets the placeholder of this FieldLayoutDto.


        :param placeholder: The placeholder of this FieldLayoutDto.  # noqa: E501
        :type: str
        """

        self._placeholder = placeholder

    @property
    def created_by(self):
        """Gets the created_by of this FieldLayoutDto.  # noqa: E501


        :return: The created_by of this FieldLayoutDto.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this FieldLayoutDto.


        :param created_by: The created_by of this FieldLayoutDto.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def read_only(self):
        """Gets the read_only of this FieldLayoutDto.  # noqa: E501


        :return: The read_only of this FieldLayoutDto.  # noqa: E501
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only):
        """Sets the read_only of this FieldLayoutDto.


        :param read_only: The read_only of this FieldLayoutDto.  # noqa: E501
        :type: bool
        """

        self._read_only = read_only

    @property
    def lookup_entity_type(self):
        """Gets the lookup_entity_type of this FieldLayoutDto.  # noqa: E501


        :return: The lookup_entity_type of this FieldLayoutDto.  # noqa: E501
        :rtype: str
        """
        return self._lookup_entity_type

    @lookup_entity_type.setter
    def lookup_entity_type(self, lookup_entity_type):
        """Sets the lookup_entity_type of this FieldLayoutDto.


        :param lookup_entity_type: The lookup_entity_type of this FieldLayoutDto.  # noqa: E501
        :type: str
        """

        self._lookup_entity_type = lookup_entity_type

    @property
    def combo(self):
        """Gets the combo of this FieldLayoutDto.  # noqa: E501


        :return: The combo of this FieldLayoutDto.  # noqa: E501
        :rtype: int
        """
        return self._combo

    @combo.setter
    def combo(self, combo):
        """Sets the combo of this FieldLayoutDto.


        :param combo: The combo of this FieldLayoutDto.  # noqa: E501
        :type: int
        """

        self._combo = combo

    @property
    def options(self):
        """Gets the options of this FieldLayoutDto.  # noqa: E501


        :return: The options of this FieldLayoutDto.  # noqa: E501
        :rtype: str
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this FieldLayoutDto.


        :param options: The options of this FieldLayoutDto.  # noqa: E501
        :type: str
        """

        self._options = options

    @property
    def lookup_field(self):
        """Gets the lookup_field of this FieldLayoutDto.  # noqa: E501


        :return: The lookup_field of this FieldLayoutDto.  # noqa: E501
        :rtype: bool
        """
        return self._lookup_field

    @lookup_field.setter
    def lookup_field(self, lookup_field):
        """Sets the lookup_field of this FieldLayoutDto.


        :param lookup_field: The lookup_field of this FieldLayoutDto.  # noqa: E501
        :type: bool
        """

        self._lookup_field = lookup_field

    @property
    def validations(self):
        """Gets the validations of this FieldLayoutDto.  # noqa: E501


        :return: The validations of this FieldLayoutDto.  # noqa: E501
        :rtype: list[EntityValidationRule]
        """
        return self._validations

    @validations.setter
    def validations(self, validations):
        """Sets the validations of this FieldLayoutDto.


        :param validations: The validations of this FieldLayoutDto.  # noqa: E501
        :type: list[EntityValidationRule]
        """

        self._validations = validations

    @property
    def custom_values(self):
        """Gets the custom_values of this FieldLayoutDto.  # noqa: E501


        :return: The custom_values of this FieldLayoutDto.  # noqa: E501
        :rtype: CustomValues
        """
        return self._custom_values

    @custom_values.setter
    def custom_values(self, custom_values):
        """Sets the custom_values of this FieldLayoutDto.


        :param custom_values: The custom_values of this FieldLayoutDto.  # noqa: E501
        :type: CustomValues
        """

        self._custom_values = custom_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FieldLayoutDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FieldLayoutDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
