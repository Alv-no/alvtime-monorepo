# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BankfileFormat(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'custom_format': 'str',
        'is_xml': 'bool',
        'is_fixed': 'bool',
        'name': 'str',
        'skip_rows': 'int',
        'separator': 'str',
        'line_prefix': 'str',
        'file_extension': 'str',
        'columns': 'list[BankfileColumn]',
        'custom_values': 'CustomValues'
    }

    attribute_map = {
        'custom_format': 'CustomFormat',
        'is_xml': 'IsXml',
        'is_fixed': 'IsFixed',
        'name': 'Name',
        'skip_rows': 'SkipRows',
        'separator': 'Separator',
        'line_prefix': 'LinePrefix',
        'file_extension': 'FileExtension',
        'columns': 'Columns',
        'custom_values': 'CustomValues'
    }

    def __init__(self, custom_format=None, is_xml=None, is_fixed=None, name=None, skip_rows=None, separator=None, line_prefix=None, file_extension=None, columns=None, custom_values=None):  # noqa: E501
        """BankfileFormat - a model defined in Swagger"""  # noqa: E501
        self._custom_format = None
        self._is_xml = None
        self._is_fixed = None
        self._name = None
        self._skip_rows = None
        self._separator = None
        self._line_prefix = None
        self._file_extension = None
        self._columns = None
        self._custom_values = None
        self.discriminator = None
        if custom_format is not None:
            self.custom_format = custom_format
        if is_xml is not None:
            self.is_xml = is_xml
        if is_fixed is not None:
            self.is_fixed = is_fixed
        if name is not None:
            self.name = name
        if skip_rows is not None:
            self.skip_rows = skip_rows
        if separator is not None:
            self.separator = separator
        if line_prefix is not None:
            self.line_prefix = line_prefix
        if file_extension is not None:
            self.file_extension = file_extension
        if columns is not None:
            self.columns = columns
        if custom_values is not None:
            self.custom_values = custom_values

    @property
    def custom_format(self):
        """Gets the custom_format of this BankfileFormat.  # noqa: E501


        :return: The custom_format of this BankfileFormat.  # noqa: E501
        :rtype: str
        """
        return self._custom_format

    @custom_format.setter
    def custom_format(self, custom_format):
        """Sets the custom_format of this BankfileFormat.


        :param custom_format: The custom_format of this BankfileFormat.  # noqa: E501
        :type: str
        """

        self._custom_format = custom_format

    @property
    def is_xml(self):
        """Gets the is_xml of this BankfileFormat.  # noqa: E501


        :return: The is_xml of this BankfileFormat.  # noqa: E501
        :rtype: bool
        """
        return self._is_xml

    @is_xml.setter
    def is_xml(self, is_xml):
        """Sets the is_xml of this BankfileFormat.


        :param is_xml: The is_xml of this BankfileFormat.  # noqa: E501
        :type: bool
        """

        self._is_xml = is_xml

    @property
    def is_fixed(self):
        """Gets the is_fixed of this BankfileFormat.  # noqa: E501


        :return: The is_fixed of this BankfileFormat.  # noqa: E501
        :rtype: bool
        """
        return self._is_fixed

    @is_fixed.setter
    def is_fixed(self, is_fixed):
        """Sets the is_fixed of this BankfileFormat.


        :param is_fixed: The is_fixed of this BankfileFormat.  # noqa: E501
        :type: bool
        """

        self._is_fixed = is_fixed

    @property
    def name(self):
        """Gets the name of this BankfileFormat.  # noqa: E501


        :return: The name of this BankfileFormat.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BankfileFormat.


        :param name: The name of this BankfileFormat.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def skip_rows(self):
        """Gets the skip_rows of this BankfileFormat.  # noqa: E501


        :return: The skip_rows of this BankfileFormat.  # noqa: E501
        :rtype: int
        """
        return self._skip_rows

    @skip_rows.setter
    def skip_rows(self, skip_rows):
        """Sets the skip_rows of this BankfileFormat.


        :param skip_rows: The skip_rows of this BankfileFormat.  # noqa: E501
        :type: int
        """

        self._skip_rows = skip_rows

    @property
    def separator(self):
        """Gets the separator of this BankfileFormat.  # noqa: E501


        :return: The separator of this BankfileFormat.  # noqa: E501
        :rtype: str
        """
        return self._separator

    @separator.setter
    def separator(self, separator):
        """Sets the separator of this BankfileFormat.


        :param separator: The separator of this BankfileFormat.  # noqa: E501
        :type: str
        """

        self._separator = separator

    @property
    def line_prefix(self):
        """Gets the line_prefix of this BankfileFormat.  # noqa: E501


        :return: The line_prefix of this BankfileFormat.  # noqa: E501
        :rtype: str
        """
        return self._line_prefix

    @line_prefix.setter
    def line_prefix(self, line_prefix):
        """Sets the line_prefix of this BankfileFormat.


        :param line_prefix: The line_prefix of this BankfileFormat.  # noqa: E501
        :type: str
        """

        self._line_prefix = line_prefix

    @property
    def file_extension(self):
        """Gets the file_extension of this BankfileFormat.  # noqa: E501


        :return: The file_extension of this BankfileFormat.  # noqa: E501
        :rtype: str
        """
        return self._file_extension

    @file_extension.setter
    def file_extension(self, file_extension):
        """Sets the file_extension of this BankfileFormat.


        :param file_extension: The file_extension of this BankfileFormat.  # noqa: E501
        :type: str
        """

        self._file_extension = file_extension

    @property
    def columns(self):
        """Gets the columns of this BankfileFormat.  # noqa: E501


        :return: The columns of this BankfileFormat.  # noqa: E501
        :rtype: list[BankfileColumn]
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this BankfileFormat.


        :param columns: The columns of this BankfileFormat.  # noqa: E501
        :type: list[BankfileColumn]
        """

        self._columns = columns

    @property
    def custom_values(self):
        """Gets the custom_values of this BankfileFormat.  # noqa: E501


        :return: The custom_values of this BankfileFormat.  # noqa: E501
        :rtype: CustomValues
        """
        return self._custom_values

    @custom_values.setter
    def custom_values(self, custom_values):
        """Sets the custom_values of this BankfileFormat.


        :param custom_values: The custom_values of this BankfileFormat.  # noqa: E501
        :type: CustomValues
        """

        self._custom_values = custom_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BankfileFormat, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BankfileFormat):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
