# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class JournalEntryLinePostPostData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_year': 'int',
        'description': 'str',
        'marked_against_journal_entry_number': 'str',
        'journal_entry_number': 'str',
        'invoice_number': 'str',
        'currency_code_code': 'str',
        'sub_account_name': 'str',
        'journal_entry_type_name': 'str',
        'journal_entry_id': 'int',
        'status_code': 'int',
        'sub_account_number': 'int',
        'payment_id': 'str',
        'id': 'int',
        'period_no': 'int',
        'currency_code_id': 'int',
        'marked_against_journal_entry_line_id': 'int',
        'currency_code_short_code': 'str',
        'number_of_payments': 'int',
        'journal_entry_number_numeric': 'int',
        'markings': 'list[JournalEntryLinePostPostData]',
        'custom_values': 'CustomValues'
    }

    attribute_map = {
        'account_year': 'AccountYear',
        'description': 'Description',
        'marked_against_journal_entry_number': 'MarkedAgainstJournalEntryNumber',
        'journal_entry_number': 'JournalEntryNumber',
        'invoice_number': 'InvoiceNumber',
        'currency_code_code': 'CurrencyCodeCode',
        'sub_account_name': 'SubAccountName',
        'journal_entry_type_name': 'JournalEntryTypeName',
        'journal_entry_id': 'JournalEntryID',
        'status_code': 'StatusCode',
        'sub_account_number': 'SubAccountNumber',
        'payment_id': 'PaymentID',
        'id': 'ID',
        'period_no': 'PeriodNo',
        'currency_code_id': 'CurrencyCodeID',
        'marked_against_journal_entry_line_id': 'MarkedAgainstJournalEntryLineID',
        'currency_code_short_code': 'CurrencyCodeShortCode',
        'number_of_payments': 'NumberOfPayments',
        'journal_entry_number_numeric': 'JournalEntryNumberNumeric',
        'markings': 'Markings',
        'custom_values': 'CustomValues'
    }

    def __init__(self, account_year=None, description=None, marked_against_journal_entry_number=None, journal_entry_number=None, invoice_number=None, currency_code_code=None, sub_account_name=None, journal_entry_type_name=None, journal_entry_id=None, status_code=None, sub_account_number=None, payment_id=None, id=None, period_no=None, currency_code_id=None, marked_against_journal_entry_line_id=None, currency_code_short_code=None, number_of_payments=None, journal_entry_number_numeric=None, markings=None, custom_values=None):  # noqa: E501
        """JournalEntryLinePostPostData - a model defined in Swagger"""  # noqa: E501
        self._account_year = None
        self._description = None
        self._marked_against_journal_entry_number = None
        self._journal_entry_number = None
        self._invoice_number = None
        self._currency_code_code = None
        self._sub_account_name = None
        self._journal_entry_type_name = None
        self._journal_entry_id = None
        self._status_code = None
        self._sub_account_number = None
        self._payment_id = None
        self._id = None
        self._period_no = None
        self._currency_code_id = None
        self._marked_against_journal_entry_line_id = None
        self._currency_code_short_code = None
        self._number_of_payments = None
        self._journal_entry_number_numeric = None
        self._markings = None
        self._custom_values = None
        self.discriminator = None
        if account_year is not None:
            self.account_year = account_year
        if description is not None:
            self.description = description
        if marked_against_journal_entry_number is not None:
            self.marked_against_journal_entry_number = marked_against_journal_entry_number
        if journal_entry_number is not None:
            self.journal_entry_number = journal_entry_number
        if invoice_number is not None:
            self.invoice_number = invoice_number
        if currency_code_code is not None:
            self.currency_code_code = currency_code_code
        if sub_account_name is not None:
            self.sub_account_name = sub_account_name
        if journal_entry_type_name is not None:
            self.journal_entry_type_name = journal_entry_type_name
        if journal_entry_id is not None:
            self.journal_entry_id = journal_entry_id
        if status_code is not None:
            self.status_code = status_code
        if sub_account_number is not None:
            self.sub_account_number = sub_account_number
        if payment_id is not None:
            self.payment_id = payment_id
        if id is not None:
            self.id = id
        if period_no is not None:
            self.period_no = period_no
        if currency_code_id is not None:
            self.currency_code_id = currency_code_id
        if marked_against_journal_entry_line_id is not None:
            self.marked_against_journal_entry_line_id = marked_against_journal_entry_line_id
        if currency_code_short_code is not None:
            self.currency_code_short_code = currency_code_short_code
        if number_of_payments is not None:
            self.number_of_payments = number_of_payments
        if journal_entry_number_numeric is not None:
            self.journal_entry_number_numeric = journal_entry_number_numeric
        if markings is not None:
            self.markings = markings
        if custom_values is not None:
            self.custom_values = custom_values

    @property
    def account_year(self):
        """Gets the account_year of this JournalEntryLinePostPostData.  # noqa: E501


        :return: The account_year of this JournalEntryLinePostPostData.  # noqa: E501
        :rtype: int
        """
        return self._account_year

    @account_year.setter
    def account_year(self, account_year):
        """Sets the account_year of this JournalEntryLinePostPostData.


        :param account_year: The account_year of this JournalEntryLinePostPostData.  # noqa: E501
        :type: int
        """

        self._account_year = account_year

    @property
    def description(self):
        """Gets the description of this JournalEntryLinePostPostData.  # noqa: E501


        :return: The description of this JournalEntryLinePostPostData.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this JournalEntryLinePostPostData.


        :param description: The description of this JournalEntryLinePostPostData.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def marked_against_journal_entry_number(self):
        """Gets the marked_against_journal_entry_number of this JournalEntryLinePostPostData.  # noqa: E501


        :return: The marked_against_journal_entry_number of this JournalEntryLinePostPostData.  # noqa: E501
        :rtype: str
        """
        return self._marked_against_journal_entry_number

    @marked_against_journal_entry_number.setter
    def marked_against_journal_entry_number(self, marked_against_journal_entry_number):
        """Sets the marked_against_journal_entry_number of this JournalEntryLinePostPostData.


        :param marked_against_journal_entry_number: The marked_against_journal_entry_number of this JournalEntryLinePostPostData.  # noqa: E501
        :type: str
        """

        self._marked_against_journal_entry_number = marked_against_journal_entry_number

    @property
    def journal_entry_number(self):
        """Gets the journal_entry_number of this JournalEntryLinePostPostData.  # noqa: E501


        :return: The journal_entry_number of this JournalEntryLinePostPostData.  # noqa: E501
        :rtype: str
        """
        return self._journal_entry_number

    @journal_entry_number.setter
    def journal_entry_number(self, journal_entry_number):
        """Sets the journal_entry_number of this JournalEntryLinePostPostData.


        :param journal_entry_number: The journal_entry_number of this JournalEntryLinePostPostData.  # noqa: E501
        :type: str
        """

        self._journal_entry_number = journal_entry_number

    @property
    def invoice_number(self):
        """Gets the invoice_number of this JournalEntryLinePostPostData.  # noqa: E501


        :return: The invoice_number of this JournalEntryLinePostPostData.  # noqa: E501
        :rtype: str
        """
        return self._invoice_number

    @invoice_number.setter
    def invoice_number(self, invoice_number):
        """Sets the invoice_number of this JournalEntryLinePostPostData.


        :param invoice_number: The invoice_number of this JournalEntryLinePostPostData.  # noqa: E501
        :type: str
        """

        self._invoice_number = invoice_number

    @property
    def currency_code_code(self):
        """Gets the currency_code_code of this JournalEntryLinePostPostData.  # noqa: E501


        :return: The currency_code_code of this JournalEntryLinePostPostData.  # noqa: E501
        :rtype: str
        """
        return self._currency_code_code

    @currency_code_code.setter
    def currency_code_code(self, currency_code_code):
        """Sets the currency_code_code of this JournalEntryLinePostPostData.


        :param currency_code_code: The currency_code_code of this JournalEntryLinePostPostData.  # noqa: E501
        :type: str
        """

        self._currency_code_code = currency_code_code

    @property
    def sub_account_name(self):
        """Gets the sub_account_name of this JournalEntryLinePostPostData.  # noqa: E501


        :return: The sub_account_name of this JournalEntryLinePostPostData.  # noqa: E501
        :rtype: str
        """
        return self._sub_account_name

    @sub_account_name.setter
    def sub_account_name(self, sub_account_name):
        """Sets the sub_account_name of this JournalEntryLinePostPostData.


        :param sub_account_name: The sub_account_name of this JournalEntryLinePostPostData.  # noqa: E501
        :type: str
        """

        self._sub_account_name = sub_account_name

    @property
    def journal_entry_type_name(self):
        """Gets the journal_entry_type_name of this JournalEntryLinePostPostData.  # noqa: E501


        :return: The journal_entry_type_name of this JournalEntryLinePostPostData.  # noqa: E501
        :rtype: str
        """
        return self._journal_entry_type_name

    @journal_entry_type_name.setter
    def journal_entry_type_name(self, journal_entry_type_name):
        """Sets the journal_entry_type_name of this JournalEntryLinePostPostData.


        :param journal_entry_type_name: The journal_entry_type_name of this JournalEntryLinePostPostData.  # noqa: E501
        :type: str
        """

        self._journal_entry_type_name = journal_entry_type_name

    @property
    def journal_entry_id(self):
        """Gets the journal_entry_id of this JournalEntryLinePostPostData.  # noqa: E501


        :return: The journal_entry_id of this JournalEntryLinePostPostData.  # noqa: E501
        :rtype: int
        """
        return self._journal_entry_id

    @journal_entry_id.setter
    def journal_entry_id(self, journal_entry_id):
        """Sets the journal_entry_id of this JournalEntryLinePostPostData.


        :param journal_entry_id: The journal_entry_id of this JournalEntryLinePostPostData.  # noqa: E501
        :type: int
        """

        self._journal_entry_id = journal_entry_id

    @property
    def status_code(self):
        """Gets the status_code of this JournalEntryLinePostPostData.  # noqa: E501


        :return: The status_code of this JournalEntryLinePostPostData.  # noqa: E501
        :rtype: int
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this JournalEntryLinePostPostData.


        :param status_code: The status_code of this JournalEntryLinePostPostData.  # noqa: E501
        :type: int
        """

        self._status_code = status_code

    @property
    def sub_account_number(self):
        """Gets the sub_account_number of this JournalEntryLinePostPostData.  # noqa: E501


        :return: The sub_account_number of this JournalEntryLinePostPostData.  # noqa: E501
        :rtype: int
        """
        return self._sub_account_number

    @sub_account_number.setter
    def sub_account_number(self, sub_account_number):
        """Sets the sub_account_number of this JournalEntryLinePostPostData.


        :param sub_account_number: The sub_account_number of this JournalEntryLinePostPostData.  # noqa: E501
        :type: int
        """

        self._sub_account_number = sub_account_number

    @property
    def payment_id(self):
        """Gets the payment_id of this JournalEntryLinePostPostData.  # noqa: E501


        :return: The payment_id of this JournalEntryLinePostPostData.  # noqa: E501
        :rtype: str
        """
        return self._payment_id

    @payment_id.setter
    def payment_id(self, payment_id):
        """Sets the payment_id of this JournalEntryLinePostPostData.


        :param payment_id: The payment_id of this JournalEntryLinePostPostData.  # noqa: E501
        :type: str
        """

        self._payment_id = payment_id

    @property
    def id(self):
        """Gets the id of this JournalEntryLinePostPostData.  # noqa: E501


        :return: The id of this JournalEntryLinePostPostData.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this JournalEntryLinePostPostData.


        :param id: The id of this JournalEntryLinePostPostData.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def period_no(self):
        """Gets the period_no of this JournalEntryLinePostPostData.  # noqa: E501


        :return: The period_no of this JournalEntryLinePostPostData.  # noqa: E501
        :rtype: int
        """
        return self._period_no

    @period_no.setter
    def period_no(self, period_no):
        """Sets the period_no of this JournalEntryLinePostPostData.


        :param period_no: The period_no of this JournalEntryLinePostPostData.  # noqa: E501
        :type: int
        """

        self._period_no = period_no

    @property
    def currency_code_id(self):
        """Gets the currency_code_id of this JournalEntryLinePostPostData.  # noqa: E501


        :return: The currency_code_id of this JournalEntryLinePostPostData.  # noqa: E501
        :rtype: int
        """
        return self._currency_code_id

    @currency_code_id.setter
    def currency_code_id(self, currency_code_id):
        """Sets the currency_code_id of this JournalEntryLinePostPostData.


        :param currency_code_id: The currency_code_id of this JournalEntryLinePostPostData.  # noqa: E501
        :type: int
        """

        self._currency_code_id = currency_code_id

    @property
    def marked_against_journal_entry_line_id(self):
        """Gets the marked_against_journal_entry_line_id of this JournalEntryLinePostPostData.  # noqa: E501


        :return: The marked_against_journal_entry_line_id of this JournalEntryLinePostPostData.  # noqa: E501
        :rtype: int
        """
        return self._marked_against_journal_entry_line_id

    @marked_against_journal_entry_line_id.setter
    def marked_against_journal_entry_line_id(self, marked_against_journal_entry_line_id):
        """Sets the marked_against_journal_entry_line_id of this JournalEntryLinePostPostData.


        :param marked_against_journal_entry_line_id: The marked_against_journal_entry_line_id of this JournalEntryLinePostPostData.  # noqa: E501
        :type: int
        """

        self._marked_against_journal_entry_line_id = marked_against_journal_entry_line_id

    @property
    def currency_code_short_code(self):
        """Gets the currency_code_short_code of this JournalEntryLinePostPostData.  # noqa: E501


        :return: The currency_code_short_code of this JournalEntryLinePostPostData.  # noqa: E501
        :rtype: str
        """
        return self._currency_code_short_code

    @currency_code_short_code.setter
    def currency_code_short_code(self, currency_code_short_code):
        """Sets the currency_code_short_code of this JournalEntryLinePostPostData.


        :param currency_code_short_code: The currency_code_short_code of this JournalEntryLinePostPostData.  # noqa: E501
        :type: str
        """

        self._currency_code_short_code = currency_code_short_code

    @property
    def number_of_payments(self):
        """Gets the number_of_payments of this JournalEntryLinePostPostData.  # noqa: E501


        :return: The number_of_payments of this JournalEntryLinePostPostData.  # noqa: E501
        :rtype: int
        """
        return self._number_of_payments

    @number_of_payments.setter
    def number_of_payments(self, number_of_payments):
        """Sets the number_of_payments of this JournalEntryLinePostPostData.


        :param number_of_payments: The number_of_payments of this JournalEntryLinePostPostData.  # noqa: E501
        :type: int
        """

        self._number_of_payments = number_of_payments

    @property
    def journal_entry_number_numeric(self):
        """Gets the journal_entry_number_numeric of this JournalEntryLinePostPostData.  # noqa: E501


        :return: The journal_entry_number_numeric of this JournalEntryLinePostPostData.  # noqa: E501
        :rtype: int
        """
        return self._journal_entry_number_numeric

    @journal_entry_number_numeric.setter
    def journal_entry_number_numeric(self, journal_entry_number_numeric):
        """Sets the journal_entry_number_numeric of this JournalEntryLinePostPostData.


        :param journal_entry_number_numeric: The journal_entry_number_numeric of this JournalEntryLinePostPostData.  # noqa: E501
        :type: int
        """

        self._journal_entry_number_numeric = journal_entry_number_numeric

    @property
    def markings(self):
        """Gets the markings of this JournalEntryLinePostPostData.  # noqa: E501


        :return: The markings of this JournalEntryLinePostPostData.  # noqa: E501
        :rtype: list[JournalEntryLinePostPostData]
        """
        return self._markings

    @markings.setter
    def markings(self, markings):
        """Sets the markings of this JournalEntryLinePostPostData.


        :param markings: The markings of this JournalEntryLinePostPostData.  # noqa: E501
        :type: list[JournalEntryLinePostPostData]
        """

        self._markings = markings

    @property
    def custom_values(self):
        """Gets the custom_values of this JournalEntryLinePostPostData.  # noqa: E501


        :return: The custom_values of this JournalEntryLinePostPostData.  # noqa: E501
        :rtype: CustomValues
        """
        return self._custom_values

    @custom_values.setter
    def custom_values(self, custom_values):
        """Sets the custom_values of this JournalEntryLinePostPostData.


        :param custom_values: The custom_values of this JournalEntryLinePostPostData.  # noqa: E501
        :type: CustomValues
        """

        self._custom_values = custom_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JournalEntryLinePostPostData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JournalEntryLinePostPostData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
