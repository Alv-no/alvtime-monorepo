# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EmployeeStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'year': 'int',
        'ssn': 'str',
        'status': 'str',
        'employee_number': 'int',
        'info': 'str',
        'employee_id': 'int',
        'changed_fields': 'list[FieldsChanged]',
        'custom_values': 'CustomValues'
    }

    attribute_map = {
        'year': 'year',
        'ssn': 'ssn',
        'status': 'status',
        'employee_number': 'employeeNumber',
        'info': 'info',
        'employee_id': 'employeeID',
        'changed_fields': 'changedFields',
        'custom_values': 'CustomValues'
    }

    def __init__(self, year=None, ssn=None, status=None, employee_number=None, info=None, employee_id=None, changed_fields=None, custom_values=None):  # noqa: E501
        """EmployeeStatus - a model defined in Swagger"""  # noqa: E501
        self._year = None
        self._ssn = None
        self._status = None
        self._employee_number = None
        self._info = None
        self._employee_id = None
        self._changed_fields = None
        self._custom_values = None
        self.discriminator = None
        if year is not None:
            self.year = year
        if ssn is not None:
            self.ssn = ssn
        if status is not None:
            self.status = status
        if employee_number is not None:
            self.employee_number = employee_number
        if info is not None:
            self.info = info
        if employee_id is not None:
            self.employee_id = employee_id
        if changed_fields is not None:
            self.changed_fields = changed_fields
        if custom_values is not None:
            self.custom_values = custom_values

    @property
    def year(self):
        """Gets the year of this EmployeeStatus.  # noqa: E501


        :return: The year of this EmployeeStatus.  # noqa: E501
        :rtype: int
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this EmployeeStatus.


        :param year: The year of this EmployeeStatus.  # noqa: E501
        :type: int
        """

        self._year = year

    @property
    def ssn(self):
        """Gets the ssn of this EmployeeStatus.  # noqa: E501


        :return: The ssn of this EmployeeStatus.  # noqa: E501
        :rtype: str
        """
        return self._ssn

    @ssn.setter
    def ssn(self, ssn):
        """Sets the ssn of this EmployeeStatus.


        :param ssn: The ssn of this EmployeeStatus.  # noqa: E501
        :type: str
        """

        self._ssn = ssn

    @property
    def status(self):
        """Gets the status of this EmployeeStatus.  # noqa: E501


        :return: The status of this EmployeeStatus.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this EmployeeStatus.


        :param status: The status of this EmployeeStatus.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def employee_number(self):
        """Gets the employee_number of this EmployeeStatus.  # noqa: E501


        :return: The employee_number of this EmployeeStatus.  # noqa: E501
        :rtype: int
        """
        return self._employee_number

    @employee_number.setter
    def employee_number(self, employee_number):
        """Sets the employee_number of this EmployeeStatus.


        :param employee_number: The employee_number of this EmployeeStatus.  # noqa: E501
        :type: int
        """

        self._employee_number = employee_number

    @property
    def info(self):
        """Gets the info of this EmployeeStatus.  # noqa: E501


        :return: The info of this EmployeeStatus.  # noqa: E501
        :rtype: str
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this EmployeeStatus.


        :param info: The info of this EmployeeStatus.  # noqa: E501
        :type: str
        """

        self._info = info

    @property
    def employee_id(self):
        """Gets the employee_id of this EmployeeStatus.  # noqa: E501


        :return: The employee_id of this EmployeeStatus.  # noqa: E501
        :rtype: int
        """
        return self._employee_id

    @employee_id.setter
    def employee_id(self, employee_id):
        """Sets the employee_id of this EmployeeStatus.


        :param employee_id: The employee_id of this EmployeeStatus.  # noqa: E501
        :type: int
        """

        self._employee_id = employee_id

    @property
    def changed_fields(self):
        """Gets the changed_fields of this EmployeeStatus.  # noqa: E501


        :return: The changed_fields of this EmployeeStatus.  # noqa: E501
        :rtype: list[FieldsChanged]
        """
        return self._changed_fields

    @changed_fields.setter
    def changed_fields(self, changed_fields):
        """Sets the changed_fields of this EmployeeStatus.


        :param changed_fields: The changed_fields of this EmployeeStatus.  # noqa: E501
        :type: list[FieldsChanged]
        """

        self._changed_fields = changed_fields

    @property
    def custom_values(self):
        """Gets the custom_values of this EmployeeStatus.  # noqa: E501


        :return: The custom_values of this EmployeeStatus.  # noqa: E501
        :rtype: CustomValues
        """
        return self._custom_values

    @custom_values.setter
    def custom_values(self, custom_values):
        """Sets the custom_values of this EmployeeStatus.


        :param custom_values: The custom_values of this EmployeeStatus.  # noqa: E501
        :type: CustomValues
        """

        self._custom_values = custom_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EmployeeStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmployeeStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
