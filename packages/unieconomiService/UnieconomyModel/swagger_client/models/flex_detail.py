# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FlexDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_weekend': 'bool',
        'valid_time_off': 'int',
        'worked_minutes': 'int',
        'expected_minutes': 'int',
        'custom_values': 'CustomValues'
    }

    attribute_map = {
        'is_weekend': 'IsWeekend',
        'valid_time_off': 'ValidTimeOff',
        'worked_minutes': 'WorkedMinutes',
        'expected_minutes': 'ExpectedMinutes',
        'custom_values': 'CustomValues'
    }

    def __init__(self, is_weekend=None, valid_time_off=None, worked_minutes=None, expected_minutes=None, custom_values=None):  # noqa: E501
        """FlexDetail - a model defined in Swagger"""  # noqa: E501
        self._is_weekend = None
        self._valid_time_off = None
        self._worked_minutes = None
        self._expected_minutes = None
        self._custom_values = None
        self.discriminator = None
        if is_weekend is not None:
            self.is_weekend = is_weekend
        if valid_time_off is not None:
            self.valid_time_off = valid_time_off
        if worked_minutes is not None:
            self.worked_minutes = worked_minutes
        if expected_minutes is not None:
            self.expected_minutes = expected_minutes
        if custom_values is not None:
            self.custom_values = custom_values

    @property
    def is_weekend(self):
        """Gets the is_weekend of this FlexDetail.  # noqa: E501


        :return: The is_weekend of this FlexDetail.  # noqa: E501
        :rtype: bool
        """
        return self._is_weekend

    @is_weekend.setter
    def is_weekend(self, is_weekend):
        """Sets the is_weekend of this FlexDetail.


        :param is_weekend: The is_weekend of this FlexDetail.  # noqa: E501
        :type: bool
        """

        self._is_weekend = is_weekend

    @property
    def valid_time_off(self):
        """Gets the valid_time_off of this FlexDetail.  # noqa: E501


        :return: The valid_time_off of this FlexDetail.  # noqa: E501
        :rtype: int
        """
        return self._valid_time_off

    @valid_time_off.setter
    def valid_time_off(self, valid_time_off):
        """Sets the valid_time_off of this FlexDetail.


        :param valid_time_off: The valid_time_off of this FlexDetail.  # noqa: E501
        :type: int
        """

        self._valid_time_off = valid_time_off

    @property
    def worked_minutes(self):
        """Gets the worked_minutes of this FlexDetail.  # noqa: E501


        :return: The worked_minutes of this FlexDetail.  # noqa: E501
        :rtype: int
        """
        return self._worked_minutes

    @worked_minutes.setter
    def worked_minutes(self, worked_minutes):
        """Sets the worked_minutes of this FlexDetail.


        :param worked_minutes: The worked_minutes of this FlexDetail.  # noqa: E501
        :type: int
        """

        self._worked_minutes = worked_minutes

    @property
    def expected_minutes(self):
        """Gets the expected_minutes of this FlexDetail.  # noqa: E501


        :return: The expected_minutes of this FlexDetail.  # noqa: E501
        :rtype: int
        """
        return self._expected_minutes

    @expected_minutes.setter
    def expected_minutes(self, expected_minutes):
        """Sets the expected_minutes of this FlexDetail.


        :param expected_minutes: The expected_minutes of this FlexDetail.  # noqa: E501
        :type: int
        """

        self._expected_minutes = expected_minutes

    @property
    def custom_values(self):
        """Gets the custom_values of this FlexDetail.  # noqa: E501


        :return: The custom_values of this FlexDetail.  # noqa: E501
        :rtype: CustomValues
        """
        return self._custom_values

    @custom_values.setter
    def custom_values(self, custom_values):
        """Sets the custom_values of this FlexDetail.


        :param custom_values: The custom_values of this FlexDetail.  # noqa: E501
        :type: CustomValues
        """

        self._custom_values = custom_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FlexDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FlexDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
