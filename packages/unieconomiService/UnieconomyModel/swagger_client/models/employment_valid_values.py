# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EmploymentValidValues(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'remuneration_type': 'bool',
        'employment': 'str',
        'last_salary_change_date': 'bool',
        'work_percent': 'bool',
        'trade_area': 'bool',
        'seniority_date': 'bool',
        'end_date': 'bool',
        'user_defined_rate': 'bool',
        'ship_reg': 'bool',
        'deleted': 'bool',
        'ship_type': 'bool',
        'type_of_employment': 'bool',
        'job_code': 'bool',
        'working_hours_scheme': 'bool',
        'start_date': 'bool',
        'id': 'int',
        'hours_per_week': 'bool',
        'updated_by': 'str',
        'created_by': 'str',
        'job_name': 'bool',
        'month_rate': 'bool',
        'payment_type': 'str',
        'last_work_percent_change': 'bool',
        'hour_rate': 'bool',
        'custom_values': 'CustomValues'
    }

    attribute_map = {
        'remuneration_type': 'RemunerationType',
        'employment': 'employment',
        'last_salary_change_date': 'LastSalaryChangeDate',
        'work_percent': 'WorkPercent',
        'trade_area': 'TradeArea',
        'seniority_date': 'SeniorityDate',
        'end_date': 'EndDate',
        'user_defined_rate': 'UserDefinedRate',
        'ship_reg': 'ShipReg',
        'deleted': 'Deleted',
        'ship_type': 'ShipType',
        'type_of_employment': 'typeOfEmployment',
        'job_code': 'JobCode',
        'working_hours_scheme': 'WorkingHoursScheme',
        'start_date': 'StartDate',
        'id': 'ID',
        'hours_per_week': 'HoursPerWeek',
        'updated_by': 'UpdatedBy',
        'created_by': 'CreatedBy',
        'job_name': 'JobName',
        'month_rate': 'MonthRate',
        'payment_type': 'PaymentType',
        'last_work_percent_change': 'LastWorkPercentChange',
        'hour_rate': 'HourRate',
        'custom_values': 'CustomValues'
    }

    def __init__(self, remuneration_type=None, employment=None, last_salary_change_date=None, work_percent=None, trade_area=None, seniority_date=None, end_date=None, user_defined_rate=None, ship_reg=None, deleted=None, ship_type=None, type_of_employment=None, job_code=None, working_hours_scheme=None, start_date=None, id=None, hours_per_week=None, updated_by=None, created_by=None, job_name=None, month_rate=None, payment_type=None, last_work_percent_change=None, hour_rate=None, custom_values=None):  # noqa: E501
        """EmploymentValidValues - a model defined in Swagger"""  # noqa: E501
        self._remuneration_type = None
        self._employment = None
        self._last_salary_change_date = None
        self._work_percent = None
        self._trade_area = None
        self._seniority_date = None
        self._end_date = None
        self._user_defined_rate = None
        self._ship_reg = None
        self._deleted = None
        self._ship_type = None
        self._type_of_employment = None
        self._job_code = None
        self._working_hours_scheme = None
        self._start_date = None
        self._id = None
        self._hours_per_week = None
        self._updated_by = None
        self._created_by = None
        self._job_name = None
        self._month_rate = None
        self._payment_type = None
        self._last_work_percent_change = None
        self._hour_rate = None
        self._custom_values = None
        self.discriminator = None
        if remuneration_type is not None:
            self.remuneration_type = remuneration_type
        if employment is not None:
            self.employment = employment
        if last_salary_change_date is not None:
            self.last_salary_change_date = last_salary_change_date
        if work_percent is not None:
            self.work_percent = work_percent
        if trade_area is not None:
            self.trade_area = trade_area
        if seniority_date is not None:
            self.seniority_date = seniority_date
        if end_date is not None:
            self.end_date = end_date
        if user_defined_rate is not None:
            self.user_defined_rate = user_defined_rate
        if ship_reg is not None:
            self.ship_reg = ship_reg
        if deleted is not None:
            self.deleted = deleted
        if ship_type is not None:
            self.ship_type = ship_type
        if type_of_employment is not None:
            self.type_of_employment = type_of_employment
        if job_code is not None:
            self.job_code = job_code
        if working_hours_scheme is not None:
            self.working_hours_scheme = working_hours_scheme
        if start_date is not None:
            self.start_date = start_date
        if id is not None:
            self.id = id
        if hours_per_week is not None:
            self.hours_per_week = hours_per_week
        if updated_by is not None:
            self.updated_by = updated_by
        if created_by is not None:
            self.created_by = created_by
        if job_name is not None:
            self.job_name = job_name
        if month_rate is not None:
            self.month_rate = month_rate
        if payment_type is not None:
            self.payment_type = payment_type
        if last_work_percent_change is not None:
            self.last_work_percent_change = last_work_percent_change
        if hour_rate is not None:
            self.hour_rate = hour_rate
        if custom_values is not None:
            self.custom_values = custom_values

    @property
    def remuneration_type(self):
        """Gets the remuneration_type of this EmploymentValidValues.  # noqa: E501


        :return: The remuneration_type of this EmploymentValidValues.  # noqa: E501
        :rtype: bool
        """
        return self._remuneration_type

    @remuneration_type.setter
    def remuneration_type(self, remuneration_type):
        """Sets the remuneration_type of this EmploymentValidValues.


        :param remuneration_type: The remuneration_type of this EmploymentValidValues.  # noqa: E501
        :type: bool
        """

        self._remuneration_type = remuneration_type

    @property
    def employment(self):
        """Gets the employment of this EmploymentValidValues.  # noqa: E501


        :return: The employment of this EmploymentValidValues.  # noqa: E501
        :rtype: str
        """
        return self._employment

    @employment.setter
    def employment(self, employment):
        """Sets the employment of this EmploymentValidValues.


        :param employment: The employment of this EmploymentValidValues.  # noqa: E501
        :type: str
        """

        self._employment = employment

    @property
    def last_salary_change_date(self):
        """Gets the last_salary_change_date of this EmploymentValidValues.  # noqa: E501


        :return: The last_salary_change_date of this EmploymentValidValues.  # noqa: E501
        :rtype: bool
        """
        return self._last_salary_change_date

    @last_salary_change_date.setter
    def last_salary_change_date(self, last_salary_change_date):
        """Sets the last_salary_change_date of this EmploymentValidValues.


        :param last_salary_change_date: The last_salary_change_date of this EmploymentValidValues.  # noqa: E501
        :type: bool
        """

        self._last_salary_change_date = last_salary_change_date

    @property
    def work_percent(self):
        """Gets the work_percent of this EmploymentValidValues.  # noqa: E501


        :return: The work_percent of this EmploymentValidValues.  # noqa: E501
        :rtype: bool
        """
        return self._work_percent

    @work_percent.setter
    def work_percent(self, work_percent):
        """Sets the work_percent of this EmploymentValidValues.


        :param work_percent: The work_percent of this EmploymentValidValues.  # noqa: E501
        :type: bool
        """

        self._work_percent = work_percent

    @property
    def trade_area(self):
        """Gets the trade_area of this EmploymentValidValues.  # noqa: E501


        :return: The trade_area of this EmploymentValidValues.  # noqa: E501
        :rtype: bool
        """
        return self._trade_area

    @trade_area.setter
    def trade_area(self, trade_area):
        """Sets the trade_area of this EmploymentValidValues.


        :param trade_area: The trade_area of this EmploymentValidValues.  # noqa: E501
        :type: bool
        """

        self._trade_area = trade_area

    @property
    def seniority_date(self):
        """Gets the seniority_date of this EmploymentValidValues.  # noqa: E501


        :return: The seniority_date of this EmploymentValidValues.  # noqa: E501
        :rtype: bool
        """
        return self._seniority_date

    @seniority_date.setter
    def seniority_date(self, seniority_date):
        """Sets the seniority_date of this EmploymentValidValues.


        :param seniority_date: The seniority_date of this EmploymentValidValues.  # noqa: E501
        :type: bool
        """

        self._seniority_date = seniority_date

    @property
    def end_date(self):
        """Gets the end_date of this EmploymentValidValues.  # noqa: E501


        :return: The end_date of this EmploymentValidValues.  # noqa: E501
        :rtype: bool
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this EmploymentValidValues.


        :param end_date: The end_date of this EmploymentValidValues.  # noqa: E501
        :type: bool
        """

        self._end_date = end_date

    @property
    def user_defined_rate(self):
        """Gets the user_defined_rate of this EmploymentValidValues.  # noqa: E501


        :return: The user_defined_rate of this EmploymentValidValues.  # noqa: E501
        :rtype: bool
        """
        return self._user_defined_rate

    @user_defined_rate.setter
    def user_defined_rate(self, user_defined_rate):
        """Sets the user_defined_rate of this EmploymentValidValues.


        :param user_defined_rate: The user_defined_rate of this EmploymentValidValues.  # noqa: E501
        :type: bool
        """

        self._user_defined_rate = user_defined_rate

    @property
    def ship_reg(self):
        """Gets the ship_reg of this EmploymentValidValues.  # noqa: E501


        :return: The ship_reg of this EmploymentValidValues.  # noqa: E501
        :rtype: bool
        """
        return self._ship_reg

    @ship_reg.setter
    def ship_reg(self, ship_reg):
        """Sets the ship_reg of this EmploymentValidValues.


        :param ship_reg: The ship_reg of this EmploymentValidValues.  # noqa: E501
        :type: bool
        """

        self._ship_reg = ship_reg

    @property
    def deleted(self):
        """Gets the deleted of this EmploymentValidValues.  # noqa: E501


        :return: The deleted of this EmploymentValidValues.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this EmploymentValidValues.


        :param deleted: The deleted of this EmploymentValidValues.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def ship_type(self):
        """Gets the ship_type of this EmploymentValidValues.  # noqa: E501


        :return: The ship_type of this EmploymentValidValues.  # noqa: E501
        :rtype: bool
        """
        return self._ship_type

    @ship_type.setter
    def ship_type(self, ship_type):
        """Sets the ship_type of this EmploymentValidValues.


        :param ship_type: The ship_type of this EmploymentValidValues.  # noqa: E501
        :type: bool
        """

        self._ship_type = ship_type

    @property
    def type_of_employment(self):
        """Gets the type_of_employment of this EmploymentValidValues.  # noqa: E501


        :return: The type_of_employment of this EmploymentValidValues.  # noqa: E501
        :rtype: bool
        """
        return self._type_of_employment

    @type_of_employment.setter
    def type_of_employment(self, type_of_employment):
        """Sets the type_of_employment of this EmploymentValidValues.


        :param type_of_employment: The type_of_employment of this EmploymentValidValues.  # noqa: E501
        :type: bool
        """

        self._type_of_employment = type_of_employment

    @property
    def job_code(self):
        """Gets the job_code of this EmploymentValidValues.  # noqa: E501


        :return: The job_code of this EmploymentValidValues.  # noqa: E501
        :rtype: bool
        """
        return self._job_code

    @job_code.setter
    def job_code(self, job_code):
        """Sets the job_code of this EmploymentValidValues.


        :param job_code: The job_code of this EmploymentValidValues.  # noqa: E501
        :type: bool
        """

        self._job_code = job_code

    @property
    def working_hours_scheme(self):
        """Gets the working_hours_scheme of this EmploymentValidValues.  # noqa: E501


        :return: The working_hours_scheme of this EmploymentValidValues.  # noqa: E501
        :rtype: bool
        """
        return self._working_hours_scheme

    @working_hours_scheme.setter
    def working_hours_scheme(self, working_hours_scheme):
        """Sets the working_hours_scheme of this EmploymentValidValues.


        :param working_hours_scheme: The working_hours_scheme of this EmploymentValidValues.  # noqa: E501
        :type: bool
        """

        self._working_hours_scheme = working_hours_scheme

    @property
    def start_date(self):
        """Gets the start_date of this EmploymentValidValues.  # noqa: E501


        :return: The start_date of this EmploymentValidValues.  # noqa: E501
        :rtype: bool
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this EmploymentValidValues.


        :param start_date: The start_date of this EmploymentValidValues.  # noqa: E501
        :type: bool
        """

        self._start_date = start_date

    @property
    def id(self):
        """Gets the id of this EmploymentValidValues.  # noqa: E501


        :return: The id of this EmploymentValidValues.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EmploymentValidValues.


        :param id: The id of this EmploymentValidValues.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def hours_per_week(self):
        """Gets the hours_per_week of this EmploymentValidValues.  # noqa: E501


        :return: The hours_per_week of this EmploymentValidValues.  # noqa: E501
        :rtype: bool
        """
        return self._hours_per_week

    @hours_per_week.setter
    def hours_per_week(self, hours_per_week):
        """Sets the hours_per_week of this EmploymentValidValues.


        :param hours_per_week: The hours_per_week of this EmploymentValidValues.  # noqa: E501
        :type: bool
        """

        self._hours_per_week = hours_per_week

    @property
    def updated_by(self):
        """Gets the updated_by of this EmploymentValidValues.  # noqa: E501


        :return: The updated_by of this EmploymentValidValues.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this EmploymentValidValues.


        :param updated_by: The updated_by of this EmploymentValidValues.  # noqa: E501
        :type: str
        """

        self._updated_by = updated_by

    @property
    def created_by(self):
        """Gets the created_by of this EmploymentValidValues.  # noqa: E501


        :return: The created_by of this EmploymentValidValues.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this EmploymentValidValues.


        :param created_by: The created_by of this EmploymentValidValues.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def job_name(self):
        """Gets the job_name of this EmploymentValidValues.  # noqa: E501


        :return: The job_name of this EmploymentValidValues.  # noqa: E501
        :rtype: bool
        """
        return self._job_name

    @job_name.setter
    def job_name(self, job_name):
        """Sets the job_name of this EmploymentValidValues.


        :param job_name: The job_name of this EmploymentValidValues.  # noqa: E501
        :type: bool
        """

        self._job_name = job_name

    @property
    def month_rate(self):
        """Gets the month_rate of this EmploymentValidValues.  # noqa: E501


        :return: The month_rate of this EmploymentValidValues.  # noqa: E501
        :rtype: bool
        """
        return self._month_rate

    @month_rate.setter
    def month_rate(self, month_rate):
        """Sets the month_rate of this EmploymentValidValues.


        :param month_rate: The month_rate of this EmploymentValidValues.  # noqa: E501
        :type: bool
        """

        self._month_rate = month_rate

    @property
    def payment_type(self):
        """Gets the payment_type of this EmploymentValidValues.  # noqa: E501


        :return: The payment_type of this EmploymentValidValues.  # noqa: E501
        :rtype: str
        """
        return self._payment_type

    @payment_type.setter
    def payment_type(self, payment_type):
        """Sets the payment_type of this EmploymentValidValues.


        :param payment_type: The payment_type of this EmploymentValidValues.  # noqa: E501
        :type: str
        """

        self._payment_type = payment_type

    @property
    def last_work_percent_change(self):
        """Gets the last_work_percent_change of this EmploymentValidValues.  # noqa: E501


        :return: The last_work_percent_change of this EmploymentValidValues.  # noqa: E501
        :rtype: bool
        """
        return self._last_work_percent_change

    @last_work_percent_change.setter
    def last_work_percent_change(self, last_work_percent_change):
        """Sets the last_work_percent_change of this EmploymentValidValues.


        :param last_work_percent_change: The last_work_percent_change of this EmploymentValidValues.  # noqa: E501
        :type: bool
        """

        self._last_work_percent_change = last_work_percent_change

    @property
    def hour_rate(self):
        """Gets the hour_rate of this EmploymentValidValues.  # noqa: E501


        :return: The hour_rate of this EmploymentValidValues.  # noqa: E501
        :rtype: bool
        """
        return self._hour_rate

    @hour_rate.setter
    def hour_rate(self, hour_rate):
        """Sets the hour_rate of this EmploymentValidValues.


        :param hour_rate: The hour_rate of this EmploymentValidValues.  # noqa: E501
        :type: bool
        """

        self._hour_rate = hour_rate

    @property
    def custom_values(self):
        """Gets the custom_values of this EmploymentValidValues.  # noqa: E501


        :return: The custom_values of this EmploymentValidValues.  # noqa: E501
        :rtype: CustomValues
        """
        return self._custom_values

    @custom_values.setter
    def custom_values(self, custom_values):
        """Sets the custom_values of this EmploymentValidValues.


        :param custom_values: The custom_values of this EmploymentValidValues.  # noqa: E501
        :type: CustomValues
        """

        self._custom_values = custom_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EmploymentValidValues, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmploymentValidValues):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
