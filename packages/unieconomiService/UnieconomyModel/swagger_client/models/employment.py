# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Employment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'remuneration_type': 'str',
        'end_date_reason': 'str',
        'trade_area': 'str',
        'dimensions_id': 'int',
        'standard': 'bool',
        'ship_reg': 'str',
        'status_code': 'int',
        'deleted': 'bool',
        'ledger_account': 'str',
        'ship_type': 'str',
        'type_of_employment': 'str',
        'employee_number': 'int',
        'job_code': 'str',
        'working_hours_scheme': 'str',
        'regulative_step_nr': 'int',
        'id': 'int',
        'updated_by': 'str',
        'created_by': 'str',
        'regulative_group_id': 'int',
        'job_name': 'str',
        'sub_entity_id': 'int',
        'pay_grade': 'str',
        'employment_type': 'str',
        'employee_id': 'int',
        'employee': 'Employee',
        'dimensions': 'Dimensions',
        'leaves': 'list[EmployeeLeave]',
        'custom_values': 'CustomValues'
    }

    attribute_map = {
        'remuneration_type': 'RemunerationType',
        'end_date_reason': 'EndDateReason',
        'trade_area': 'TradeArea',
        'dimensions_id': 'DimensionsID',
        'standard': 'Standard',
        'ship_reg': 'ShipReg',
        'status_code': 'StatusCode',
        'deleted': 'Deleted',
        'ledger_account': 'LedgerAccount',
        'ship_type': 'ShipType',
        'type_of_employment': 'TypeOfEmployment',
        'employee_number': 'EmployeeNumber',
        'job_code': 'JobCode',
        'working_hours_scheme': 'WorkingHoursScheme',
        'regulative_step_nr': 'RegulativeStepNr',
        'id': 'ID',
        'updated_by': 'UpdatedBy',
        'created_by': 'CreatedBy',
        'regulative_group_id': 'RegulativeGroupID',
        'job_name': 'JobName',
        'sub_entity_id': 'SubEntityID',
        'pay_grade': 'PayGrade',
        'employment_type': 'EmploymentType',
        'employee_id': 'EmployeeID',
        'employee': 'Employee',
        'dimensions': 'Dimensions',
        'leaves': 'Leaves',
        'custom_values': 'CustomValues'
    }

    def __init__(self, remuneration_type=None, end_date_reason=None, trade_area=None, dimensions_id=None, standard=None, ship_reg=None, status_code=None, deleted=None, ledger_account=None, ship_type=None, type_of_employment=None, employee_number=None, job_code=None, working_hours_scheme=None, regulative_step_nr=None, id=None, updated_by=None, created_by=None, regulative_group_id=None, job_name=None, sub_entity_id=None, pay_grade=None, employment_type=None, employee_id=None, employee=None, dimensions=None, leaves=None, custom_values=None):  # noqa: E501
        """Employment - a model defined in Swagger"""  # noqa: E501
        self._remuneration_type = None
        self._end_date_reason = None
        self._trade_area = None
        self._dimensions_id = None
        self._standard = None
        self._ship_reg = None
        self._status_code = None
        self._deleted = None
        self._ledger_account = None
        self._ship_type = None
        self._type_of_employment = None
        self._employee_number = None
        self._job_code = None
        self._working_hours_scheme = None
        self._regulative_step_nr = None
        self._id = None
        self._updated_by = None
        self._created_by = None
        self._regulative_group_id = None
        self._job_name = None
        self._sub_entity_id = None
        self._pay_grade = None
        self._employment_type = None
        self._employee_id = None
        self._employee = None
        self._dimensions = None
        self._leaves = None
        self._custom_values = None
        self.discriminator = None
        if remuneration_type is not None:
            self.remuneration_type = remuneration_type
        if end_date_reason is not None:
            self.end_date_reason = end_date_reason
        if trade_area is not None:
            self.trade_area = trade_area
        if dimensions_id is not None:
            self.dimensions_id = dimensions_id
        if standard is not None:
            self.standard = standard
        if ship_reg is not None:
            self.ship_reg = ship_reg
        if status_code is not None:
            self.status_code = status_code
        if deleted is not None:
            self.deleted = deleted
        if ledger_account is not None:
            self.ledger_account = ledger_account
        if ship_type is not None:
            self.ship_type = ship_type
        if type_of_employment is not None:
            self.type_of_employment = type_of_employment
        if employee_number is not None:
            self.employee_number = employee_number
        if job_code is not None:
            self.job_code = job_code
        if working_hours_scheme is not None:
            self.working_hours_scheme = working_hours_scheme
        if regulative_step_nr is not None:
            self.regulative_step_nr = regulative_step_nr
        if id is not None:
            self.id = id
        if updated_by is not None:
            self.updated_by = updated_by
        if created_by is not None:
            self.created_by = created_by
        if regulative_group_id is not None:
            self.regulative_group_id = regulative_group_id
        if job_name is not None:
            self.job_name = job_name
        if sub_entity_id is not None:
            self.sub_entity_id = sub_entity_id
        if pay_grade is not None:
            self.pay_grade = pay_grade
        if employment_type is not None:
            self.employment_type = employment_type
        if employee_id is not None:
            self.employee_id = employee_id
        if employee is not None:
            self.employee = employee
        if dimensions is not None:
            self.dimensions = dimensions
        if leaves is not None:
            self.leaves = leaves
        if custom_values is not None:
            self.custom_values = custom_values

    @property
    def remuneration_type(self):
        """Gets the remuneration_type of this Employment.  # noqa: E501


        :return: The remuneration_type of this Employment.  # noqa: E501
        :rtype: str
        """
        return self._remuneration_type

    @remuneration_type.setter
    def remuneration_type(self, remuneration_type):
        """Sets the remuneration_type of this Employment.


        :param remuneration_type: The remuneration_type of this Employment.  # noqa: E501
        :type: str
        """

        self._remuneration_type = remuneration_type

    @property
    def end_date_reason(self):
        """Gets the end_date_reason of this Employment.  # noqa: E501


        :return: The end_date_reason of this Employment.  # noqa: E501
        :rtype: str
        """
        return self._end_date_reason

    @end_date_reason.setter
    def end_date_reason(self, end_date_reason):
        """Sets the end_date_reason of this Employment.


        :param end_date_reason: The end_date_reason of this Employment.  # noqa: E501
        :type: str
        """

        self._end_date_reason = end_date_reason

    @property
    def trade_area(self):
        """Gets the trade_area of this Employment.  # noqa: E501


        :return: The trade_area of this Employment.  # noqa: E501
        :rtype: str
        """
        return self._trade_area

    @trade_area.setter
    def trade_area(self, trade_area):
        """Sets the trade_area of this Employment.


        :param trade_area: The trade_area of this Employment.  # noqa: E501
        :type: str
        """

        self._trade_area = trade_area

    @property
    def dimensions_id(self):
        """Gets the dimensions_id of this Employment.  # noqa: E501


        :return: The dimensions_id of this Employment.  # noqa: E501
        :rtype: int
        """
        return self._dimensions_id

    @dimensions_id.setter
    def dimensions_id(self, dimensions_id):
        """Sets the dimensions_id of this Employment.


        :param dimensions_id: The dimensions_id of this Employment.  # noqa: E501
        :type: int
        """

        self._dimensions_id = dimensions_id

    @property
    def standard(self):
        """Gets the standard of this Employment.  # noqa: E501


        :return: The standard of this Employment.  # noqa: E501
        :rtype: bool
        """
        return self._standard

    @standard.setter
    def standard(self, standard):
        """Sets the standard of this Employment.


        :param standard: The standard of this Employment.  # noqa: E501
        :type: bool
        """

        self._standard = standard

    @property
    def ship_reg(self):
        """Gets the ship_reg of this Employment.  # noqa: E501


        :return: The ship_reg of this Employment.  # noqa: E501
        :rtype: str
        """
        return self._ship_reg

    @ship_reg.setter
    def ship_reg(self, ship_reg):
        """Sets the ship_reg of this Employment.


        :param ship_reg: The ship_reg of this Employment.  # noqa: E501
        :type: str
        """

        self._ship_reg = ship_reg

    @property
    def status_code(self):
        """Gets the status_code of this Employment.  # noqa: E501


        :return: The status_code of this Employment.  # noqa: E501
        :rtype: int
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this Employment.


        :param status_code: The status_code of this Employment.  # noqa: E501
        :type: int
        """

        self._status_code = status_code

    @property
    def deleted(self):
        """Gets the deleted of this Employment.  # noqa: E501


        :return: The deleted of this Employment.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this Employment.


        :param deleted: The deleted of this Employment.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def ledger_account(self):
        """Gets the ledger_account of this Employment.  # noqa: E501


        :return: The ledger_account of this Employment.  # noqa: E501
        :rtype: str
        """
        return self._ledger_account

    @ledger_account.setter
    def ledger_account(self, ledger_account):
        """Sets the ledger_account of this Employment.


        :param ledger_account: The ledger_account of this Employment.  # noqa: E501
        :type: str
        """

        self._ledger_account = ledger_account

    @property
    def ship_type(self):
        """Gets the ship_type of this Employment.  # noqa: E501


        :return: The ship_type of this Employment.  # noqa: E501
        :rtype: str
        """
        return self._ship_type

    @ship_type.setter
    def ship_type(self, ship_type):
        """Sets the ship_type of this Employment.


        :param ship_type: The ship_type of this Employment.  # noqa: E501
        :type: str
        """

        self._ship_type = ship_type

    @property
    def type_of_employment(self):
        """Gets the type_of_employment of this Employment.  # noqa: E501


        :return: The type_of_employment of this Employment.  # noqa: E501
        :rtype: str
        """
        return self._type_of_employment

    @type_of_employment.setter
    def type_of_employment(self, type_of_employment):
        """Sets the type_of_employment of this Employment.


        :param type_of_employment: The type_of_employment of this Employment.  # noqa: E501
        :type: str
        """

        self._type_of_employment = type_of_employment

    @property
    def employee_number(self):
        """Gets the employee_number of this Employment.  # noqa: E501


        :return: The employee_number of this Employment.  # noqa: E501
        :rtype: int
        """
        return self._employee_number

    @employee_number.setter
    def employee_number(self, employee_number):
        """Sets the employee_number of this Employment.


        :param employee_number: The employee_number of this Employment.  # noqa: E501
        :type: int
        """

        self._employee_number = employee_number

    @property
    def job_code(self):
        """Gets the job_code of this Employment.  # noqa: E501


        :return: The job_code of this Employment.  # noqa: E501
        :rtype: str
        """
        return self._job_code

    @job_code.setter
    def job_code(self, job_code):
        """Sets the job_code of this Employment.


        :param job_code: The job_code of this Employment.  # noqa: E501
        :type: str
        """

        self._job_code = job_code

    @property
    def working_hours_scheme(self):
        """Gets the working_hours_scheme of this Employment.  # noqa: E501


        :return: The working_hours_scheme of this Employment.  # noqa: E501
        :rtype: str
        """
        return self._working_hours_scheme

    @working_hours_scheme.setter
    def working_hours_scheme(self, working_hours_scheme):
        """Sets the working_hours_scheme of this Employment.


        :param working_hours_scheme: The working_hours_scheme of this Employment.  # noqa: E501
        :type: str
        """

        self._working_hours_scheme = working_hours_scheme

    @property
    def regulative_step_nr(self):
        """Gets the regulative_step_nr of this Employment.  # noqa: E501


        :return: The regulative_step_nr of this Employment.  # noqa: E501
        :rtype: int
        """
        return self._regulative_step_nr

    @regulative_step_nr.setter
    def regulative_step_nr(self, regulative_step_nr):
        """Sets the regulative_step_nr of this Employment.


        :param regulative_step_nr: The regulative_step_nr of this Employment.  # noqa: E501
        :type: int
        """

        self._regulative_step_nr = regulative_step_nr

    @property
    def id(self):
        """Gets the id of this Employment.  # noqa: E501


        :return: The id of this Employment.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Employment.


        :param id: The id of this Employment.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def updated_by(self):
        """Gets the updated_by of this Employment.  # noqa: E501


        :return: The updated_by of this Employment.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this Employment.


        :param updated_by: The updated_by of this Employment.  # noqa: E501
        :type: str
        """

        self._updated_by = updated_by

    @property
    def created_by(self):
        """Gets the created_by of this Employment.  # noqa: E501


        :return: The created_by of this Employment.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Employment.


        :param created_by: The created_by of this Employment.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def regulative_group_id(self):
        """Gets the regulative_group_id of this Employment.  # noqa: E501


        :return: The regulative_group_id of this Employment.  # noqa: E501
        :rtype: int
        """
        return self._regulative_group_id

    @regulative_group_id.setter
    def regulative_group_id(self, regulative_group_id):
        """Sets the regulative_group_id of this Employment.


        :param regulative_group_id: The regulative_group_id of this Employment.  # noqa: E501
        :type: int
        """

        self._regulative_group_id = regulative_group_id

    @property
    def job_name(self):
        """Gets the job_name of this Employment.  # noqa: E501


        :return: The job_name of this Employment.  # noqa: E501
        :rtype: str
        """
        return self._job_name

    @job_name.setter
    def job_name(self, job_name):
        """Sets the job_name of this Employment.


        :param job_name: The job_name of this Employment.  # noqa: E501
        :type: str
        """

        self._job_name = job_name

    @property
    def sub_entity_id(self):
        """Gets the sub_entity_id of this Employment.  # noqa: E501


        :return: The sub_entity_id of this Employment.  # noqa: E501
        :rtype: int
        """
        return self._sub_entity_id

    @sub_entity_id.setter
    def sub_entity_id(self, sub_entity_id):
        """Sets the sub_entity_id of this Employment.


        :param sub_entity_id: The sub_entity_id of this Employment.  # noqa: E501
        :type: int
        """

        self._sub_entity_id = sub_entity_id

    @property
    def pay_grade(self):
        """Gets the pay_grade of this Employment.  # noqa: E501


        :return: The pay_grade of this Employment.  # noqa: E501
        :rtype: str
        """
        return self._pay_grade

    @pay_grade.setter
    def pay_grade(self, pay_grade):
        """Sets the pay_grade of this Employment.


        :param pay_grade: The pay_grade of this Employment.  # noqa: E501
        :type: str
        """

        self._pay_grade = pay_grade

    @property
    def employment_type(self):
        """Gets the employment_type of this Employment.  # noqa: E501


        :return: The employment_type of this Employment.  # noqa: E501
        :rtype: str
        """
        return self._employment_type

    @employment_type.setter
    def employment_type(self, employment_type):
        """Sets the employment_type of this Employment.


        :param employment_type: The employment_type of this Employment.  # noqa: E501
        :type: str
        """

        self._employment_type = employment_type

    @property
    def employee_id(self):
        """Gets the employee_id of this Employment.  # noqa: E501


        :return: The employee_id of this Employment.  # noqa: E501
        :rtype: int
        """
        return self._employee_id

    @employee_id.setter
    def employee_id(self, employee_id):
        """Sets the employee_id of this Employment.


        :param employee_id: The employee_id of this Employment.  # noqa: E501
        :type: int
        """

        self._employee_id = employee_id

    @property
    def employee(self):
        """Gets the employee of this Employment.  # noqa: E501


        :return: The employee of this Employment.  # noqa: E501
        :rtype: Employee
        """
        return self._employee

    @employee.setter
    def employee(self, employee):
        """Sets the employee of this Employment.


        :param employee: The employee of this Employment.  # noqa: E501
        :type: Employee
        """

        self._employee = employee

    @property
    def dimensions(self):
        """Gets the dimensions of this Employment.  # noqa: E501


        :return: The dimensions of this Employment.  # noqa: E501
        :rtype: Dimensions
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this Employment.


        :param dimensions: The dimensions of this Employment.  # noqa: E501
        :type: Dimensions
        """

        self._dimensions = dimensions

    @property
    def leaves(self):
        """Gets the leaves of this Employment.  # noqa: E501


        :return: The leaves of this Employment.  # noqa: E501
        :rtype: list[EmployeeLeave]
        """
        return self._leaves

    @leaves.setter
    def leaves(self, leaves):
        """Sets the leaves of this Employment.


        :param leaves: The leaves of this Employment.  # noqa: E501
        :type: list[EmployeeLeave]
        """

        self._leaves = leaves

    @property
    def custom_values(self):
        """Gets the custom_values of this Employment.  # noqa: E501


        :return: The custom_values of this Employment.  # noqa: E501
        :rtype: CustomValues
        """
        return self._custom_values

    @custom_values.setter
    def custom_values(self, custom_values):
        """Sets the custom_values of this Employment.


        :param custom_values: The custom_values of this Employment.  # noqa: E501
        :type: CustomValues
        """

        self._custom_values = custom_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Employment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Employment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
