# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WorkItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'customer_id': 'int',
        'transfered_to_payroll': 'bool',
        'label': 'str',
        'minutes': 'int',
        'description': 'str',
        'lunch_in_minutes': 'int',
        'customer_order_id': 'int',
        'dimensions_id': 'int',
        'work_type_id': 'int',
        'work_relation_id': 'int',
        'status_code': 'int',
        'deleted': 'bool',
        'payroll_tracking_id': 'int',
        'minutes_to_order': 'int',
        'order_item_id': 'int',
        'work_item_group_id': 'int',
        'invoiceable': 'bool',
        'id': 'int',
        'updated_by': 'str',
        'created_by': 'str',
        'transfered_to_order': 'bool',
        'dimensions': 'Dimensions',
        'custom_values': 'CustomValues'
    }

    attribute_map = {
        'customer_id': 'CustomerID',
        'transfered_to_payroll': 'TransferedToPayroll',
        'label': 'Label',
        'minutes': 'Minutes',
        'description': 'Description',
        'lunch_in_minutes': 'LunchInMinutes',
        'customer_order_id': 'CustomerOrderID',
        'dimensions_id': 'DimensionsID',
        'work_type_id': 'WorkTypeID',
        'work_relation_id': 'WorkRelationID',
        'status_code': 'StatusCode',
        'deleted': 'Deleted',
        'payroll_tracking_id': 'PayrollTrackingID',
        'minutes_to_order': 'MinutesToOrder',
        'order_item_id': 'OrderItemId',
        'work_item_group_id': 'WorkItemGroupID',
        'invoiceable': 'Invoiceable',
        'id': 'ID',
        'updated_by': 'UpdatedBy',
        'created_by': 'CreatedBy',
        'transfered_to_order': 'TransferedToOrder',
        'dimensions': 'Dimensions',
        'custom_values': 'CustomValues'
    }

    def __init__(self, customer_id=None, transfered_to_payroll=None, label=None, minutes=None, description=None, lunch_in_minutes=None, customer_order_id=None, dimensions_id=None, work_type_id=None, work_relation_id=None, status_code=None, deleted=None, payroll_tracking_id=None, minutes_to_order=None, order_item_id=None, work_item_group_id=None, invoiceable=None, id=None, updated_by=None, created_by=None, transfered_to_order=None, dimensions=None, custom_values=None):  # noqa: E501
        """WorkItem - a model defined in Swagger"""  # noqa: E501
        self._customer_id = None
        self._transfered_to_payroll = None
        self._label = None
        self._minutes = None
        self._description = None
        self._lunch_in_minutes = None
        self._customer_order_id = None
        self._dimensions_id = None
        self._work_type_id = None
        self._work_relation_id = None
        self._status_code = None
        self._deleted = None
        self._payroll_tracking_id = None
        self._minutes_to_order = None
        self._order_item_id = None
        self._work_item_group_id = None
        self._invoiceable = None
        self._id = None
        self._updated_by = None
        self._created_by = None
        self._transfered_to_order = None
        self._dimensions = None
        self._custom_values = None
        self.discriminator = None
        if customer_id is not None:
            self.customer_id = customer_id
        if transfered_to_payroll is not None:
            self.transfered_to_payroll = transfered_to_payroll
        if label is not None:
            self.label = label
        if minutes is not None:
            self.minutes = minutes
        if description is not None:
            self.description = description
        if lunch_in_minutes is not None:
            self.lunch_in_minutes = lunch_in_minutes
        if customer_order_id is not None:
            self.customer_order_id = customer_order_id
        if dimensions_id is not None:
            self.dimensions_id = dimensions_id
        if work_type_id is not None:
            self.work_type_id = work_type_id
        if work_relation_id is not None:
            self.work_relation_id = work_relation_id
        if status_code is not None:
            self.status_code = status_code
        if deleted is not None:
            self.deleted = deleted
        if payroll_tracking_id is not None:
            self.payroll_tracking_id = payroll_tracking_id
        if minutes_to_order is not None:
            self.minutes_to_order = minutes_to_order
        if order_item_id is not None:
            self.order_item_id = order_item_id
        if work_item_group_id is not None:
            self.work_item_group_id = work_item_group_id
        if invoiceable is not None:
            self.invoiceable = invoiceable
        if id is not None:
            self.id = id
        if updated_by is not None:
            self.updated_by = updated_by
        if created_by is not None:
            self.created_by = created_by
        if transfered_to_order is not None:
            self.transfered_to_order = transfered_to_order
        if dimensions is not None:
            self.dimensions = dimensions
        if custom_values is not None:
            self.custom_values = custom_values

    @property
    def customer_id(self):
        """Gets the customer_id of this WorkItem.  # noqa: E501


        :return: The customer_id of this WorkItem.  # noqa: E501
        :rtype: int
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this WorkItem.


        :param customer_id: The customer_id of this WorkItem.  # noqa: E501
        :type: int
        """

        self._customer_id = customer_id

    @property
    def transfered_to_payroll(self):
        """Gets the transfered_to_payroll of this WorkItem.  # noqa: E501


        :return: The transfered_to_payroll of this WorkItem.  # noqa: E501
        :rtype: bool
        """
        return self._transfered_to_payroll

    @transfered_to_payroll.setter
    def transfered_to_payroll(self, transfered_to_payroll):
        """Sets the transfered_to_payroll of this WorkItem.


        :param transfered_to_payroll: The transfered_to_payroll of this WorkItem.  # noqa: E501
        :type: bool
        """

        self._transfered_to_payroll = transfered_to_payroll

    @property
    def label(self):
        """Gets the label of this WorkItem.  # noqa: E501


        :return: The label of this WorkItem.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this WorkItem.


        :param label: The label of this WorkItem.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def minutes(self):
        """Gets the minutes of this WorkItem.  # noqa: E501


        :return: The minutes of this WorkItem.  # noqa: E501
        :rtype: int
        """
        return self._minutes

    @minutes.setter
    def minutes(self, minutes):
        """Sets the minutes of this WorkItem.


        :param minutes: The minutes of this WorkItem.  # noqa: E501
        :type: int
        """

        self._minutes = minutes

    @property
    def description(self):
        """Gets the description of this WorkItem.  # noqa: E501


        :return: The description of this WorkItem.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this WorkItem.


        :param description: The description of this WorkItem.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def lunch_in_minutes(self):
        """Gets the lunch_in_minutes of this WorkItem.  # noqa: E501


        :return: The lunch_in_minutes of this WorkItem.  # noqa: E501
        :rtype: int
        """
        return self._lunch_in_minutes

    @lunch_in_minutes.setter
    def lunch_in_minutes(self, lunch_in_minutes):
        """Sets the lunch_in_minutes of this WorkItem.


        :param lunch_in_minutes: The lunch_in_minutes of this WorkItem.  # noqa: E501
        :type: int
        """

        self._lunch_in_minutes = lunch_in_minutes

    @property
    def customer_order_id(self):
        """Gets the customer_order_id of this WorkItem.  # noqa: E501


        :return: The customer_order_id of this WorkItem.  # noqa: E501
        :rtype: int
        """
        return self._customer_order_id

    @customer_order_id.setter
    def customer_order_id(self, customer_order_id):
        """Sets the customer_order_id of this WorkItem.


        :param customer_order_id: The customer_order_id of this WorkItem.  # noqa: E501
        :type: int
        """

        self._customer_order_id = customer_order_id

    @property
    def dimensions_id(self):
        """Gets the dimensions_id of this WorkItem.  # noqa: E501


        :return: The dimensions_id of this WorkItem.  # noqa: E501
        :rtype: int
        """
        return self._dimensions_id

    @dimensions_id.setter
    def dimensions_id(self, dimensions_id):
        """Sets the dimensions_id of this WorkItem.


        :param dimensions_id: The dimensions_id of this WorkItem.  # noqa: E501
        :type: int
        """

        self._dimensions_id = dimensions_id

    @property
    def work_type_id(self):
        """Gets the work_type_id of this WorkItem.  # noqa: E501


        :return: The work_type_id of this WorkItem.  # noqa: E501
        :rtype: int
        """
        return self._work_type_id

    @work_type_id.setter
    def work_type_id(self, work_type_id):
        """Sets the work_type_id of this WorkItem.


        :param work_type_id: The work_type_id of this WorkItem.  # noqa: E501
        :type: int
        """

        self._work_type_id = work_type_id

    @property
    def work_relation_id(self):
        """Gets the work_relation_id of this WorkItem.  # noqa: E501


        :return: The work_relation_id of this WorkItem.  # noqa: E501
        :rtype: int
        """
        return self._work_relation_id

    @work_relation_id.setter
    def work_relation_id(self, work_relation_id):
        """Sets the work_relation_id of this WorkItem.


        :param work_relation_id: The work_relation_id of this WorkItem.  # noqa: E501
        :type: int
        """

        self._work_relation_id = work_relation_id

    @property
    def status_code(self):
        """Gets the status_code of this WorkItem.  # noqa: E501


        :return: The status_code of this WorkItem.  # noqa: E501
        :rtype: int
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this WorkItem.


        :param status_code: The status_code of this WorkItem.  # noqa: E501
        :type: int
        """

        self._status_code = status_code

    @property
    def deleted(self):
        """Gets the deleted of this WorkItem.  # noqa: E501


        :return: The deleted of this WorkItem.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this WorkItem.


        :param deleted: The deleted of this WorkItem.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def payroll_tracking_id(self):
        """Gets the payroll_tracking_id of this WorkItem.  # noqa: E501


        :return: The payroll_tracking_id of this WorkItem.  # noqa: E501
        :rtype: int
        """
        return self._payroll_tracking_id

    @payroll_tracking_id.setter
    def payroll_tracking_id(self, payroll_tracking_id):
        """Sets the payroll_tracking_id of this WorkItem.


        :param payroll_tracking_id: The payroll_tracking_id of this WorkItem.  # noqa: E501
        :type: int
        """

        self._payroll_tracking_id = payroll_tracking_id

    @property
    def minutes_to_order(self):
        """Gets the minutes_to_order of this WorkItem.  # noqa: E501


        :return: The minutes_to_order of this WorkItem.  # noqa: E501
        :rtype: int
        """
        return self._minutes_to_order

    @minutes_to_order.setter
    def minutes_to_order(self, minutes_to_order):
        """Sets the minutes_to_order of this WorkItem.


        :param minutes_to_order: The minutes_to_order of this WorkItem.  # noqa: E501
        :type: int
        """

        self._minutes_to_order = minutes_to_order

    @property
    def order_item_id(self):
        """Gets the order_item_id of this WorkItem.  # noqa: E501


        :return: The order_item_id of this WorkItem.  # noqa: E501
        :rtype: int
        """
        return self._order_item_id

    @order_item_id.setter
    def order_item_id(self, order_item_id):
        """Sets the order_item_id of this WorkItem.


        :param order_item_id: The order_item_id of this WorkItem.  # noqa: E501
        :type: int
        """

        self._order_item_id = order_item_id

    @property
    def work_item_group_id(self):
        """Gets the work_item_group_id of this WorkItem.  # noqa: E501


        :return: The work_item_group_id of this WorkItem.  # noqa: E501
        :rtype: int
        """
        return self._work_item_group_id

    @work_item_group_id.setter
    def work_item_group_id(self, work_item_group_id):
        """Sets the work_item_group_id of this WorkItem.


        :param work_item_group_id: The work_item_group_id of this WorkItem.  # noqa: E501
        :type: int
        """

        self._work_item_group_id = work_item_group_id

    @property
    def invoiceable(self):
        """Gets the invoiceable of this WorkItem.  # noqa: E501


        :return: The invoiceable of this WorkItem.  # noqa: E501
        :rtype: bool
        """
        return self._invoiceable

    @invoiceable.setter
    def invoiceable(self, invoiceable):
        """Sets the invoiceable of this WorkItem.


        :param invoiceable: The invoiceable of this WorkItem.  # noqa: E501
        :type: bool
        """

        self._invoiceable = invoiceable

    @property
    def id(self):
        """Gets the id of this WorkItem.  # noqa: E501


        :return: The id of this WorkItem.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WorkItem.


        :param id: The id of this WorkItem.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def updated_by(self):
        """Gets the updated_by of this WorkItem.  # noqa: E501


        :return: The updated_by of this WorkItem.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this WorkItem.


        :param updated_by: The updated_by of this WorkItem.  # noqa: E501
        :type: str
        """

        self._updated_by = updated_by

    @property
    def created_by(self):
        """Gets the created_by of this WorkItem.  # noqa: E501


        :return: The created_by of this WorkItem.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this WorkItem.


        :param created_by: The created_by of this WorkItem.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def transfered_to_order(self):
        """Gets the transfered_to_order of this WorkItem.  # noqa: E501


        :return: The transfered_to_order of this WorkItem.  # noqa: E501
        :rtype: bool
        """
        return self._transfered_to_order

    @transfered_to_order.setter
    def transfered_to_order(self, transfered_to_order):
        """Sets the transfered_to_order of this WorkItem.


        :param transfered_to_order: The transfered_to_order of this WorkItem.  # noqa: E501
        :type: bool
        """

        self._transfered_to_order = transfered_to_order

    @property
    def dimensions(self):
        """Gets the dimensions of this WorkItem.  # noqa: E501


        :return: The dimensions of this WorkItem.  # noqa: E501
        :rtype: Dimensions
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this WorkItem.


        :param dimensions: The dimensions of this WorkItem.  # noqa: E501
        :type: Dimensions
        """

        self._dimensions = dimensions

    @property
    def custom_values(self):
        """Gets the custom_values of this WorkItem.  # noqa: E501


        :return: The custom_values of this WorkItem.  # noqa: E501
        :rtype: CustomValues
        """
        return self._custom_values

    @custom_values.setter
    def custom_values(self, custom_values):
        """Sets the custom_values of this WorkItem.


        :param custom_values: The custom_values of this WorkItem.  # noqa: E501
        :type: CustomValues
        """

        self._custom_values = custom_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WorkItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
