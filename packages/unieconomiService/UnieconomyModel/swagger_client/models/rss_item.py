# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RssItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'category': 'str',
        'guid': 'str',
        'description': 'str',
        'link': 'str',
        'title': 'str',
        'pub_date': 'str',
        'enclosure': 'Enclosure',
        'custom_values': 'CustomValues'
    }

    attribute_map = {
        'category': 'Category',
        'guid': 'Guid',
        'description': 'Description',
        'link': 'Link',
        'title': 'Title',
        'pub_date': 'PubDate',
        'enclosure': 'Enclosure',
        'custom_values': 'CustomValues'
    }

    def __init__(self, category=None, guid=None, description=None, link=None, title=None, pub_date=None, enclosure=None, custom_values=None):  # noqa: E501
        """RssItem - a model defined in Swagger"""  # noqa: E501
        self._category = None
        self._guid = None
        self._description = None
        self._link = None
        self._title = None
        self._pub_date = None
        self._enclosure = None
        self._custom_values = None
        self.discriminator = None
        if category is not None:
            self.category = category
        if guid is not None:
            self.guid = guid
        if description is not None:
            self.description = description
        if link is not None:
            self.link = link
        if title is not None:
            self.title = title
        if pub_date is not None:
            self.pub_date = pub_date
        if enclosure is not None:
            self.enclosure = enclosure
        if custom_values is not None:
            self.custom_values = custom_values

    @property
    def category(self):
        """Gets the category of this RssItem.  # noqa: E501


        :return: The category of this RssItem.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this RssItem.


        :param category: The category of this RssItem.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def guid(self):
        """Gets the guid of this RssItem.  # noqa: E501


        :return: The guid of this RssItem.  # noqa: E501
        :rtype: str
        """
        return self._guid

    @guid.setter
    def guid(self, guid):
        """Sets the guid of this RssItem.


        :param guid: The guid of this RssItem.  # noqa: E501
        :type: str
        """

        self._guid = guid

    @property
    def description(self):
        """Gets the description of this RssItem.  # noqa: E501


        :return: The description of this RssItem.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RssItem.


        :param description: The description of this RssItem.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def link(self):
        """Gets the link of this RssItem.  # noqa: E501


        :return: The link of this RssItem.  # noqa: E501
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this RssItem.


        :param link: The link of this RssItem.  # noqa: E501
        :type: str
        """

        self._link = link

    @property
    def title(self):
        """Gets the title of this RssItem.  # noqa: E501


        :return: The title of this RssItem.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this RssItem.


        :param title: The title of this RssItem.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def pub_date(self):
        """Gets the pub_date of this RssItem.  # noqa: E501


        :return: The pub_date of this RssItem.  # noqa: E501
        :rtype: str
        """
        return self._pub_date

    @pub_date.setter
    def pub_date(self, pub_date):
        """Sets the pub_date of this RssItem.


        :param pub_date: The pub_date of this RssItem.  # noqa: E501
        :type: str
        """

        self._pub_date = pub_date

    @property
    def enclosure(self):
        """Gets the enclosure of this RssItem.  # noqa: E501


        :return: The enclosure of this RssItem.  # noqa: E501
        :rtype: Enclosure
        """
        return self._enclosure

    @enclosure.setter
    def enclosure(self, enclosure):
        """Sets the enclosure of this RssItem.


        :param enclosure: The enclosure of this RssItem.  # noqa: E501
        :type: Enclosure
        """

        self._enclosure = enclosure

    @property
    def custom_values(self):
        """Gets the custom_values of this RssItem.  # noqa: E501


        :return: The custom_values of this RssItem.  # noqa: E501
        :rtype: CustomValues
        """
        return self._custom_values

    @custom_values.setter
    def custom_values(self, custom_values):
        """Sets the custom_values of this RssItem.


        :param custom_values: The custom_values of this RssItem.  # noqa: E501
        :type: CustomValues
        """

        self._custom_values = custom_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RssItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RssItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
