# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BankStatementEntry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sender_name': 'str',
        'category': 'str',
        'sender_account': 'str',
        'description': 'str',
        'invoice_number': 'str',
        'transaction_id': 'str',
        'status_code': 'int',
        'deleted': 'bool',
        'bank_statement_id': 'int',
        'structured_reference': 'str',
        'archive_reference': 'str',
        'currency_code': 'str',
        'receiver_account': 'str',
        'id': 'int',
        'updated_by': 'str',
        'created_by': 'str',
        'receivername': 'str',
        'cid': 'str',
        'custom_values': 'CustomValues'
    }

    attribute_map = {
        'sender_name': 'SenderName',
        'category': 'Category',
        'sender_account': 'SenderAccount',
        'description': 'Description',
        'invoice_number': 'InvoiceNumber',
        'transaction_id': 'TransactionId',
        'status_code': 'StatusCode',
        'deleted': 'Deleted',
        'bank_statement_id': 'BankStatementID',
        'structured_reference': 'StructuredReference',
        'archive_reference': 'ArchiveReference',
        'currency_code': 'CurrencyCode',
        'receiver_account': 'ReceiverAccount',
        'id': 'ID',
        'updated_by': 'UpdatedBy',
        'created_by': 'CreatedBy',
        'receivername': 'Receivername',
        'cid': 'CID',
        'custom_values': 'CustomValues'
    }

    def __init__(self, sender_name=None, category=None, sender_account=None, description=None, invoice_number=None, transaction_id=None, status_code=None, deleted=None, bank_statement_id=None, structured_reference=None, archive_reference=None, currency_code=None, receiver_account=None, id=None, updated_by=None, created_by=None, receivername=None, cid=None, custom_values=None):  # noqa: E501
        """BankStatementEntry - a model defined in Swagger"""  # noqa: E501
        self._sender_name = None
        self._category = None
        self._sender_account = None
        self._description = None
        self._invoice_number = None
        self._transaction_id = None
        self._status_code = None
        self._deleted = None
        self._bank_statement_id = None
        self._structured_reference = None
        self._archive_reference = None
        self._currency_code = None
        self._receiver_account = None
        self._id = None
        self._updated_by = None
        self._created_by = None
        self._receivername = None
        self._cid = None
        self._custom_values = None
        self.discriminator = None
        if sender_name is not None:
            self.sender_name = sender_name
        if category is not None:
            self.category = category
        if sender_account is not None:
            self.sender_account = sender_account
        if description is not None:
            self.description = description
        if invoice_number is not None:
            self.invoice_number = invoice_number
        if transaction_id is not None:
            self.transaction_id = transaction_id
        if status_code is not None:
            self.status_code = status_code
        if deleted is not None:
            self.deleted = deleted
        if bank_statement_id is not None:
            self.bank_statement_id = bank_statement_id
        if structured_reference is not None:
            self.structured_reference = structured_reference
        if archive_reference is not None:
            self.archive_reference = archive_reference
        if currency_code is not None:
            self.currency_code = currency_code
        if receiver_account is not None:
            self.receiver_account = receiver_account
        if id is not None:
            self.id = id
        if updated_by is not None:
            self.updated_by = updated_by
        if created_by is not None:
            self.created_by = created_by
        if receivername is not None:
            self.receivername = receivername
        if cid is not None:
            self.cid = cid
        if custom_values is not None:
            self.custom_values = custom_values

    @property
    def sender_name(self):
        """Gets the sender_name of this BankStatementEntry.  # noqa: E501


        :return: The sender_name of this BankStatementEntry.  # noqa: E501
        :rtype: str
        """
        return self._sender_name

    @sender_name.setter
    def sender_name(self, sender_name):
        """Sets the sender_name of this BankStatementEntry.


        :param sender_name: The sender_name of this BankStatementEntry.  # noqa: E501
        :type: str
        """

        self._sender_name = sender_name

    @property
    def category(self):
        """Gets the category of this BankStatementEntry.  # noqa: E501


        :return: The category of this BankStatementEntry.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this BankStatementEntry.


        :param category: The category of this BankStatementEntry.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def sender_account(self):
        """Gets the sender_account of this BankStatementEntry.  # noqa: E501


        :return: The sender_account of this BankStatementEntry.  # noqa: E501
        :rtype: str
        """
        return self._sender_account

    @sender_account.setter
    def sender_account(self, sender_account):
        """Sets the sender_account of this BankStatementEntry.


        :param sender_account: The sender_account of this BankStatementEntry.  # noqa: E501
        :type: str
        """

        self._sender_account = sender_account

    @property
    def description(self):
        """Gets the description of this BankStatementEntry.  # noqa: E501


        :return: The description of this BankStatementEntry.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BankStatementEntry.


        :param description: The description of this BankStatementEntry.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def invoice_number(self):
        """Gets the invoice_number of this BankStatementEntry.  # noqa: E501


        :return: The invoice_number of this BankStatementEntry.  # noqa: E501
        :rtype: str
        """
        return self._invoice_number

    @invoice_number.setter
    def invoice_number(self, invoice_number):
        """Sets the invoice_number of this BankStatementEntry.


        :param invoice_number: The invoice_number of this BankStatementEntry.  # noqa: E501
        :type: str
        """

        self._invoice_number = invoice_number

    @property
    def transaction_id(self):
        """Gets the transaction_id of this BankStatementEntry.  # noqa: E501


        :return: The transaction_id of this BankStatementEntry.  # noqa: E501
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this BankStatementEntry.


        :param transaction_id: The transaction_id of this BankStatementEntry.  # noqa: E501
        :type: str
        """

        self._transaction_id = transaction_id

    @property
    def status_code(self):
        """Gets the status_code of this BankStatementEntry.  # noqa: E501


        :return: The status_code of this BankStatementEntry.  # noqa: E501
        :rtype: int
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this BankStatementEntry.


        :param status_code: The status_code of this BankStatementEntry.  # noqa: E501
        :type: int
        """

        self._status_code = status_code

    @property
    def deleted(self):
        """Gets the deleted of this BankStatementEntry.  # noqa: E501


        :return: The deleted of this BankStatementEntry.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this BankStatementEntry.


        :param deleted: The deleted of this BankStatementEntry.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def bank_statement_id(self):
        """Gets the bank_statement_id of this BankStatementEntry.  # noqa: E501


        :return: The bank_statement_id of this BankStatementEntry.  # noqa: E501
        :rtype: int
        """
        return self._bank_statement_id

    @bank_statement_id.setter
    def bank_statement_id(self, bank_statement_id):
        """Sets the bank_statement_id of this BankStatementEntry.


        :param bank_statement_id: The bank_statement_id of this BankStatementEntry.  # noqa: E501
        :type: int
        """

        self._bank_statement_id = bank_statement_id

    @property
    def structured_reference(self):
        """Gets the structured_reference of this BankStatementEntry.  # noqa: E501


        :return: The structured_reference of this BankStatementEntry.  # noqa: E501
        :rtype: str
        """
        return self._structured_reference

    @structured_reference.setter
    def structured_reference(self, structured_reference):
        """Sets the structured_reference of this BankStatementEntry.


        :param structured_reference: The structured_reference of this BankStatementEntry.  # noqa: E501
        :type: str
        """

        self._structured_reference = structured_reference

    @property
    def archive_reference(self):
        """Gets the archive_reference of this BankStatementEntry.  # noqa: E501


        :return: The archive_reference of this BankStatementEntry.  # noqa: E501
        :rtype: str
        """
        return self._archive_reference

    @archive_reference.setter
    def archive_reference(self, archive_reference):
        """Sets the archive_reference of this BankStatementEntry.


        :param archive_reference: The archive_reference of this BankStatementEntry.  # noqa: E501
        :type: str
        """

        self._archive_reference = archive_reference

    @property
    def currency_code(self):
        """Gets the currency_code of this BankStatementEntry.  # noqa: E501


        :return: The currency_code of this BankStatementEntry.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this BankStatementEntry.


        :param currency_code: The currency_code of this BankStatementEntry.  # noqa: E501
        :type: str
        """

        self._currency_code = currency_code

    @property
    def receiver_account(self):
        """Gets the receiver_account of this BankStatementEntry.  # noqa: E501


        :return: The receiver_account of this BankStatementEntry.  # noqa: E501
        :rtype: str
        """
        return self._receiver_account

    @receiver_account.setter
    def receiver_account(self, receiver_account):
        """Sets the receiver_account of this BankStatementEntry.


        :param receiver_account: The receiver_account of this BankStatementEntry.  # noqa: E501
        :type: str
        """

        self._receiver_account = receiver_account

    @property
    def id(self):
        """Gets the id of this BankStatementEntry.  # noqa: E501


        :return: The id of this BankStatementEntry.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BankStatementEntry.


        :param id: The id of this BankStatementEntry.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def updated_by(self):
        """Gets the updated_by of this BankStatementEntry.  # noqa: E501


        :return: The updated_by of this BankStatementEntry.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this BankStatementEntry.


        :param updated_by: The updated_by of this BankStatementEntry.  # noqa: E501
        :type: str
        """

        self._updated_by = updated_by

    @property
    def created_by(self):
        """Gets the created_by of this BankStatementEntry.  # noqa: E501


        :return: The created_by of this BankStatementEntry.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this BankStatementEntry.


        :param created_by: The created_by of this BankStatementEntry.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def receivername(self):
        """Gets the receivername of this BankStatementEntry.  # noqa: E501


        :return: The receivername of this BankStatementEntry.  # noqa: E501
        :rtype: str
        """
        return self._receivername

    @receivername.setter
    def receivername(self, receivername):
        """Sets the receivername of this BankStatementEntry.


        :param receivername: The receivername of this BankStatementEntry.  # noqa: E501
        :type: str
        """

        self._receivername = receivername

    @property
    def cid(self):
        """Gets the cid of this BankStatementEntry.  # noqa: E501


        :return: The cid of this BankStatementEntry.  # noqa: E501
        :rtype: str
        """
        return self._cid

    @cid.setter
    def cid(self, cid):
        """Sets the cid of this BankStatementEntry.


        :param cid: The cid of this BankStatementEntry.  # noqa: E501
        :type: str
        """

        self._cid = cid

    @property
    def custom_values(self):
        """Gets the custom_values of this BankStatementEntry.  # noqa: E501


        :return: The custom_values of this BankStatementEntry.  # noqa: E501
        :rtype: CustomValues
        """
        return self._custom_values

    @custom_values.setter
    def custom_values(self, custom_values):
        """Sets the custom_values of this BankStatementEntry.


        :param custom_values: The custom_values of this BankStatementEntry.  # noqa: E501
        :type: CustomValues
        """

        self._custom_values = custom_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BankStatementEntry, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BankStatementEntry):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
