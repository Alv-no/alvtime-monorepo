# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class VatReportArchivedSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'payment_period': 'str',
        'status_code': 'int',
        'deleted': 'bool',
        'report_name': 'str',
        'summary_header': 'str',
        'payment_year': 'int',
        'payment_to_description': 'str',
        'payment_id': 'str',
        'id': 'int',
        'updated_by': 'str',
        'created_by': 'str',
        'payment_bank_account_number': 'str',
        'custom_values': 'CustomValues'
    }

    attribute_map = {
        'payment_period': 'PaymentPeriod',
        'status_code': 'StatusCode',
        'deleted': 'Deleted',
        'report_name': 'ReportName',
        'summary_header': 'SummaryHeader',
        'payment_year': 'PaymentYear',
        'payment_to_description': 'PaymentToDescription',
        'payment_id': 'PaymentID',
        'id': 'ID',
        'updated_by': 'UpdatedBy',
        'created_by': 'CreatedBy',
        'payment_bank_account_number': 'PaymentBankAccountNumber',
        'custom_values': 'CustomValues'
    }

    def __init__(self, payment_period=None, status_code=None, deleted=None, report_name=None, summary_header=None, payment_year=None, payment_to_description=None, payment_id=None, id=None, updated_by=None, created_by=None, payment_bank_account_number=None, custom_values=None):  # noqa: E501
        """VatReportArchivedSummary - a model defined in Swagger"""  # noqa: E501
        self._payment_period = None
        self._status_code = None
        self._deleted = None
        self._report_name = None
        self._summary_header = None
        self._payment_year = None
        self._payment_to_description = None
        self._payment_id = None
        self._id = None
        self._updated_by = None
        self._created_by = None
        self._payment_bank_account_number = None
        self._custom_values = None
        self.discriminator = None
        if payment_period is not None:
            self.payment_period = payment_period
        if status_code is not None:
            self.status_code = status_code
        if deleted is not None:
            self.deleted = deleted
        if report_name is not None:
            self.report_name = report_name
        if summary_header is not None:
            self.summary_header = summary_header
        if payment_year is not None:
            self.payment_year = payment_year
        if payment_to_description is not None:
            self.payment_to_description = payment_to_description
        if payment_id is not None:
            self.payment_id = payment_id
        if id is not None:
            self.id = id
        if updated_by is not None:
            self.updated_by = updated_by
        if created_by is not None:
            self.created_by = created_by
        if payment_bank_account_number is not None:
            self.payment_bank_account_number = payment_bank_account_number
        if custom_values is not None:
            self.custom_values = custom_values

    @property
    def payment_period(self):
        """Gets the payment_period of this VatReportArchivedSummary.  # noqa: E501


        :return: The payment_period of this VatReportArchivedSummary.  # noqa: E501
        :rtype: str
        """
        return self._payment_period

    @payment_period.setter
    def payment_period(self, payment_period):
        """Sets the payment_period of this VatReportArchivedSummary.


        :param payment_period: The payment_period of this VatReportArchivedSummary.  # noqa: E501
        :type: str
        """

        self._payment_period = payment_period

    @property
    def status_code(self):
        """Gets the status_code of this VatReportArchivedSummary.  # noqa: E501


        :return: The status_code of this VatReportArchivedSummary.  # noqa: E501
        :rtype: int
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this VatReportArchivedSummary.


        :param status_code: The status_code of this VatReportArchivedSummary.  # noqa: E501
        :type: int
        """

        self._status_code = status_code

    @property
    def deleted(self):
        """Gets the deleted of this VatReportArchivedSummary.  # noqa: E501


        :return: The deleted of this VatReportArchivedSummary.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this VatReportArchivedSummary.


        :param deleted: The deleted of this VatReportArchivedSummary.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def report_name(self):
        """Gets the report_name of this VatReportArchivedSummary.  # noqa: E501


        :return: The report_name of this VatReportArchivedSummary.  # noqa: E501
        :rtype: str
        """
        return self._report_name

    @report_name.setter
    def report_name(self, report_name):
        """Sets the report_name of this VatReportArchivedSummary.


        :param report_name: The report_name of this VatReportArchivedSummary.  # noqa: E501
        :type: str
        """

        self._report_name = report_name

    @property
    def summary_header(self):
        """Gets the summary_header of this VatReportArchivedSummary.  # noqa: E501


        :return: The summary_header of this VatReportArchivedSummary.  # noqa: E501
        :rtype: str
        """
        return self._summary_header

    @summary_header.setter
    def summary_header(self, summary_header):
        """Sets the summary_header of this VatReportArchivedSummary.


        :param summary_header: The summary_header of this VatReportArchivedSummary.  # noqa: E501
        :type: str
        """

        self._summary_header = summary_header

    @property
    def payment_year(self):
        """Gets the payment_year of this VatReportArchivedSummary.  # noqa: E501


        :return: The payment_year of this VatReportArchivedSummary.  # noqa: E501
        :rtype: int
        """
        return self._payment_year

    @payment_year.setter
    def payment_year(self, payment_year):
        """Sets the payment_year of this VatReportArchivedSummary.


        :param payment_year: The payment_year of this VatReportArchivedSummary.  # noqa: E501
        :type: int
        """

        self._payment_year = payment_year

    @property
    def payment_to_description(self):
        """Gets the payment_to_description of this VatReportArchivedSummary.  # noqa: E501


        :return: The payment_to_description of this VatReportArchivedSummary.  # noqa: E501
        :rtype: str
        """
        return self._payment_to_description

    @payment_to_description.setter
    def payment_to_description(self, payment_to_description):
        """Sets the payment_to_description of this VatReportArchivedSummary.


        :param payment_to_description: The payment_to_description of this VatReportArchivedSummary.  # noqa: E501
        :type: str
        """

        self._payment_to_description = payment_to_description

    @property
    def payment_id(self):
        """Gets the payment_id of this VatReportArchivedSummary.  # noqa: E501


        :return: The payment_id of this VatReportArchivedSummary.  # noqa: E501
        :rtype: str
        """
        return self._payment_id

    @payment_id.setter
    def payment_id(self, payment_id):
        """Sets the payment_id of this VatReportArchivedSummary.


        :param payment_id: The payment_id of this VatReportArchivedSummary.  # noqa: E501
        :type: str
        """

        self._payment_id = payment_id

    @property
    def id(self):
        """Gets the id of this VatReportArchivedSummary.  # noqa: E501


        :return: The id of this VatReportArchivedSummary.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VatReportArchivedSummary.


        :param id: The id of this VatReportArchivedSummary.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def updated_by(self):
        """Gets the updated_by of this VatReportArchivedSummary.  # noqa: E501


        :return: The updated_by of this VatReportArchivedSummary.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this VatReportArchivedSummary.


        :param updated_by: The updated_by of this VatReportArchivedSummary.  # noqa: E501
        :type: str
        """

        self._updated_by = updated_by

    @property
    def created_by(self):
        """Gets the created_by of this VatReportArchivedSummary.  # noqa: E501


        :return: The created_by of this VatReportArchivedSummary.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this VatReportArchivedSummary.


        :param created_by: The created_by of this VatReportArchivedSummary.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def payment_bank_account_number(self):
        """Gets the payment_bank_account_number of this VatReportArchivedSummary.  # noqa: E501


        :return: The payment_bank_account_number of this VatReportArchivedSummary.  # noqa: E501
        :rtype: str
        """
        return self._payment_bank_account_number

    @payment_bank_account_number.setter
    def payment_bank_account_number(self, payment_bank_account_number):
        """Sets the payment_bank_account_number of this VatReportArchivedSummary.


        :param payment_bank_account_number: The payment_bank_account_number of this VatReportArchivedSummary.  # noqa: E501
        :type: str
        """

        self._payment_bank_account_number = payment_bank_account_number

    @property
    def custom_values(self):
        """Gets the custom_values of this VatReportArchivedSummary.  # noqa: E501


        :return: The custom_values of this VatReportArchivedSummary.  # noqa: E501
        :rtype: CustomValues
        """
        return self._custom_values

    @custom_values.setter
    def custom_values(self, custom_values):
        """Sets the custom_values of this VatReportArchivedSummary.


        :param custom_values: The custom_values of this VatReportArchivedSummary.  # noqa: E501
        :type: CustomValues
        """

        self._custom_values = custom_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VatReportArchivedSummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VatReportArchivedSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
