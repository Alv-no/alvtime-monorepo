# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BankAccountDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bban': 'str',
        'is_bank_statement': 'bool',
        'iban': 'str',
        'is_inbound': 'bool',
        'bic': 'str',
        'is_bank_balance': 'bool',
        'is_outgoing': 'bool',
        'custom_values': 'CustomValues'
    }

    attribute_map = {
        'bban': 'BBAN',
        'is_bank_statement': 'IsBankStatement',
        'iban': 'IBAN',
        'is_inbound': 'IsInbound',
        'bic': 'Bic',
        'is_bank_balance': 'IsBankBalance',
        'is_outgoing': 'IsOutgoing',
        'custom_values': 'CustomValues'
    }

    def __init__(self, bban=None, is_bank_statement=None, iban=None, is_inbound=None, bic=None, is_bank_balance=None, is_outgoing=None, custom_values=None):  # noqa: E501
        """BankAccountDTO - a model defined in Swagger"""  # noqa: E501
        self._bban = None
        self._is_bank_statement = None
        self._iban = None
        self._is_inbound = None
        self._bic = None
        self._is_bank_balance = None
        self._is_outgoing = None
        self._custom_values = None
        self.discriminator = None
        if bban is not None:
            self.bban = bban
        if is_bank_statement is not None:
            self.is_bank_statement = is_bank_statement
        if iban is not None:
            self.iban = iban
        if is_inbound is not None:
            self.is_inbound = is_inbound
        if bic is not None:
            self.bic = bic
        if is_bank_balance is not None:
            self.is_bank_balance = is_bank_balance
        if is_outgoing is not None:
            self.is_outgoing = is_outgoing
        if custom_values is not None:
            self.custom_values = custom_values

    @property
    def bban(self):
        """Gets the bban of this BankAccountDTO.  # noqa: E501


        :return: The bban of this BankAccountDTO.  # noqa: E501
        :rtype: str
        """
        return self._bban

    @bban.setter
    def bban(self, bban):
        """Sets the bban of this BankAccountDTO.


        :param bban: The bban of this BankAccountDTO.  # noqa: E501
        :type: str
        """

        self._bban = bban

    @property
    def is_bank_statement(self):
        """Gets the is_bank_statement of this BankAccountDTO.  # noqa: E501


        :return: The is_bank_statement of this BankAccountDTO.  # noqa: E501
        :rtype: bool
        """
        return self._is_bank_statement

    @is_bank_statement.setter
    def is_bank_statement(self, is_bank_statement):
        """Sets the is_bank_statement of this BankAccountDTO.


        :param is_bank_statement: The is_bank_statement of this BankAccountDTO.  # noqa: E501
        :type: bool
        """

        self._is_bank_statement = is_bank_statement

    @property
    def iban(self):
        """Gets the iban of this BankAccountDTO.  # noqa: E501


        :return: The iban of this BankAccountDTO.  # noqa: E501
        :rtype: str
        """
        return self._iban

    @iban.setter
    def iban(self, iban):
        """Sets the iban of this BankAccountDTO.


        :param iban: The iban of this BankAccountDTO.  # noqa: E501
        :type: str
        """

        self._iban = iban

    @property
    def is_inbound(self):
        """Gets the is_inbound of this BankAccountDTO.  # noqa: E501


        :return: The is_inbound of this BankAccountDTO.  # noqa: E501
        :rtype: bool
        """
        return self._is_inbound

    @is_inbound.setter
    def is_inbound(self, is_inbound):
        """Sets the is_inbound of this BankAccountDTO.


        :param is_inbound: The is_inbound of this BankAccountDTO.  # noqa: E501
        :type: bool
        """

        self._is_inbound = is_inbound

    @property
    def bic(self):
        """Gets the bic of this BankAccountDTO.  # noqa: E501


        :return: The bic of this BankAccountDTO.  # noqa: E501
        :rtype: str
        """
        return self._bic

    @bic.setter
    def bic(self, bic):
        """Sets the bic of this BankAccountDTO.


        :param bic: The bic of this BankAccountDTO.  # noqa: E501
        :type: str
        """

        self._bic = bic

    @property
    def is_bank_balance(self):
        """Gets the is_bank_balance of this BankAccountDTO.  # noqa: E501


        :return: The is_bank_balance of this BankAccountDTO.  # noqa: E501
        :rtype: bool
        """
        return self._is_bank_balance

    @is_bank_balance.setter
    def is_bank_balance(self, is_bank_balance):
        """Sets the is_bank_balance of this BankAccountDTO.


        :param is_bank_balance: The is_bank_balance of this BankAccountDTO.  # noqa: E501
        :type: bool
        """

        self._is_bank_balance = is_bank_balance

    @property
    def is_outgoing(self):
        """Gets the is_outgoing of this BankAccountDTO.  # noqa: E501


        :return: The is_outgoing of this BankAccountDTO.  # noqa: E501
        :rtype: bool
        """
        return self._is_outgoing

    @is_outgoing.setter
    def is_outgoing(self, is_outgoing):
        """Sets the is_outgoing of this BankAccountDTO.


        :param is_outgoing: The is_outgoing of this BankAccountDTO.  # noqa: E501
        :type: bool
        """

        self._is_outgoing = is_outgoing

    @property
    def custom_values(self):
        """Gets the custom_values of this BankAccountDTO.  # noqa: E501


        :return: The custom_values of this BankAccountDTO.  # noqa: E501
        :rtype: CustomValues
        """
        return self._custom_values

    @custom_values.setter
    def custom_values(self, custom_values):
        """Sets the custom_values of this BankAccountDTO.


        :param custom_values: The custom_values of this BankAccountDTO.  # noqa: E501
        :type: CustomValues
        """

        self._custom_values = custom_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BankAccountDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BankAccountDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
