# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class KpiDefinition(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'route': 'str',
        'role_names': 'str',
        'interval': 'str',
        'application': 'str',
        'name': 'str',
        'deleted': 'bool',
        'is_per_user': 'bool',
        'refresh_models': 'str',
        'id': 'int',
        'updated_by': 'str',
        'source_type': 'str',
        'created_by': 'str',
        'company_id': 'int',
        'value_type': 'str',
        'custom_values': 'CustomValues'
    }

    attribute_map = {
        'route': 'Route',
        'role_names': 'RoleNames',
        'interval': 'Interval',
        'application': 'Application',
        'name': 'Name',
        'deleted': 'Deleted',
        'is_per_user': 'IsPerUser',
        'refresh_models': 'RefreshModels',
        'id': 'ID',
        'updated_by': 'UpdatedBy',
        'source_type': 'SourceType',
        'created_by': 'CreatedBy',
        'company_id': 'CompanyID',
        'value_type': 'ValueType',
        'custom_values': 'CustomValues'
    }

    def __init__(self, route=None, role_names=None, interval=None, application=None, name=None, deleted=None, is_per_user=None, refresh_models=None, id=None, updated_by=None, source_type=None, created_by=None, company_id=None, value_type=None, custom_values=None):  # noqa: E501
        """KpiDefinition - a model defined in Swagger"""  # noqa: E501
        self._route = None
        self._role_names = None
        self._interval = None
        self._application = None
        self._name = None
        self._deleted = None
        self._is_per_user = None
        self._refresh_models = None
        self._id = None
        self._updated_by = None
        self._source_type = None
        self._created_by = None
        self._company_id = None
        self._value_type = None
        self._custom_values = None
        self.discriminator = None
        if route is not None:
            self.route = route
        if role_names is not None:
            self.role_names = role_names
        if interval is not None:
            self.interval = interval
        if application is not None:
            self.application = application
        if name is not None:
            self.name = name
        if deleted is not None:
            self.deleted = deleted
        if is_per_user is not None:
            self.is_per_user = is_per_user
        if refresh_models is not None:
            self.refresh_models = refresh_models
        if id is not None:
            self.id = id
        if updated_by is not None:
            self.updated_by = updated_by
        if source_type is not None:
            self.source_type = source_type
        if created_by is not None:
            self.created_by = created_by
        if company_id is not None:
            self.company_id = company_id
        if value_type is not None:
            self.value_type = value_type
        if custom_values is not None:
            self.custom_values = custom_values

    @property
    def route(self):
        """Gets the route of this KpiDefinition.  # noqa: E501


        :return: The route of this KpiDefinition.  # noqa: E501
        :rtype: str
        """
        return self._route

    @route.setter
    def route(self, route):
        """Sets the route of this KpiDefinition.


        :param route: The route of this KpiDefinition.  # noqa: E501
        :type: str
        """

        self._route = route

    @property
    def role_names(self):
        """Gets the role_names of this KpiDefinition.  # noqa: E501


        :return: The role_names of this KpiDefinition.  # noqa: E501
        :rtype: str
        """
        return self._role_names

    @role_names.setter
    def role_names(self, role_names):
        """Sets the role_names of this KpiDefinition.


        :param role_names: The role_names of this KpiDefinition.  # noqa: E501
        :type: str
        """

        self._role_names = role_names

    @property
    def interval(self):
        """Gets the interval of this KpiDefinition.  # noqa: E501


        :return: The interval of this KpiDefinition.  # noqa: E501
        :rtype: str
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this KpiDefinition.


        :param interval: The interval of this KpiDefinition.  # noqa: E501
        :type: str
        """

        self._interval = interval

    @property
    def application(self):
        """Gets the application of this KpiDefinition.  # noqa: E501


        :return: The application of this KpiDefinition.  # noqa: E501
        :rtype: str
        """
        return self._application

    @application.setter
    def application(self, application):
        """Sets the application of this KpiDefinition.


        :param application: The application of this KpiDefinition.  # noqa: E501
        :type: str
        """

        self._application = application

    @property
    def name(self):
        """Gets the name of this KpiDefinition.  # noqa: E501


        :return: The name of this KpiDefinition.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this KpiDefinition.


        :param name: The name of this KpiDefinition.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def deleted(self):
        """Gets the deleted of this KpiDefinition.  # noqa: E501


        :return: The deleted of this KpiDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this KpiDefinition.


        :param deleted: The deleted of this KpiDefinition.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def is_per_user(self):
        """Gets the is_per_user of this KpiDefinition.  # noqa: E501


        :return: The is_per_user of this KpiDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._is_per_user

    @is_per_user.setter
    def is_per_user(self, is_per_user):
        """Sets the is_per_user of this KpiDefinition.


        :param is_per_user: The is_per_user of this KpiDefinition.  # noqa: E501
        :type: bool
        """

        self._is_per_user = is_per_user

    @property
    def refresh_models(self):
        """Gets the refresh_models of this KpiDefinition.  # noqa: E501


        :return: The refresh_models of this KpiDefinition.  # noqa: E501
        :rtype: str
        """
        return self._refresh_models

    @refresh_models.setter
    def refresh_models(self, refresh_models):
        """Sets the refresh_models of this KpiDefinition.


        :param refresh_models: The refresh_models of this KpiDefinition.  # noqa: E501
        :type: str
        """

        self._refresh_models = refresh_models

    @property
    def id(self):
        """Gets the id of this KpiDefinition.  # noqa: E501


        :return: The id of this KpiDefinition.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this KpiDefinition.


        :param id: The id of this KpiDefinition.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def updated_by(self):
        """Gets the updated_by of this KpiDefinition.  # noqa: E501


        :return: The updated_by of this KpiDefinition.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this KpiDefinition.


        :param updated_by: The updated_by of this KpiDefinition.  # noqa: E501
        :type: str
        """

        self._updated_by = updated_by

    @property
    def source_type(self):
        """Gets the source_type of this KpiDefinition.  # noqa: E501


        :return: The source_type of this KpiDefinition.  # noqa: E501
        :rtype: str
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type):
        """Sets the source_type of this KpiDefinition.


        :param source_type: The source_type of this KpiDefinition.  # noqa: E501
        :type: str
        """

        self._source_type = source_type

    @property
    def created_by(self):
        """Gets the created_by of this KpiDefinition.  # noqa: E501


        :return: The created_by of this KpiDefinition.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this KpiDefinition.


        :param created_by: The created_by of this KpiDefinition.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def company_id(self):
        """Gets the company_id of this KpiDefinition.  # noqa: E501


        :return: The company_id of this KpiDefinition.  # noqa: E501
        :rtype: int
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this KpiDefinition.


        :param company_id: The company_id of this KpiDefinition.  # noqa: E501
        :type: int
        """

        self._company_id = company_id

    @property
    def value_type(self):
        """Gets the value_type of this KpiDefinition.  # noqa: E501


        :return: The value_type of this KpiDefinition.  # noqa: E501
        :rtype: str
        """
        return self._value_type

    @value_type.setter
    def value_type(self, value_type):
        """Sets the value_type of this KpiDefinition.


        :param value_type: The value_type of this KpiDefinition.  # noqa: E501
        :type: str
        """

        self._value_type = value_type

    @property
    def custom_values(self):
        """Gets the custom_values of this KpiDefinition.  # noqa: E501


        :return: The custom_values of this KpiDefinition.  # noqa: E501
        :rtype: CustomValues
        """
        return self._custom_values

    @custom_values.setter
    def custom_values(self, custom_values):
        """Sets the custom_values of this KpiDefinition.


        :param custom_values: The custom_values of this KpiDefinition.  # noqa: E501
        :type: CustomValues
        """

        self._custom_values = custom_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(KpiDefinition, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KpiDefinition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
