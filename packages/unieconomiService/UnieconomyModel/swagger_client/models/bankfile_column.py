# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BankfileColumn(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_fall_back': 'bool',
        'data_type': 'str',
        'length': 'int',
        'field_mapping': 'str',
        'start_pos': 'int',
        'custom_values': 'CustomValues'
    }

    attribute_map = {
        'is_fall_back': 'IsFallBack',
        'data_type': 'DataType',
        'length': 'Length',
        'field_mapping': 'FieldMapping',
        'start_pos': 'StartPos',
        'custom_values': 'CustomValues'
    }

    def __init__(self, is_fall_back=None, data_type=None, length=None, field_mapping=None, start_pos=None, custom_values=None):  # noqa: E501
        """BankfileColumn - a model defined in Swagger"""  # noqa: E501
        self._is_fall_back = None
        self._data_type = None
        self._length = None
        self._field_mapping = None
        self._start_pos = None
        self._custom_values = None
        self.discriminator = None
        if is_fall_back is not None:
            self.is_fall_back = is_fall_back
        if data_type is not None:
            self.data_type = data_type
        if length is not None:
            self.length = length
        if field_mapping is not None:
            self.field_mapping = field_mapping
        if start_pos is not None:
            self.start_pos = start_pos
        if custom_values is not None:
            self.custom_values = custom_values

    @property
    def is_fall_back(self):
        """Gets the is_fall_back of this BankfileColumn.  # noqa: E501


        :return: The is_fall_back of this BankfileColumn.  # noqa: E501
        :rtype: bool
        """
        return self._is_fall_back

    @is_fall_back.setter
    def is_fall_back(self, is_fall_back):
        """Sets the is_fall_back of this BankfileColumn.


        :param is_fall_back: The is_fall_back of this BankfileColumn.  # noqa: E501
        :type: bool
        """

        self._is_fall_back = is_fall_back

    @property
    def data_type(self):
        """Gets the data_type of this BankfileColumn.  # noqa: E501


        :return: The data_type of this BankfileColumn.  # noqa: E501
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this BankfileColumn.


        :param data_type: The data_type of this BankfileColumn.  # noqa: E501
        :type: str
        """

        self._data_type = data_type

    @property
    def length(self):
        """Gets the length of this BankfileColumn.  # noqa: E501


        :return: The length of this BankfileColumn.  # noqa: E501
        :rtype: int
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this BankfileColumn.


        :param length: The length of this BankfileColumn.  # noqa: E501
        :type: int
        """

        self._length = length

    @property
    def field_mapping(self):
        """Gets the field_mapping of this BankfileColumn.  # noqa: E501


        :return: The field_mapping of this BankfileColumn.  # noqa: E501
        :rtype: str
        """
        return self._field_mapping

    @field_mapping.setter
    def field_mapping(self, field_mapping):
        """Sets the field_mapping of this BankfileColumn.


        :param field_mapping: The field_mapping of this BankfileColumn.  # noqa: E501
        :type: str
        """

        self._field_mapping = field_mapping

    @property
    def start_pos(self):
        """Gets the start_pos of this BankfileColumn.  # noqa: E501


        :return: The start_pos of this BankfileColumn.  # noqa: E501
        :rtype: int
        """
        return self._start_pos

    @start_pos.setter
    def start_pos(self, start_pos):
        """Sets the start_pos of this BankfileColumn.


        :param start_pos: The start_pos of this BankfileColumn.  # noqa: E501
        :type: int
        """

        self._start_pos = start_pos

    @property
    def custom_values(self):
        """Gets the custom_values of this BankfileColumn.  # noqa: E501


        :return: The custom_values of this BankfileColumn.  # noqa: E501
        :rtype: CustomValues
        """
        return self._custom_values

    @custom_values.setter
    def custom_values(self, custom_values):
        """Sets the custom_values of this BankfileColumn.


        :param custom_values: The custom_values of this BankfileColumn.  # noqa: E501
        :type: CustomValues
        """

        self._custom_values = custom_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BankfileColumn, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BankfileColumn):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
