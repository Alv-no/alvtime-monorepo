# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PayAgaTaxDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'correct_penny_diff': 'bool',
        'pay_tax_draw': 'bool',
        'pay_financial_tax': 'bool',
        'pay_garnishment': 'bool',
        'pay_aga': 'bool',
        'custom_values': 'CustomValues'
    }

    attribute_map = {
        'correct_penny_diff': 'correctPennyDiff',
        'pay_tax_draw': 'payTaxDraw',
        'pay_financial_tax': 'payFinancialTax',
        'pay_garnishment': 'payGarnishment',
        'pay_aga': 'payAga',
        'custom_values': 'CustomValues'
    }

    def __init__(self, correct_penny_diff=None, pay_tax_draw=None, pay_financial_tax=None, pay_garnishment=None, pay_aga=None, custom_values=None):  # noqa: E501
        """PayAgaTaxDTO - a model defined in Swagger"""  # noqa: E501
        self._correct_penny_diff = None
        self._pay_tax_draw = None
        self._pay_financial_tax = None
        self._pay_garnishment = None
        self._pay_aga = None
        self._custom_values = None
        self.discriminator = None
        if correct_penny_diff is not None:
            self.correct_penny_diff = correct_penny_diff
        if pay_tax_draw is not None:
            self.pay_tax_draw = pay_tax_draw
        if pay_financial_tax is not None:
            self.pay_financial_tax = pay_financial_tax
        if pay_garnishment is not None:
            self.pay_garnishment = pay_garnishment
        if pay_aga is not None:
            self.pay_aga = pay_aga
        if custom_values is not None:
            self.custom_values = custom_values

    @property
    def correct_penny_diff(self):
        """Gets the correct_penny_diff of this PayAgaTaxDTO.  # noqa: E501


        :return: The correct_penny_diff of this PayAgaTaxDTO.  # noqa: E501
        :rtype: bool
        """
        return self._correct_penny_diff

    @correct_penny_diff.setter
    def correct_penny_diff(self, correct_penny_diff):
        """Sets the correct_penny_diff of this PayAgaTaxDTO.


        :param correct_penny_diff: The correct_penny_diff of this PayAgaTaxDTO.  # noqa: E501
        :type: bool
        """

        self._correct_penny_diff = correct_penny_diff

    @property
    def pay_tax_draw(self):
        """Gets the pay_tax_draw of this PayAgaTaxDTO.  # noqa: E501


        :return: The pay_tax_draw of this PayAgaTaxDTO.  # noqa: E501
        :rtype: bool
        """
        return self._pay_tax_draw

    @pay_tax_draw.setter
    def pay_tax_draw(self, pay_tax_draw):
        """Sets the pay_tax_draw of this PayAgaTaxDTO.


        :param pay_tax_draw: The pay_tax_draw of this PayAgaTaxDTO.  # noqa: E501
        :type: bool
        """

        self._pay_tax_draw = pay_tax_draw

    @property
    def pay_financial_tax(self):
        """Gets the pay_financial_tax of this PayAgaTaxDTO.  # noqa: E501


        :return: The pay_financial_tax of this PayAgaTaxDTO.  # noqa: E501
        :rtype: bool
        """
        return self._pay_financial_tax

    @pay_financial_tax.setter
    def pay_financial_tax(self, pay_financial_tax):
        """Sets the pay_financial_tax of this PayAgaTaxDTO.


        :param pay_financial_tax: The pay_financial_tax of this PayAgaTaxDTO.  # noqa: E501
        :type: bool
        """

        self._pay_financial_tax = pay_financial_tax

    @property
    def pay_garnishment(self):
        """Gets the pay_garnishment of this PayAgaTaxDTO.  # noqa: E501


        :return: The pay_garnishment of this PayAgaTaxDTO.  # noqa: E501
        :rtype: bool
        """
        return self._pay_garnishment

    @pay_garnishment.setter
    def pay_garnishment(self, pay_garnishment):
        """Sets the pay_garnishment of this PayAgaTaxDTO.


        :param pay_garnishment: The pay_garnishment of this PayAgaTaxDTO.  # noqa: E501
        :type: bool
        """

        self._pay_garnishment = pay_garnishment

    @property
    def pay_aga(self):
        """Gets the pay_aga of this PayAgaTaxDTO.  # noqa: E501


        :return: The pay_aga of this PayAgaTaxDTO.  # noqa: E501
        :rtype: bool
        """
        return self._pay_aga

    @pay_aga.setter
    def pay_aga(self, pay_aga):
        """Sets the pay_aga of this PayAgaTaxDTO.


        :param pay_aga: The pay_aga of this PayAgaTaxDTO.  # noqa: E501
        :type: bool
        """

        self._pay_aga = pay_aga

    @property
    def custom_values(self):
        """Gets the custom_values of this PayAgaTaxDTO.  # noqa: E501


        :return: The custom_values of this PayAgaTaxDTO.  # noqa: E501
        :rtype: CustomValues
        """
        return self._custom_values

    @custom_values.setter
    def custom_values(self, custom_values):
        """Sets the custom_values of this PayAgaTaxDTO.


        :param custom_values: The custom_values of this PayAgaTaxDTO.  # noqa: E501
        :type: CustomValues
        """

        self._custom_values = custom_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PayAgaTaxDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PayAgaTaxDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
