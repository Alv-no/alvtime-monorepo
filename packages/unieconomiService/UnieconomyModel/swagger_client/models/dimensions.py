# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Dimensions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dimension10_id': 'int',
        'region_id': 'int',
        'department_id': 'int',
        'project_task_id': 'int',
        'dimension7_id': 'int',
        'status_code': 'int',
        'deleted': 'bool',
        'dimension8_id': 'int',
        'project_id': 'int',
        'dimension6_id': 'int',
        'id': 'int',
        'responsible_id': 'int',
        'updated_by': 'str',
        'created_by': 'str',
        'dimension5_id': 'int',
        'dimension9_id': 'int',
        'custom_values': 'CustomValues'
    }

    attribute_map = {
        'dimension10_id': 'Dimension10ID',
        'region_id': 'RegionID',
        'department_id': 'DepartmentID',
        'project_task_id': 'ProjectTaskID',
        'dimension7_id': 'Dimension7ID',
        'status_code': 'StatusCode',
        'deleted': 'Deleted',
        'dimension8_id': 'Dimension8ID',
        'project_id': 'ProjectID',
        'dimension6_id': 'Dimension6ID',
        'id': 'ID',
        'responsible_id': 'ResponsibleID',
        'updated_by': 'UpdatedBy',
        'created_by': 'CreatedBy',
        'dimension5_id': 'Dimension5ID',
        'dimension9_id': 'Dimension9ID',
        'custom_values': 'CustomValues'
    }

    def __init__(self, dimension10_id=None, region_id=None, department_id=None, project_task_id=None, dimension7_id=None, status_code=None, deleted=None, dimension8_id=None, project_id=None, dimension6_id=None, id=None, responsible_id=None, updated_by=None, created_by=None, dimension5_id=None, dimension9_id=None, custom_values=None):  # noqa: E501
        """Dimensions - a model defined in Swagger"""  # noqa: E501
        self._dimension10_id = None
        self._region_id = None
        self._department_id = None
        self._project_task_id = None
        self._dimension7_id = None
        self._status_code = None
        self._deleted = None
        self._dimension8_id = None
        self._project_id = None
        self._dimension6_id = None
        self._id = None
        self._responsible_id = None
        self._updated_by = None
        self._created_by = None
        self._dimension5_id = None
        self._dimension9_id = None
        self._custom_values = None
        self.discriminator = None
        if dimension10_id is not None:
            self.dimension10_id = dimension10_id
        if region_id is not None:
            self.region_id = region_id
        if department_id is not None:
            self.department_id = department_id
        if project_task_id is not None:
            self.project_task_id = project_task_id
        if dimension7_id is not None:
            self.dimension7_id = dimension7_id
        if status_code is not None:
            self.status_code = status_code
        if deleted is not None:
            self.deleted = deleted
        if dimension8_id is not None:
            self.dimension8_id = dimension8_id
        if project_id is not None:
            self.project_id = project_id
        if dimension6_id is not None:
            self.dimension6_id = dimension6_id
        if id is not None:
            self.id = id
        if responsible_id is not None:
            self.responsible_id = responsible_id
        if updated_by is not None:
            self.updated_by = updated_by
        if created_by is not None:
            self.created_by = created_by
        if dimension5_id is not None:
            self.dimension5_id = dimension5_id
        if dimension9_id is not None:
            self.dimension9_id = dimension9_id
        if custom_values is not None:
            self.custom_values = custom_values

    @property
    def dimension10_id(self):
        """Gets the dimension10_id of this Dimensions.  # noqa: E501


        :return: The dimension10_id of this Dimensions.  # noqa: E501
        :rtype: int
        """
        return self._dimension10_id

    @dimension10_id.setter
    def dimension10_id(self, dimension10_id):
        """Sets the dimension10_id of this Dimensions.


        :param dimension10_id: The dimension10_id of this Dimensions.  # noqa: E501
        :type: int
        """

        self._dimension10_id = dimension10_id

    @property
    def region_id(self):
        """Gets the region_id of this Dimensions.  # noqa: E501


        :return: The region_id of this Dimensions.  # noqa: E501
        :rtype: int
        """
        return self._region_id

    @region_id.setter
    def region_id(self, region_id):
        """Sets the region_id of this Dimensions.


        :param region_id: The region_id of this Dimensions.  # noqa: E501
        :type: int
        """

        self._region_id = region_id

    @property
    def department_id(self):
        """Gets the department_id of this Dimensions.  # noqa: E501


        :return: The department_id of this Dimensions.  # noqa: E501
        :rtype: int
        """
        return self._department_id

    @department_id.setter
    def department_id(self, department_id):
        """Sets the department_id of this Dimensions.


        :param department_id: The department_id of this Dimensions.  # noqa: E501
        :type: int
        """

        self._department_id = department_id

    @property
    def project_task_id(self):
        """Gets the project_task_id of this Dimensions.  # noqa: E501


        :return: The project_task_id of this Dimensions.  # noqa: E501
        :rtype: int
        """
        return self._project_task_id

    @project_task_id.setter
    def project_task_id(self, project_task_id):
        """Sets the project_task_id of this Dimensions.


        :param project_task_id: The project_task_id of this Dimensions.  # noqa: E501
        :type: int
        """

        self._project_task_id = project_task_id

    @property
    def dimension7_id(self):
        """Gets the dimension7_id of this Dimensions.  # noqa: E501


        :return: The dimension7_id of this Dimensions.  # noqa: E501
        :rtype: int
        """
        return self._dimension7_id

    @dimension7_id.setter
    def dimension7_id(self, dimension7_id):
        """Sets the dimension7_id of this Dimensions.


        :param dimension7_id: The dimension7_id of this Dimensions.  # noqa: E501
        :type: int
        """

        self._dimension7_id = dimension7_id

    @property
    def status_code(self):
        """Gets the status_code of this Dimensions.  # noqa: E501


        :return: The status_code of this Dimensions.  # noqa: E501
        :rtype: int
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this Dimensions.


        :param status_code: The status_code of this Dimensions.  # noqa: E501
        :type: int
        """

        self._status_code = status_code

    @property
    def deleted(self):
        """Gets the deleted of this Dimensions.  # noqa: E501


        :return: The deleted of this Dimensions.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this Dimensions.


        :param deleted: The deleted of this Dimensions.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def dimension8_id(self):
        """Gets the dimension8_id of this Dimensions.  # noqa: E501


        :return: The dimension8_id of this Dimensions.  # noqa: E501
        :rtype: int
        """
        return self._dimension8_id

    @dimension8_id.setter
    def dimension8_id(self, dimension8_id):
        """Sets the dimension8_id of this Dimensions.


        :param dimension8_id: The dimension8_id of this Dimensions.  # noqa: E501
        :type: int
        """

        self._dimension8_id = dimension8_id

    @property
    def project_id(self):
        """Gets the project_id of this Dimensions.  # noqa: E501


        :return: The project_id of this Dimensions.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this Dimensions.


        :param project_id: The project_id of this Dimensions.  # noqa: E501
        :type: int
        """

        self._project_id = project_id

    @property
    def dimension6_id(self):
        """Gets the dimension6_id of this Dimensions.  # noqa: E501


        :return: The dimension6_id of this Dimensions.  # noqa: E501
        :rtype: int
        """
        return self._dimension6_id

    @dimension6_id.setter
    def dimension6_id(self, dimension6_id):
        """Sets the dimension6_id of this Dimensions.


        :param dimension6_id: The dimension6_id of this Dimensions.  # noqa: E501
        :type: int
        """

        self._dimension6_id = dimension6_id

    @property
    def id(self):
        """Gets the id of this Dimensions.  # noqa: E501


        :return: The id of this Dimensions.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Dimensions.


        :param id: The id of this Dimensions.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def responsible_id(self):
        """Gets the responsible_id of this Dimensions.  # noqa: E501


        :return: The responsible_id of this Dimensions.  # noqa: E501
        :rtype: int
        """
        return self._responsible_id

    @responsible_id.setter
    def responsible_id(self, responsible_id):
        """Sets the responsible_id of this Dimensions.


        :param responsible_id: The responsible_id of this Dimensions.  # noqa: E501
        :type: int
        """

        self._responsible_id = responsible_id

    @property
    def updated_by(self):
        """Gets the updated_by of this Dimensions.  # noqa: E501


        :return: The updated_by of this Dimensions.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this Dimensions.


        :param updated_by: The updated_by of this Dimensions.  # noqa: E501
        :type: str
        """

        self._updated_by = updated_by

    @property
    def created_by(self):
        """Gets the created_by of this Dimensions.  # noqa: E501


        :return: The created_by of this Dimensions.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Dimensions.


        :param created_by: The created_by of this Dimensions.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def dimension5_id(self):
        """Gets the dimension5_id of this Dimensions.  # noqa: E501


        :return: The dimension5_id of this Dimensions.  # noqa: E501
        :rtype: int
        """
        return self._dimension5_id

    @dimension5_id.setter
    def dimension5_id(self, dimension5_id):
        """Sets the dimension5_id of this Dimensions.


        :param dimension5_id: The dimension5_id of this Dimensions.  # noqa: E501
        :type: int
        """

        self._dimension5_id = dimension5_id

    @property
    def dimension9_id(self):
        """Gets the dimension9_id of this Dimensions.  # noqa: E501


        :return: The dimension9_id of this Dimensions.  # noqa: E501
        :rtype: int
        """
        return self._dimension9_id

    @dimension9_id.setter
    def dimension9_id(self, dimension9_id):
        """Sets the dimension9_id of this Dimensions.


        :param dimension9_id: The dimension9_id of this Dimensions.  # noqa: E501
        :type: int
        """

        self._dimension9_id = dimension9_id

    @property
    def custom_values(self):
        """Gets the custom_values of this Dimensions.  # noqa: E501


        :return: The custom_values of this Dimensions.  # noqa: E501
        :rtype: CustomValues
        """
        return self._custom_values

    @custom_values.setter
    def custom_values(self, custom_values):
        """Sets the custom_values of this Dimensions.


        :param custom_values: The custom_values of this Dimensions.  # noqa: E501
        :type: CustomValues
        """

        self._custom_values = custom_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Dimensions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Dimensions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
