# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Code(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'postnr': 'str',
        'gmlcode': 'str',
        'skatte_og_avgiftregel': 'str',
        'kunfranav': 'str',
        'gyldigtil': 'str',
        'fordel': 'str',
        'uninavn': 'str',
        'gyldigfom': 'str',
        'utloeser_arbeidsgiveravgift': 'str',
        'inngaar_i_grunnlag_for_trekk': 'str',
        'loennsinntekt': 'Loennsinntekt',
        'ytelse_fra_offentlige': 'YtelseFraOffentlige',
        'pensjon_eller_trygd': 'PensjonEllerTrygd',
        'naeringsinntekt': 'Naeringsinntekt',
        'fradrag': 'Fradrag',
        'forskuddstrekk': 'Forskuddstrekk',
        'utleggstrekk': 'Utleggstrekk',
        'custom_values': 'CustomValues'
    }

    attribute_map = {
        'postnr': 'postnr',
        'gmlcode': 'gmlcode',
        'skatte_og_avgiftregel': 'skatteOgAvgiftregel',
        'kunfranav': 'kunfranav',
        'gyldigtil': 'gyldigtil',
        'fordel': 'fordel',
        'uninavn': 'uninavn',
        'gyldigfom': 'gyldigfom',
        'utloeser_arbeidsgiveravgift': 'utloeserArbeidsgiveravgift',
        'inngaar_i_grunnlag_for_trekk': 'inngaarIGrunnlagForTrekk',
        'loennsinntekt': 'loennsinntekt',
        'ytelse_fra_offentlige': 'ytelseFraOffentlige',
        'pensjon_eller_trygd': 'pensjonEllerTrygd',
        'naeringsinntekt': 'naeringsinntekt',
        'fradrag': 'fradrag',
        'forskuddstrekk': 'forskuddstrekk',
        'utleggstrekk': 'utleggstrekk',
        'custom_values': 'CustomValues'
    }

    def __init__(self, postnr=None, gmlcode=None, skatte_og_avgiftregel=None, kunfranav=None, gyldigtil=None, fordel=None, uninavn=None, gyldigfom=None, utloeser_arbeidsgiveravgift=None, inngaar_i_grunnlag_for_trekk=None, loennsinntekt=None, ytelse_fra_offentlige=None, pensjon_eller_trygd=None, naeringsinntekt=None, fradrag=None, forskuddstrekk=None, utleggstrekk=None, custom_values=None):  # noqa: E501
        """Code - a model defined in Swagger"""  # noqa: E501
        self._postnr = None
        self._gmlcode = None
        self._skatte_og_avgiftregel = None
        self._kunfranav = None
        self._gyldigtil = None
        self._fordel = None
        self._uninavn = None
        self._gyldigfom = None
        self._utloeser_arbeidsgiveravgift = None
        self._inngaar_i_grunnlag_for_trekk = None
        self._loennsinntekt = None
        self._ytelse_fra_offentlige = None
        self._pensjon_eller_trygd = None
        self._naeringsinntekt = None
        self._fradrag = None
        self._forskuddstrekk = None
        self._utleggstrekk = None
        self._custom_values = None
        self.discriminator = None
        if postnr is not None:
            self.postnr = postnr
        if gmlcode is not None:
            self.gmlcode = gmlcode
        if skatte_og_avgiftregel is not None:
            self.skatte_og_avgiftregel = skatte_og_avgiftregel
        if kunfranav is not None:
            self.kunfranav = kunfranav
        if gyldigtil is not None:
            self.gyldigtil = gyldigtil
        if fordel is not None:
            self.fordel = fordel
        if uninavn is not None:
            self.uninavn = uninavn
        if gyldigfom is not None:
            self.gyldigfom = gyldigfom
        if utloeser_arbeidsgiveravgift is not None:
            self.utloeser_arbeidsgiveravgift = utloeser_arbeidsgiveravgift
        if inngaar_i_grunnlag_for_trekk is not None:
            self.inngaar_i_grunnlag_for_trekk = inngaar_i_grunnlag_for_trekk
        if loennsinntekt is not None:
            self.loennsinntekt = loennsinntekt
        if ytelse_fra_offentlige is not None:
            self.ytelse_fra_offentlige = ytelse_fra_offentlige
        if pensjon_eller_trygd is not None:
            self.pensjon_eller_trygd = pensjon_eller_trygd
        if naeringsinntekt is not None:
            self.naeringsinntekt = naeringsinntekt
        if fradrag is not None:
            self.fradrag = fradrag
        if forskuddstrekk is not None:
            self.forskuddstrekk = forskuddstrekk
        if utleggstrekk is not None:
            self.utleggstrekk = utleggstrekk
        if custom_values is not None:
            self.custom_values = custom_values

    @property
    def postnr(self):
        """Gets the postnr of this Code.  # noqa: E501


        :return: The postnr of this Code.  # noqa: E501
        :rtype: str
        """
        return self._postnr

    @postnr.setter
    def postnr(self, postnr):
        """Sets the postnr of this Code.


        :param postnr: The postnr of this Code.  # noqa: E501
        :type: str
        """

        self._postnr = postnr

    @property
    def gmlcode(self):
        """Gets the gmlcode of this Code.  # noqa: E501


        :return: The gmlcode of this Code.  # noqa: E501
        :rtype: str
        """
        return self._gmlcode

    @gmlcode.setter
    def gmlcode(self, gmlcode):
        """Sets the gmlcode of this Code.


        :param gmlcode: The gmlcode of this Code.  # noqa: E501
        :type: str
        """

        self._gmlcode = gmlcode

    @property
    def skatte_og_avgiftregel(self):
        """Gets the skatte_og_avgiftregel of this Code.  # noqa: E501


        :return: The skatte_og_avgiftregel of this Code.  # noqa: E501
        :rtype: str
        """
        return self._skatte_og_avgiftregel

    @skatte_og_avgiftregel.setter
    def skatte_og_avgiftregel(self, skatte_og_avgiftregel):
        """Sets the skatte_og_avgiftregel of this Code.


        :param skatte_og_avgiftregel: The skatte_og_avgiftregel of this Code.  # noqa: E501
        :type: str
        """

        self._skatte_og_avgiftregel = skatte_og_avgiftregel

    @property
    def kunfranav(self):
        """Gets the kunfranav of this Code.  # noqa: E501


        :return: The kunfranav of this Code.  # noqa: E501
        :rtype: str
        """
        return self._kunfranav

    @kunfranav.setter
    def kunfranav(self, kunfranav):
        """Sets the kunfranav of this Code.


        :param kunfranav: The kunfranav of this Code.  # noqa: E501
        :type: str
        """

        self._kunfranav = kunfranav

    @property
    def gyldigtil(self):
        """Gets the gyldigtil of this Code.  # noqa: E501


        :return: The gyldigtil of this Code.  # noqa: E501
        :rtype: str
        """
        return self._gyldigtil

    @gyldigtil.setter
    def gyldigtil(self, gyldigtil):
        """Sets the gyldigtil of this Code.


        :param gyldigtil: The gyldigtil of this Code.  # noqa: E501
        :type: str
        """

        self._gyldigtil = gyldigtil

    @property
    def fordel(self):
        """Gets the fordel of this Code.  # noqa: E501


        :return: The fordel of this Code.  # noqa: E501
        :rtype: str
        """
        return self._fordel

    @fordel.setter
    def fordel(self, fordel):
        """Sets the fordel of this Code.


        :param fordel: The fordel of this Code.  # noqa: E501
        :type: str
        """

        self._fordel = fordel

    @property
    def uninavn(self):
        """Gets the uninavn of this Code.  # noqa: E501


        :return: The uninavn of this Code.  # noqa: E501
        :rtype: str
        """
        return self._uninavn

    @uninavn.setter
    def uninavn(self, uninavn):
        """Sets the uninavn of this Code.


        :param uninavn: The uninavn of this Code.  # noqa: E501
        :type: str
        """

        self._uninavn = uninavn

    @property
    def gyldigfom(self):
        """Gets the gyldigfom of this Code.  # noqa: E501


        :return: The gyldigfom of this Code.  # noqa: E501
        :rtype: str
        """
        return self._gyldigfom

    @gyldigfom.setter
    def gyldigfom(self, gyldigfom):
        """Sets the gyldigfom of this Code.


        :param gyldigfom: The gyldigfom of this Code.  # noqa: E501
        :type: str
        """

        self._gyldigfom = gyldigfom

    @property
    def utloeser_arbeidsgiveravgift(self):
        """Gets the utloeser_arbeidsgiveravgift of this Code.  # noqa: E501


        :return: The utloeser_arbeidsgiveravgift of this Code.  # noqa: E501
        :rtype: str
        """
        return self._utloeser_arbeidsgiveravgift

    @utloeser_arbeidsgiveravgift.setter
    def utloeser_arbeidsgiveravgift(self, utloeser_arbeidsgiveravgift):
        """Sets the utloeser_arbeidsgiveravgift of this Code.


        :param utloeser_arbeidsgiveravgift: The utloeser_arbeidsgiveravgift of this Code.  # noqa: E501
        :type: str
        """

        self._utloeser_arbeidsgiveravgift = utloeser_arbeidsgiveravgift

    @property
    def inngaar_i_grunnlag_for_trekk(self):
        """Gets the inngaar_i_grunnlag_for_trekk of this Code.  # noqa: E501


        :return: The inngaar_i_grunnlag_for_trekk of this Code.  # noqa: E501
        :rtype: str
        """
        return self._inngaar_i_grunnlag_for_trekk

    @inngaar_i_grunnlag_for_trekk.setter
    def inngaar_i_grunnlag_for_trekk(self, inngaar_i_grunnlag_for_trekk):
        """Sets the inngaar_i_grunnlag_for_trekk of this Code.


        :param inngaar_i_grunnlag_for_trekk: The inngaar_i_grunnlag_for_trekk of this Code.  # noqa: E501
        :type: str
        """

        self._inngaar_i_grunnlag_for_trekk = inngaar_i_grunnlag_for_trekk

    @property
    def loennsinntekt(self):
        """Gets the loennsinntekt of this Code.  # noqa: E501


        :return: The loennsinntekt of this Code.  # noqa: E501
        :rtype: Loennsinntekt
        """
        return self._loennsinntekt

    @loennsinntekt.setter
    def loennsinntekt(self, loennsinntekt):
        """Sets the loennsinntekt of this Code.


        :param loennsinntekt: The loennsinntekt of this Code.  # noqa: E501
        :type: Loennsinntekt
        """

        self._loennsinntekt = loennsinntekt

    @property
    def ytelse_fra_offentlige(self):
        """Gets the ytelse_fra_offentlige of this Code.  # noqa: E501


        :return: The ytelse_fra_offentlige of this Code.  # noqa: E501
        :rtype: YtelseFraOffentlige
        """
        return self._ytelse_fra_offentlige

    @ytelse_fra_offentlige.setter
    def ytelse_fra_offentlige(self, ytelse_fra_offentlige):
        """Sets the ytelse_fra_offentlige of this Code.


        :param ytelse_fra_offentlige: The ytelse_fra_offentlige of this Code.  # noqa: E501
        :type: YtelseFraOffentlige
        """

        self._ytelse_fra_offentlige = ytelse_fra_offentlige

    @property
    def pensjon_eller_trygd(self):
        """Gets the pensjon_eller_trygd of this Code.  # noqa: E501


        :return: The pensjon_eller_trygd of this Code.  # noqa: E501
        :rtype: PensjonEllerTrygd
        """
        return self._pensjon_eller_trygd

    @pensjon_eller_trygd.setter
    def pensjon_eller_trygd(self, pensjon_eller_trygd):
        """Sets the pensjon_eller_trygd of this Code.


        :param pensjon_eller_trygd: The pensjon_eller_trygd of this Code.  # noqa: E501
        :type: PensjonEllerTrygd
        """

        self._pensjon_eller_trygd = pensjon_eller_trygd

    @property
    def naeringsinntekt(self):
        """Gets the naeringsinntekt of this Code.  # noqa: E501


        :return: The naeringsinntekt of this Code.  # noqa: E501
        :rtype: Naeringsinntekt
        """
        return self._naeringsinntekt

    @naeringsinntekt.setter
    def naeringsinntekt(self, naeringsinntekt):
        """Sets the naeringsinntekt of this Code.


        :param naeringsinntekt: The naeringsinntekt of this Code.  # noqa: E501
        :type: Naeringsinntekt
        """

        self._naeringsinntekt = naeringsinntekt

    @property
    def fradrag(self):
        """Gets the fradrag of this Code.  # noqa: E501


        :return: The fradrag of this Code.  # noqa: E501
        :rtype: Fradrag
        """
        return self._fradrag

    @fradrag.setter
    def fradrag(self, fradrag):
        """Sets the fradrag of this Code.


        :param fradrag: The fradrag of this Code.  # noqa: E501
        :type: Fradrag
        """

        self._fradrag = fradrag

    @property
    def forskuddstrekk(self):
        """Gets the forskuddstrekk of this Code.  # noqa: E501


        :return: The forskuddstrekk of this Code.  # noqa: E501
        :rtype: Forskuddstrekk
        """
        return self._forskuddstrekk

    @forskuddstrekk.setter
    def forskuddstrekk(self, forskuddstrekk):
        """Sets the forskuddstrekk of this Code.


        :param forskuddstrekk: The forskuddstrekk of this Code.  # noqa: E501
        :type: Forskuddstrekk
        """

        self._forskuddstrekk = forskuddstrekk

    @property
    def utleggstrekk(self):
        """Gets the utleggstrekk of this Code.  # noqa: E501


        :return: The utleggstrekk of this Code.  # noqa: E501
        :rtype: Utleggstrekk
        """
        return self._utleggstrekk

    @utleggstrekk.setter
    def utleggstrekk(self, utleggstrekk):
        """Sets the utleggstrekk of this Code.


        :param utleggstrekk: The utleggstrekk of this Code.  # noqa: E501
        :type: Utleggstrekk
        """

        self._utleggstrekk = utleggstrekk

    @property
    def custom_values(self):
        """Gets the custom_values of this Code.  # noqa: E501


        :return: The custom_values of this Code.  # noqa: E501
        :rtype: CustomValues
        """
        return self._custom_values

    @custom_values.setter
    def custom_values(self, custom_values):
        """Sets the custom_values of this Code.


        :param custom_values: The custom_values of this Code.  # noqa: E501
        :type: CustomValues
        """

        self._custom_values = custom_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Code, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Code):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
