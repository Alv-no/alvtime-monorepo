# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateBankIntegrationDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'email': 'str',
        'phone': 'str',
        'bank_approval': 'bool',
        'tuser_name': 'str',
        'is_bank_statement': 'bool',
        'bank_account_id': 'int',
        'bank': 'str',
        'user_name': 'str',
        'bank_acceptance': 'bool',
        'is_inbound': 'bool',
        'display_name': 'str',
        'service_provider': 'int',
        'password': 'str',
        'require_two_stage': 'bool',
        'is_bank_balance': 'bool',
        'is_outgoing': 'bool',
        'bank_accounts': 'list[BankAccountDTO]',
        'custom_values': 'CustomValues'
    }

    attribute_map = {
        'email': 'Email',
        'phone': 'Phone',
        'bank_approval': 'BankApproval',
        'tuser_name': 'TuserName',
        'is_bank_statement': 'IsBankStatement',
        'bank_account_id': 'BankAccountID',
        'bank': 'Bank',
        'user_name': 'UserName',
        'bank_acceptance': 'BankAcceptance',
        'is_inbound': 'IsInbound',
        'display_name': 'DisplayName',
        'service_provider': 'ServiceProvider',
        'password': 'Password',
        'require_two_stage': 'RequireTwoStage',
        'is_bank_balance': 'IsBankBalance',
        'is_outgoing': 'IsOutgoing',
        'bank_accounts': 'BankAccounts',
        'custom_values': 'CustomValues'
    }

    def __init__(self, email=None, phone=None, bank_approval=None, tuser_name=None, is_bank_statement=None, bank_account_id=None, bank=None, user_name=None, bank_acceptance=None, is_inbound=None, display_name=None, service_provider=None, password=None, require_two_stage=None, is_bank_balance=None, is_outgoing=None, bank_accounts=None, custom_values=None):  # noqa: E501
        """CreateBankIntegrationDTO - a model defined in Swagger"""  # noqa: E501
        self._email = None
        self._phone = None
        self._bank_approval = None
        self._tuser_name = None
        self._is_bank_statement = None
        self._bank_account_id = None
        self._bank = None
        self._user_name = None
        self._bank_acceptance = None
        self._is_inbound = None
        self._display_name = None
        self._service_provider = None
        self._password = None
        self._require_two_stage = None
        self._is_bank_balance = None
        self._is_outgoing = None
        self._bank_accounts = None
        self._custom_values = None
        self.discriminator = None
        if email is not None:
            self.email = email
        if phone is not None:
            self.phone = phone
        if bank_approval is not None:
            self.bank_approval = bank_approval
        if tuser_name is not None:
            self.tuser_name = tuser_name
        if is_bank_statement is not None:
            self.is_bank_statement = is_bank_statement
        if bank_account_id is not None:
            self.bank_account_id = bank_account_id
        if bank is not None:
            self.bank = bank
        if user_name is not None:
            self.user_name = user_name
        if bank_acceptance is not None:
            self.bank_acceptance = bank_acceptance
        if is_inbound is not None:
            self.is_inbound = is_inbound
        if display_name is not None:
            self.display_name = display_name
        if service_provider is not None:
            self.service_provider = service_provider
        if password is not None:
            self.password = password
        if require_two_stage is not None:
            self.require_two_stage = require_two_stage
        if is_bank_balance is not None:
            self.is_bank_balance = is_bank_balance
        if is_outgoing is not None:
            self.is_outgoing = is_outgoing
        if bank_accounts is not None:
            self.bank_accounts = bank_accounts
        if custom_values is not None:
            self.custom_values = custom_values

    @property
    def email(self):
        """Gets the email of this CreateBankIntegrationDTO.  # noqa: E501


        :return: The email of this CreateBankIntegrationDTO.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this CreateBankIntegrationDTO.


        :param email: The email of this CreateBankIntegrationDTO.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def phone(self):
        """Gets the phone of this CreateBankIntegrationDTO.  # noqa: E501


        :return: The phone of this CreateBankIntegrationDTO.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this CreateBankIntegrationDTO.


        :param phone: The phone of this CreateBankIntegrationDTO.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def bank_approval(self):
        """Gets the bank_approval of this CreateBankIntegrationDTO.  # noqa: E501


        :return: The bank_approval of this CreateBankIntegrationDTO.  # noqa: E501
        :rtype: bool
        """
        return self._bank_approval

    @bank_approval.setter
    def bank_approval(self, bank_approval):
        """Sets the bank_approval of this CreateBankIntegrationDTO.


        :param bank_approval: The bank_approval of this CreateBankIntegrationDTO.  # noqa: E501
        :type: bool
        """

        self._bank_approval = bank_approval

    @property
    def tuser_name(self):
        """Gets the tuser_name of this CreateBankIntegrationDTO.  # noqa: E501


        :return: The tuser_name of this CreateBankIntegrationDTO.  # noqa: E501
        :rtype: str
        """
        return self._tuser_name

    @tuser_name.setter
    def tuser_name(self, tuser_name):
        """Sets the tuser_name of this CreateBankIntegrationDTO.


        :param tuser_name: The tuser_name of this CreateBankIntegrationDTO.  # noqa: E501
        :type: str
        """

        self._tuser_name = tuser_name

    @property
    def is_bank_statement(self):
        """Gets the is_bank_statement of this CreateBankIntegrationDTO.  # noqa: E501


        :return: The is_bank_statement of this CreateBankIntegrationDTO.  # noqa: E501
        :rtype: bool
        """
        return self._is_bank_statement

    @is_bank_statement.setter
    def is_bank_statement(self, is_bank_statement):
        """Sets the is_bank_statement of this CreateBankIntegrationDTO.


        :param is_bank_statement: The is_bank_statement of this CreateBankIntegrationDTO.  # noqa: E501
        :type: bool
        """

        self._is_bank_statement = is_bank_statement

    @property
    def bank_account_id(self):
        """Gets the bank_account_id of this CreateBankIntegrationDTO.  # noqa: E501


        :return: The bank_account_id of this CreateBankIntegrationDTO.  # noqa: E501
        :rtype: int
        """
        return self._bank_account_id

    @bank_account_id.setter
    def bank_account_id(self, bank_account_id):
        """Sets the bank_account_id of this CreateBankIntegrationDTO.


        :param bank_account_id: The bank_account_id of this CreateBankIntegrationDTO.  # noqa: E501
        :type: int
        """

        self._bank_account_id = bank_account_id

    @property
    def bank(self):
        """Gets the bank of this CreateBankIntegrationDTO.  # noqa: E501


        :return: The bank of this CreateBankIntegrationDTO.  # noqa: E501
        :rtype: str
        """
        return self._bank

    @bank.setter
    def bank(self, bank):
        """Sets the bank of this CreateBankIntegrationDTO.


        :param bank: The bank of this CreateBankIntegrationDTO.  # noqa: E501
        :type: str
        """

        self._bank = bank

    @property
    def user_name(self):
        """Gets the user_name of this CreateBankIntegrationDTO.  # noqa: E501


        :return: The user_name of this CreateBankIntegrationDTO.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this CreateBankIntegrationDTO.


        :param user_name: The user_name of this CreateBankIntegrationDTO.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def bank_acceptance(self):
        """Gets the bank_acceptance of this CreateBankIntegrationDTO.  # noqa: E501


        :return: The bank_acceptance of this CreateBankIntegrationDTO.  # noqa: E501
        :rtype: bool
        """
        return self._bank_acceptance

    @bank_acceptance.setter
    def bank_acceptance(self, bank_acceptance):
        """Sets the bank_acceptance of this CreateBankIntegrationDTO.


        :param bank_acceptance: The bank_acceptance of this CreateBankIntegrationDTO.  # noqa: E501
        :type: bool
        """

        self._bank_acceptance = bank_acceptance

    @property
    def is_inbound(self):
        """Gets the is_inbound of this CreateBankIntegrationDTO.  # noqa: E501


        :return: The is_inbound of this CreateBankIntegrationDTO.  # noqa: E501
        :rtype: bool
        """
        return self._is_inbound

    @is_inbound.setter
    def is_inbound(self, is_inbound):
        """Sets the is_inbound of this CreateBankIntegrationDTO.


        :param is_inbound: The is_inbound of this CreateBankIntegrationDTO.  # noqa: E501
        :type: bool
        """

        self._is_inbound = is_inbound

    @property
    def display_name(self):
        """Gets the display_name of this CreateBankIntegrationDTO.  # noqa: E501


        :return: The display_name of this CreateBankIntegrationDTO.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this CreateBankIntegrationDTO.


        :param display_name: The display_name of this CreateBankIntegrationDTO.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def service_provider(self):
        """Gets the service_provider of this CreateBankIntegrationDTO.  # noqa: E501


        :return: The service_provider of this CreateBankIntegrationDTO.  # noqa: E501
        :rtype: int
        """
        return self._service_provider

    @service_provider.setter
    def service_provider(self, service_provider):
        """Sets the service_provider of this CreateBankIntegrationDTO.


        :param service_provider: The service_provider of this CreateBankIntegrationDTO.  # noqa: E501
        :type: int
        """

        self._service_provider = service_provider

    @property
    def password(self):
        """Gets the password of this CreateBankIntegrationDTO.  # noqa: E501


        :return: The password of this CreateBankIntegrationDTO.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this CreateBankIntegrationDTO.


        :param password: The password of this CreateBankIntegrationDTO.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def require_two_stage(self):
        """Gets the require_two_stage of this CreateBankIntegrationDTO.  # noqa: E501


        :return: The require_two_stage of this CreateBankIntegrationDTO.  # noqa: E501
        :rtype: bool
        """
        return self._require_two_stage

    @require_two_stage.setter
    def require_two_stage(self, require_two_stage):
        """Sets the require_two_stage of this CreateBankIntegrationDTO.


        :param require_two_stage: The require_two_stage of this CreateBankIntegrationDTO.  # noqa: E501
        :type: bool
        """

        self._require_two_stage = require_two_stage

    @property
    def is_bank_balance(self):
        """Gets the is_bank_balance of this CreateBankIntegrationDTO.  # noqa: E501


        :return: The is_bank_balance of this CreateBankIntegrationDTO.  # noqa: E501
        :rtype: bool
        """
        return self._is_bank_balance

    @is_bank_balance.setter
    def is_bank_balance(self, is_bank_balance):
        """Sets the is_bank_balance of this CreateBankIntegrationDTO.


        :param is_bank_balance: The is_bank_balance of this CreateBankIntegrationDTO.  # noqa: E501
        :type: bool
        """

        self._is_bank_balance = is_bank_balance

    @property
    def is_outgoing(self):
        """Gets the is_outgoing of this CreateBankIntegrationDTO.  # noqa: E501


        :return: The is_outgoing of this CreateBankIntegrationDTO.  # noqa: E501
        :rtype: bool
        """
        return self._is_outgoing

    @is_outgoing.setter
    def is_outgoing(self, is_outgoing):
        """Sets the is_outgoing of this CreateBankIntegrationDTO.


        :param is_outgoing: The is_outgoing of this CreateBankIntegrationDTO.  # noqa: E501
        :type: bool
        """

        self._is_outgoing = is_outgoing

    @property
    def bank_accounts(self):
        """Gets the bank_accounts of this CreateBankIntegrationDTO.  # noqa: E501


        :return: The bank_accounts of this CreateBankIntegrationDTO.  # noqa: E501
        :rtype: list[BankAccountDTO]
        """
        return self._bank_accounts

    @bank_accounts.setter
    def bank_accounts(self, bank_accounts):
        """Sets the bank_accounts of this CreateBankIntegrationDTO.


        :param bank_accounts: The bank_accounts of this CreateBankIntegrationDTO.  # noqa: E501
        :type: list[BankAccountDTO]
        """

        self._bank_accounts = bank_accounts

    @property
    def custom_values(self):
        """Gets the custom_values of this CreateBankIntegrationDTO.  # noqa: E501


        :return: The custom_values of this CreateBankIntegrationDTO.  # noqa: E501
        :rtype: CustomValues
        """
        return self._custom_values

    @custom_values.setter
    def custom_values(self, custom_values):
        """Sets the custom_values of this CreateBankIntegrationDTO.


        :param custom_values: The custom_values of this CreateBankIntegrationDTO.  # noqa: E501
        :type: CustomValues
        """

        self._custom_values = custom_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateBankIntegrationDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateBankIntegrationDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
