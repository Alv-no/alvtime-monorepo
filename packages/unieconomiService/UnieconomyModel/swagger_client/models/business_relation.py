# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BusinessRelation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'default_contact_id': 'int',
        'default_phone_id': 'int',
        'default_bank_account_id': 'int',
        'name': 'str',
        'status_code': 'int',
        'deleted': 'bool',
        'default_email_id': 'int',
        'shipping_address_id': 'int',
        'id': 'int',
        'invoice_address_id': 'int',
        'updated_by': 'str',
        'created_by': 'str',
        'default_contact': 'Contact',
        'contacts': 'list[Contact]',
        'addresses': 'list[Address]',
        'phones': 'list[Phone]',
        'emails': 'list[Email]',
        'bank_accounts': 'list[BankAccount]',
        'invoice_address': 'Address',
        'shipping_address': 'Address',
        'default_phone': 'Phone',
        'default_email': 'Email',
        'default_bank_account': 'BankAccount',
        'custom_values': 'CustomValues'
    }

    attribute_map = {
        'default_contact_id': 'DefaultContactID',
        'default_phone_id': 'DefaultPhoneID',
        'default_bank_account_id': 'DefaultBankAccountID',
        'name': 'Name',
        'status_code': 'StatusCode',
        'deleted': 'Deleted',
        'default_email_id': 'DefaultEmailID',
        'shipping_address_id': 'ShippingAddressID',
        'id': 'ID',
        'invoice_address_id': 'InvoiceAddressID',
        'updated_by': 'UpdatedBy',
        'created_by': 'CreatedBy',
        'default_contact': 'DefaultContact',
        'contacts': 'Contacts',
        'addresses': 'Addresses',
        'phones': 'Phones',
        'emails': 'Emails',
        'bank_accounts': 'BankAccounts',
        'invoice_address': 'InvoiceAddress',
        'shipping_address': 'ShippingAddress',
        'default_phone': 'DefaultPhone',
        'default_email': 'DefaultEmail',
        'default_bank_account': 'DefaultBankAccount',
        'custom_values': 'CustomValues'
    }

    def __init__(self, default_contact_id=None, default_phone_id=None, default_bank_account_id=None, name=None, status_code=None, deleted=None, default_email_id=None, shipping_address_id=None, id=None, invoice_address_id=None, updated_by=None, created_by=None, default_contact=None, contacts=None, addresses=None, phones=None, emails=None, bank_accounts=None, invoice_address=None, shipping_address=None, default_phone=None, default_email=None, default_bank_account=None, custom_values=None):  # noqa: E501
        """BusinessRelation - a model defined in Swagger"""  # noqa: E501
        self._default_contact_id = None
        self._default_phone_id = None
        self._default_bank_account_id = None
        self._name = None
        self._status_code = None
        self._deleted = None
        self._default_email_id = None
        self._shipping_address_id = None
        self._id = None
        self._invoice_address_id = None
        self._updated_by = None
        self._created_by = None
        self._default_contact = None
        self._contacts = None
        self._addresses = None
        self._phones = None
        self._emails = None
        self._bank_accounts = None
        self._invoice_address = None
        self._shipping_address = None
        self._default_phone = None
        self._default_email = None
        self._default_bank_account = None
        self._custom_values = None
        self.discriminator = None
        if default_contact_id is not None:
            self.default_contact_id = default_contact_id
        if default_phone_id is not None:
            self.default_phone_id = default_phone_id
        if default_bank_account_id is not None:
            self.default_bank_account_id = default_bank_account_id
        if name is not None:
            self.name = name
        if status_code is not None:
            self.status_code = status_code
        if deleted is not None:
            self.deleted = deleted
        if default_email_id is not None:
            self.default_email_id = default_email_id
        if shipping_address_id is not None:
            self.shipping_address_id = shipping_address_id
        if id is not None:
            self.id = id
        if invoice_address_id is not None:
            self.invoice_address_id = invoice_address_id
        if updated_by is not None:
            self.updated_by = updated_by
        if created_by is not None:
            self.created_by = created_by
        if default_contact is not None:
            self.default_contact = default_contact
        if contacts is not None:
            self.contacts = contacts
        if addresses is not None:
            self.addresses = addresses
        if phones is not None:
            self.phones = phones
        if emails is not None:
            self.emails = emails
        if bank_accounts is not None:
            self.bank_accounts = bank_accounts
        if invoice_address is not None:
            self.invoice_address = invoice_address
        if shipping_address is not None:
            self.shipping_address = shipping_address
        if default_phone is not None:
            self.default_phone = default_phone
        if default_email is not None:
            self.default_email = default_email
        if default_bank_account is not None:
            self.default_bank_account = default_bank_account
        if custom_values is not None:
            self.custom_values = custom_values

    @property
    def default_contact_id(self):
        """Gets the default_contact_id of this BusinessRelation.  # noqa: E501


        :return: The default_contact_id of this BusinessRelation.  # noqa: E501
        :rtype: int
        """
        return self._default_contact_id

    @default_contact_id.setter
    def default_contact_id(self, default_contact_id):
        """Sets the default_contact_id of this BusinessRelation.


        :param default_contact_id: The default_contact_id of this BusinessRelation.  # noqa: E501
        :type: int
        """

        self._default_contact_id = default_contact_id

    @property
    def default_phone_id(self):
        """Gets the default_phone_id of this BusinessRelation.  # noqa: E501


        :return: The default_phone_id of this BusinessRelation.  # noqa: E501
        :rtype: int
        """
        return self._default_phone_id

    @default_phone_id.setter
    def default_phone_id(self, default_phone_id):
        """Sets the default_phone_id of this BusinessRelation.


        :param default_phone_id: The default_phone_id of this BusinessRelation.  # noqa: E501
        :type: int
        """

        self._default_phone_id = default_phone_id

    @property
    def default_bank_account_id(self):
        """Gets the default_bank_account_id of this BusinessRelation.  # noqa: E501


        :return: The default_bank_account_id of this BusinessRelation.  # noqa: E501
        :rtype: int
        """
        return self._default_bank_account_id

    @default_bank_account_id.setter
    def default_bank_account_id(self, default_bank_account_id):
        """Sets the default_bank_account_id of this BusinessRelation.


        :param default_bank_account_id: The default_bank_account_id of this BusinessRelation.  # noqa: E501
        :type: int
        """

        self._default_bank_account_id = default_bank_account_id

    @property
    def name(self):
        """Gets the name of this BusinessRelation.  # noqa: E501


        :return: The name of this BusinessRelation.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BusinessRelation.


        :param name: The name of this BusinessRelation.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def status_code(self):
        """Gets the status_code of this BusinessRelation.  # noqa: E501


        :return: The status_code of this BusinessRelation.  # noqa: E501
        :rtype: int
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this BusinessRelation.


        :param status_code: The status_code of this BusinessRelation.  # noqa: E501
        :type: int
        """

        self._status_code = status_code

    @property
    def deleted(self):
        """Gets the deleted of this BusinessRelation.  # noqa: E501


        :return: The deleted of this BusinessRelation.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this BusinessRelation.


        :param deleted: The deleted of this BusinessRelation.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def default_email_id(self):
        """Gets the default_email_id of this BusinessRelation.  # noqa: E501


        :return: The default_email_id of this BusinessRelation.  # noqa: E501
        :rtype: int
        """
        return self._default_email_id

    @default_email_id.setter
    def default_email_id(self, default_email_id):
        """Sets the default_email_id of this BusinessRelation.


        :param default_email_id: The default_email_id of this BusinessRelation.  # noqa: E501
        :type: int
        """

        self._default_email_id = default_email_id

    @property
    def shipping_address_id(self):
        """Gets the shipping_address_id of this BusinessRelation.  # noqa: E501


        :return: The shipping_address_id of this BusinessRelation.  # noqa: E501
        :rtype: int
        """
        return self._shipping_address_id

    @shipping_address_id.setter
    def shipping_address_id(self, shipping_address_id):
        """Sets the shipping_address_id of this BusinessRelation.


        :param shipping_address_id: The shipping_address_id of this BusinessRelation.  # noqa: E501
        :type: int
        """

        self._shipping_address_id = shipping_address_id

    @property
    def id(self):
        """Gets the id of this BusinessRelation.  # noqa: E501


        :return: The id of this BusinessRelation.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BusinessRelation.


        :param id: The id of this BusinessRelation.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def invoice_address_id(self):
        """Gets the invoice_address_id of this BusinessRelation.  # noqa: E501


        :return: The invoice_address_id of this BusinessRelation.  # noqa: E501
        :rtype: int
        """
        return self._invoice_address_id

    @invoice_address_id.setter
    def invoice_address_id(self, invoice_address_id):
        """Sets the invoice_address_id of this BusinessRelation.


        :param invoice_address_id: The invoice_address_id of this BusinessRelation.  # noqa: E501
        :type: int
        """

        self._invoice_address_id = invoice_address_id

    @property
    def updated_by(self):
        """Gets the updated_by of this BusinessRelation.  # noqa: E501


        :return: The updated_by of this BusinessRelation.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this BusinessRelation.


        :param updated_by: The updated_by of this BusinessRelation.  # noqa: E501
        :type: str
        """

        self._updated_by = updated_by

    @property
    def created_by(self):
        """Gets the created_by of this BusinessRelation.  # noqa: E501


        :return: The created_by of this BusinessRelation.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this BusinessRelation.


        :param created_by: The created_by of this BusinessRelation.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def default_contact(self):
        """Gets the default_contact of this BusinessRelation.  # noqa: E501


        :return: The default_contact of this BusinessRelation.  # noqa: E501
        :rtype: Contact
        """
        return self._default_contact

    @default_contact.setter
    def default_contact(self, default_contact):
        """Sets the default_contact of this BusinessRelation.


        :param default_contact: The default_contact of this BusinessRelation.  # noqa: E501
        :type: Contact
        """

        self._default_contact = default_contact

    @property
    def contacts(self):
        """Gets the contacts of this BusinessRelation.  # noqa: E501


        :return: The contacts of this BusinessRelation.  # noqa: E501
        :rtype: list[Contact]
        """
        return self._contacts

    @contacts.setter
    def contacts(self, contacts):
        """Sets the contacts of this BusinessRelation.


        :param contacts: The contacts of this BusinessRelation.  # noqa: E501
        :type: list[Contact]
        """

        self._contacts = contacts

    @property
    def addresses(self):
        """Gets the addresses of this BusinessRelation.  # noqa: E501


        :return: The addresses of this BusinessRelation.  # noqa: E501
        :rtype: list[Address]
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses):
        """Sets the addresses of this BusinessRelation.


        :param addresses: The addresses of this BusinessRelation.  # noqa: E501
        :type: list[Address]
        """

        self._addresses = addresses

    @property
    def phones(self):
        """Gets the phones of this BusinessRelation.  # noqa: E501


        :return: The phones of this BusinessRelation.  # noqa: E501
        :rtype: list[Phone]
        """
        return self._phones

    @phones.setter
    def phones(self, phones):
        """Sets the phones of this BusinessRelation.


        :param phones: The phones of this BusinessRelation.  # noqa: E501
        :type: list[Phone]
        """

        self._phones = phones

    @property
    def emails(self):
        """Gets the emails of this BusinessRelation.  # noqa: E501


        :return: The emails of this BusinessRelation.  # noqa: E501
        :rtype: list[Email]
        """
        return self._emails

    @emails.setter
    def emails(self, emails):
        """Sets the emails of this BusinessRelation.


        :param emails: The emails of this BusinessRelation.  # noqa: E501
        :type: list[Email]
        """

        self._emails = emails

    @property
    def bank_accounts(self):
        """Gets the bank_accounts of this BusinessRelation.  # noqa: E501


        :return: The bank_accounts of this BusinessRelation.  # noqa: E501
        :rtype: list[BankAccount]
        """
        return self._bank_accounts

    @bank_accounts.setter
    def bank_accounts(self, bank_accounts):
        """Sets the bank_accounts of this BusinessRelation.


        :param bank_accounts: The bank_accounts of this BusinessRelation.  # noqa: E501
        :type: list[BankAccount]
        """

        self._bank_accounts = bank_accounts

    @property
    def invoice_address(self):
        """Gets the invoice_address of this BusinessRelation.  # noqa: E501


        :return: The invoice_address of this BusinessRelation.  # noqa: E501
        :rtype: Address
        """
        return self._invoice_address

    @invoice_address.setter
    def invoice_address(self, invoice_address):
        """Sets the invoice_address of this BusinessRelation.


        :param invoice_address: The invoice_address of this BusinessRelation.  # noqa: E501
        :type: Address
        """

        self._invoice_address = invoice_address

    @property
    def shipping_address(self):
        """Gets the shipping_address of this BusinessRelation.  # noqa: E501


        :return: The shipping_address of this BusinessRelation.  # noqa: E501
        :rtype: Address
        """
        return self._shipping_address

    @shipping_address.setter
    def shipping_address(self, shipping_address):
        """Sets the shipping_address of this BusinessRelation.


        :param shipping_address: The shipping_address of this BusinessRelation.  # noqa: E501
        :type: Address
        """

        self._shipping_address = shipping_address

    @property
    def default_phone(self):
        """Gets the default_phone of this BusinessRelation.  # noqa: E501


        :return: The default_phone of this BusinessRelation.  # noqa: E501
        :rtype: Phone
        """
        return self._default_phone

    @default_phone.setter
    def default_phone(self, default_phone):
        """Sets the default_phone of this BusinessRelation.


        :param default_phone: The default_phone of this BusinessRelation.  # noqa: E501
        :type: Phone
        """

        self._default_phone = default_phone

    @property
    def default_email(self):
        """Gets the default_email of this BusinessRelation.  # noqa: E501


        :return: The default_email of this BusinessRelation.  # noqa: E501
        :rtype: Email
        """
        return self._default_email

    @default_email.setter
    def default_email(self, default_email):
        """Sets the default_email of this BusinessRelation.


        :param default_email: The default_email of this BusinessRelation.  # noqa: E501
        :type: Email
        """

        self._default_email = default_email

    @property
    def default_bank_account(self):
        """Gets the default_bank_account of this BusinessRelation.  # noqa: E501


        :return: The default_bank_account of this BusinessRelation.  # noqa: E501
        :rtype: BankAccount
        """
        return self._default_bank_account

    @default_bank_account.setter
    def default_bank_account(self, default_bank_account):
        """Sets the default_bank_account of this BusinessRelation.


        :param default_bank_account: The default_bank_account of this BusinessRelation.  # noqa: E501
        :type: BankAccount
        """

        self._default_bank_account = default_bank_account

    @property
    def custom_values(self):
        """Gets the custom_values of this BusinessRelation.  # noqa: E501


        :return: The custom_values of this BusinessRelation.  # noqa: E501
        :rtype: CustomValues
        """
        return self._custom_values

    @custom_values.setter
    def custom_values(self, custom_values):
        """Sets the custom_values of this BusinessRelation.


        :param custom_values: The custom_values of this BusinessRelation.  # noqa: E501
        :type: CustomValues
        """

        self._custom_values = custom_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BusinessRelation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BusinessRelation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
