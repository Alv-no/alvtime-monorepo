# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Product(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'part_name': 'str',
        'account_id': 'int',
        'varians_parent_id': 'int',
        'name': 'str',
        'dimensions_id': 'int',
        'status_code': 'int',
        'deleted': 'bool',
        'unit': 'str',
        'default_product_category_id': 'int',
        'type': 'str',
        'id': 'int',
        'vat_type_id': 'int',
        'calculate_gross_price_based_on_net_price': 'bool',
        'updated_by': 'str',
        'image_file_id': 'int',
        'created_by': 'str',
        'product_category_links': 'list[ProductCategoryLink]',
        'dimensions': 'Dimensions',
        'custom_values': 'CustomValues'
    }

    attribute_map = {
        'description': 'Description',
        'part_name': 'PartName',
        'account_id': 'AccountID',
        'varians_parent_id': 'VariansParentID',
        'name': 'Name',
        'dimensions_id': 'DimensionsID',
        'status_code': 'StatusCode',
        'deleted': 'Deleted',
        'unit': 'Unit',
        'default_product_category_id': 'DefaultProductCategoryID',
        'type': 'Type',
        'id': 'ID',
        'vat_type_id': 'VatTypeID',
        'calculate_gross_price_based_on_net_price': 'CalculateGrossPriceBasedOnNetPrice',
        'updated_by': 'UpdatedBy',
        'image_file_id': 'ImageFileID',
        'created_by': 'CreatedBy',
        'product_category_links': 'ProductCategoryLinks',
        'dimensions': 'Dimensions',
        'custom_values': 'CustomValues'
    }

    def __init__(self, description=None, part_name=None, account_id=None, varians_parent_id=None, name=None, dimensions_id=None, status_code=None, deleted=None, unit=None, default_product_category_id=None, type=None, id=None, vat_type_id=None, calculate_gross_price_based_on_net_price=None, updated_by=None, image_file_id=None, created_by=None, product_category_links=None, dimensions=None, custom_values=None):  # noqa: E501
        """Product - a model defined in Swagger"""  # noqa: E501
        self._description = None
        self._part_name = None
        self._account_id = None
        self._varians_parent_id = None
        self._name = None
        self._dimensions_id = None
        self._status_code = None
        self._deleted = None
        self._unit = None
        self._default_product_category_id = None
        self._type = None
        self._id = None
        self._vat_type_id = None
        self._calculate_gross_price_based_on_net_price = None
        self._updated_by = None
        self._image_file_id = None
        self._created_by = None
        self._product_category_links = None
        self._dimensions = None
        self._custom_values = None
        self.discriminator = None
        if description is not None:
            self.description = description
        if part_name is not None:
            self.part_name = part_name
        if account_id is not None:
            self.account_id = account_id
        if varians_parent_id is not None:
            self.varians_parent_id = varians_parent_id
        if name is not None:
            self.name = name
        if dimensions_id is not None:
            self.dimensions_id = dimensions_id
        if status_code is not None:
            self.status_code = status_code
        if deleted is not None:
            self.deleted = deleted
        if unit is not None:
            self.unit = unit
        if default_product_category_id is not None:
            self.default_product_category_id = default_product_category_id
        if type is not None:
            self.type = type
        if id is not None:
            self.id = id
        if vat_type_id is not None:
            self.vat_type_id = vat_type_id
        if calculate_gross_price_based_on_net_price is not None:
            self.calculate_gross_price_based_on_net_price = calculate_gross_price_based_on_net_price
        if updated_by is not None:
            self.updated_by = updated_by
        if image_file_id is not None:
            self.image_file_id = image_file_id
        if created_by is not None:
            self.created_by = created_by
        if product_category_links is not None:
            self.product_category_links = product_category_links
        if dimensions is not None:
            self.dimensions = dimensions
        if custom_values is not None:
            self.custom_values = custom_values

    @property
    def description(self):
        """Gets the description of this Product.  # noqa: E501


        :return: The description of this Product.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Product.


        :param description: The description of this Product.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def part_name(self):
        """Gets the part_name of this Product.  # noqa: E501


        :return: The part_name of this Product.  # noqa: E501
        :rtype: str
        """
        return self._part_name

    @part_name.setter
    def part_name(self, part_name):
        """Sets the part_name of this Product.


        :param part_name: The part_name of this Product.  # noqa: E501
        :type: str
        """

        self._part_name = part_name

    @property
    def account_id(self):
        """Gets the account_id of this Product.  # noqa: E501


        :return: The account_id of this Product.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Product.


        :param account_id: The account_id of this Product.  # noqa: E501
        :type: int
        """

        self._account_id = account_id

    @property
    def varians_parent_id(self):
        """Gets the varians_parent_id of this Product.  # noqa: E501


        :return: The varians_parent_id of this Product.  # noqa: E501
        :rtype: int
        """
        return self._varians_parent_id

    @varians_parent_id.setter
    def varians_parent_id(self, varians_parent_id):
        """Sets the varians_parent_id of this Product.


        :param varians_parent_id: The varians_parent_id of this Product.  # noqa: E501
        :type: int
        """

        self._varians_parent_id = varians_parent_id

    @property
    def name(self):
        """Gets the name of this Product.  # noqa: E501


        :return: The name of this Product.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Product.


        :param name: The name of this Product.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def dimensions_id(self):
        """Gets the dimensions_id of this Product.  # noqa: E501


        :return: The dimensions_id of this Product.  # noqa: E501
        :rtype: int
        """
        return self._dimensions_id

    @dimensions_id.setter
    def dimensions_id(self, dimensions_id):
        """Sets the dimensions_id of this Product.


        :param dimensions_id: The dimensions_id of this Product.  # noqa: E501
        :type: int
        """

        self._dimensions_id = dimensions_id

    @property
    def status_code(self):
        """Gets the status_code of this Product.  # noqa: E501


        :return: The status_code of this Product.  # noqa: E501
        :rtype: int
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this Product.


        :param status_code: The status_code of this Product.  # noqa: E501
        :type: int
        """

        self._status_code = status_code

    @property
    def deleted(self):
        """Gets the deleted of this Product.  # noqa: E501


        :return: The deleted of this Product.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this Product.


        :param deleted: The deleted of this Product.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def unit(self):
        """Gets the unit of this Product.  # noqa: E501


        :return: The unit of this Product.  # noqa: E501
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this Product.


        :param unit: The unit of this Product.  # noqa: E501
        :type: str
        """

        self._unit = unit

    @property
    def default_product_category_id(self):
        """Gets the default_product_category_id of this Product.  # noqa: E501


        :return: The default_product_category_id of this Product.  # noqa: E501
        :rtype: int
        """
        return self._default_product_category_id

    @default_product_category_id.setter
    def default_product_category_id(self, default_product_category_id):
        """Sets the default_product_category_id of this Product.


        :param default_product_category_id: The default_product_category_id of this Product.  # noqa: E501
        :type: int
        """

        self._default_product_category_id = default_product_category_id

    @property
    def type(self):
        """Gets the type of this Product.  # noqa: E501


        :return: The type of this Product.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Product.


        :param type: The type of this Product.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def id(self):
        """Gets the id of this Product.  # noqa: E501


        :return: The id of this Product.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Product.


        :param id: The id of this Product.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def vat_type_id(self):
        """Gets the vat_type_id of this Product.  # noqa: E501


        :return: The vat_type_id of this Product.  # noqa: E501
        :rtype: int
        """
        return self._vat_type_id

    @vat_type_id.setter
    def vat_type_id(self, vat_type_id):
        """Sets the vat_type_id of this Product.


        :param vat_type_id: The vat_type_id of this Product.  # noqa: E501
        :type: int
        """

        self._vat_type_id = vat_type_id

    @property
    def calculate_gross_price_based_on_net_price(self):
        """Gets the calculate_gross_price_based_on_net_price of this Product.  # noqa: E501


        :return: The calculate_gross_price_based_on_net_price of this Product.  # noqa: E501
        :rtype: bool
        """
        return self._calculate_gross_price_based_on_net_price

    @calculate_gross_price_based_on_net_price.setter
    def calculate_gross_price_based_on_net_price(self, calculate_gross_price_based_on_net_price):
        """Sets the calculate_gross_price_based_on_net_price of this Product.


        :param calculate_gross_price_based_on_net_price: The calculate_gross_price_based_on_net_price of this Product.  # noqa: E501
        :type: bool
        """

        self._calculate_gross_price_based_on_net_price = calculate_gross_price_based_on_net_price

    @property
    def updated_by(self):
        """Gets the updated_by of this Product.  # noqa: E501


        :return: The updated_by of this Product.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this Product.


        :param updated_by: The updated_by of this Product.  # noqa: E501
        :type: str
        """

        self._updated_by = updated_by

    @property
    def image_file_id(self):
        """Gets the image_file_id of this Product.  # noqa: E501


        :return: The image_file_id of this Product.  # noqa: E501
        :rtype: int
        """
        return self._image_file_id

    @image_file_id.setter
    def image_file_id(self, image_file_id):
        """Sets the image_file_id of this Product.


        :param image_file_id: The image_file_id of this Product.  # noqa: E501
        :type: int
        """

        self._image_file_id = image_file_id

    @property
    def created_by(self):
        """Gets the created_by of this Product.  # noqa: E501


        :return: The created_by of this Product.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Product.


        :param created_by: The created_by of this Product.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def product_category_links(self):
        """Gets the product_category_links of this Product.  # noqa: E501


        :return: The product_category_links of this Product.  # noqa: E501
        :rtype: list[ProductCategoryLink]
        """
        return self._product_category_links

    @product_category_links.setter
    def product_category_links(self, product_category_links):
        """Sets the product_category_links of this Product.


        :param product_category_links: The product_category_links of this Product.  # noqa: E501
        :type: list[ProductCategoryLink]
        """

        self._product_category_links = product_category_links

    @property
    def dimensions(self):
        """Gets the dimensions of this Product.  # noqa: E501


        :return: The dimensions of this Product.  # noqa: E501
        :rtype: Dimensions
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this Product.


        :param dimensions: The dimensions of this Product.  # noqa: E501
        :type: Dimensions
        """

        self._dimensions = dimensions

    @property
    def custom_values(self):
        """Gets the custom_values of this Product.  # noqa: E501


        :return: The custom_values of this Product.  # noqa: E501
        :rtype: CustomValues
        """
        return self._custom_values

    @custom_values.setter
    def custom_values(self, custom_values):
        """Sets the custom_values of this Product.


        :param custom_values: The custom_values of this Product.  # noqa: E501
        :type: CustomValues
        """

        self._custom_values = custom_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Product, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Product):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
