# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AGACalculation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dimensions_id': 'int',
        'status_code': 'int',
        'deleted': 'bool',
        'id': 'int',
        'updated_by': 'str',
        'created_by': 'str',
        'payroll_run_id': 'int',
        'free_amount_used': 'list[FreeAmountUsed]',
        'aga_tax': 'list[AGATax]',
        'aga_draw': 'list[AGADraw]',
        'aga_pension': 'list[AGAPension]',
        'foreigner_with_percent': 'list[ForeignerWithPercent]',
        'draw_foreigner_with_percent': 'list[DrawForeignerWithPercent]',
        'foreigner_with_amount': 'list[ForeignerWithAmount]',
        'payroll_run': 'PayrollRun',
        'dimensions': 'Dimensions',
        'custom_values': 'CustomValues'
    }

    attribute_map = {
        'dimensions_id': 'DimensionsID',
        'status_code': 'StatusCode',
        'deleted': 'Deleted',
        'id': 'ID',
        'updated_by': 'UpdatedBy',
        'created_by': 'CreatedBy',
        'payroll_run_id': 'PayrollRunID',
        'free_amount_used': 'freeAmountUsed',
        'aga_tax': 'agaTax',
        'aga_draw': 'agaDraw',
        'aga_pension': 'agaPension',
        'foreigner_with_percent': 'foreignerWithPercent',
        'draw_foreigner_with_percent': 'drawForeignerWithPercent',
        'foreigner_with_amount': 'foreignerWithAmount',
        'payroll_run': 'payrollRun',
        'dimensions': 'Dimensions',
        'custom_values': 'CustomValues'
    }

    def __init__(self, dimensions_id=None, status_code=None, deleted=None, id=None, updated_by=None, created_by=None, payroll_run_id=None, free_amount_used=None, aga_tax=None, aga_draw=None, aga_pension=None, foreigner_with_percent=None, draw_foreigner_with_percent=None, foreigner_with_amount=None, payroll_run=None, dimensions=None, custom_values=None):  # noqa: E501
        """AGACalculation - a model defined in Swagger"""  # noqa: E501
        self._dimensions_id = None
        self._status_code = None
        self._deleted = None
        self._id = None
        self._updated_by = None
        self._created_by = None
        self._payroll_run_id = None
        self._free_amount_used = None
        self._aga_tax = None
        self._aga_draw = None
        self._aga_pension = None
        self._foreigner_with_percent = None
        self._draw_foreigner_with_percent = None
        self._foreigner_with_amount = None
        self._payroll_run = None
        self._dimensions = None
        self._custom_values = None
        self.discriminator = None
        if dimensions_id is not None:
            self.dimensions_id = dimensions_id
        if status_code is not None:
            self.status_code = status_code
        if deleted is not None:
            self.deleted = deleted
        if id is not None:
            self.id = id
        if updated_by is not None:
            self.updated_by = updated_by
        if created_by is not None:
            self.created_by = created_by
        if payroll_run_id is not None:
            self.payroll_run_id = payroll_run_id
        if free_amount_used is not None:
            self.free_amount_used = free_amount_used
        if aga_tax is not None:
            self.aga_tax = aga_tax
        if aga_draw is not None:
            self.aga_draw = aga_draw
        if aga_pension is not None:
            self.aga_pension = aga_pension
        if foreigner_with_percent is not None:
            self.foreigner_with_percent = foreigner_with_percent
        if draw_foreigner_with_percent is not None:
            self.draw_foreigner_with_percent = draw_foreigner_with_percent
        if foreigner_with_amount is not None:
            self.foreigner_with_amount = foreigner_with_amount
        if payroll_run is not None:
            self.payroll_run = payroll_run
        if dimensions is not None:
            self.dimensions = dimensions
        if custom_values is not None:
            self.custom_values = custom_values

    @property
    def dimensions_id(self):
        """Gets the dimensions_id of this AGACalculation.  # noqa: E501


        :return: The dimensions_id of this AGACalculation.  # noqa: E501
        :rtype: int
        """
        return self._dimensions_id

    @dimensions_id.setter
    def dimensions_id(self, dimensions_id):
        """Sets the dimensions_id of this AGACalculation.


        :param dimensions_id: The dimensions_id of this AGACalculation.  # noqa: E501
        :type: int
        """

        self._dimensions_id = dimensions_id

    @property
    def status_code(self):
        """Gets the status_code of this AGACalculation.  # noqa: E501


        :return: The status_code of this AGACalculation.  # noqa: E501
        :rtype: int
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this AGACalculation.


        :param status_code: The status_code of this AGACalculation.  # noqa: E501
        :type: int
        """

        self._status_code = status_code

    @property
    def deleted(self):
        """Gets the deleted of this AGACalculation.  # noqa: E501


        :return: The deleted of this AGACalculation.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this AGACalculation.


        :param deleted: The deleted of this AGACalculation.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def id(self):
        """Gets the id of this AGACalculation.  # noqa: E501


        :return: The id of this AGACalculation.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AGACalculation.


        :param id: The id of this AGACalculation.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def updated_by(self):
        """Gets the updated_by of this AGACalculation.  # noqa: E501


        :return: The updated_by of this AGACalculation.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this AGACalculation.


        :param updated_by: The updated_by of this AGACalculation.  # noqa: E501
        :type: str
        """

        self._updated_by = updated_by

    @property
    def created_by(self):
        """Gets the created_by of this AGACalculation.  # noqa: E501


        :return: The created_by of this AGACalculation.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this AGACalculation.


        :param created_by: The created_by of this AGACalculation.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def payroll_run_id(self):
        """Gets the payroll_run_id of this AGACalculation.  # noqa: E501


        :return: The payroll_run_id of this AGACalculation.  # noqa: E501
        :rtype: int
        """
        return self._payroll_run_id

    @payroll_run_id.setter
    def payroll_run_id(self, payroll_run_id):
        """Sets the payroll_run_id of this AGACalculation.


        :param payroll_run_id: The payroll_run_id of this AGACalculation.  # noqa: E501
        :type: int
        """

        self._payroll_run_id = payroll_run_id

    @property
    def free_amount_used(self):
        """Gets the free_amount_used of this AGACalculation.  # noqa: E501


        :return: The free_amount_used of this AGACalculation.  # noqa: E501
        :rtype: list[FreeAmountUsed]
        """
        return self._free_amount_used

    @free_amount_used.setter
    def free_amount_used(self, free_amount_used):
        """Sets the free_amount_used of this AGACalculation.


        :param free_amount_used: The free_amount_used of this AGACalculation.  # noqa: E501
        :type: list[FreeAmountUsed]
        """

        self._free_amount_used = free_amount_used

    @property
    def aga_tax(self):
        """Gets the aga_tax of this AGACalculation.  # noqa: E501


        :return: The aga_tax of this AGACalculation.  # noqa: E501
        :rtype: list[AGATax]
        """
        return self._aga_tax

    @aga_tax.setter
    def aga_tax(self, aga_tax):
        """Sets the aga_tax of this AGACalculation.


        :param aga_tax: The aga_tax of this AGACalculation.  # noqa: E501
        :type: list[AGATax]
        """

        self._aga_tax = aga_tax

    @property
    def aga_draw(self):
        """Gets the aga_draw of this AGACalculation.  # noqa: E501


        :return: The aga_draw of this AGACalculation.  # noqa: E501
        :rtype: list[AGADraw]
        """
        return self._aga_draw

    @aga_draw.setter
    def aga_draw(self, aga_draw):
        """Sets the aga_draw of this AGACalculation.


        :param aga_draw: The aga_draw of this AGACalculation.  # noqa: E501
        :type: list[AGADraw]
        """

        self._aga_draw = aga_draw

    @property
    def aga_pension(self):
        """Gets the aga_pension of this AGACalculation.  # noqa: E501


        :return: The aga_pension of this AGACalculation.  # noqa: E501
        :rtype: list[AGAPension]
        """
        return self._aga_pension

    @aga_pension.setter
    def aga_pension(self, aga_pension):
        """Sets the aga_pension of this AGACalculation.


        :param aga_pension: The aga_pension of this AGACalculation.  # noqa: E501
        :type: list[AGAPension]
        """

        self._aga_pension = aga_pension

    @property
    def foreigner_with_percent(self):
        """Gets the foreigner_with_percent of this AGACalculation.  # noqa: E501


        :return: The foreigner_with_percent of this AGACalculation.  # noqa: E501
        :rtype: list[ForeignerWithPercent]
        """
        return self._foreigner_with_percent

    @foreigner_with_percent.setter
    def foreigner_with_percent(self, foreigner_with_percent):
        """Sets the foreigner_with_percent of this AGACalculation.


        :param foreigner_with_percent: The foreigner_with_percent of this AGACalculation.  # noqa: E501
        :type: list[ForeignerWithPercent]
        """

        self._foreigner_with_percent = foreigner_with_percent

    @property
    def draw_foreigner_with_percent(self):
        """Gets the draw_foreigner_with_percent of this AGACalculation.  # noqa: E501


        :return: The draw_foreigner_with_percent of this AGACalculation.  # noqa: E501
        :rtype: list[DrawForeignerWithPercent]
        """
        return self._draw_foreigner_with_percent

    @draw_foreigner_with_percent.setter
    def draw_foreigner_with_percent(self, draw_foreigner_with_percent):
        """Sets the draw_foreigner_with_percent of this AGACalculation.


        :param draw_foreigner_with_percent: The draw_foreigner_with_percent of this AGACalculation.  # noqa: E501
        :type: list[DrawForeignerWithPercent]
        """

        self._draw_foreigner_with_percent = draw_foreigner_with_percent

    @property
    def foreigner_with_amount(self):
        """Gets the foreigner_with_amount of this AGACalculation.  # noqa: E501


        :return: The foreigner_with_amount of this AGACalculation.  # noqa: E501
        :rtype: list[ForeignerWithAmount]
        """
        return self._foreigner_with_amount

    @foreigner_with_amount.setter
    def foreigner_with_amount(self, foreigner_with_amount):
        """Sets the foreigner_with_amount of this AGACalculation.


        :param foreigner_with_amount: The foreigner_with_amount of this AGACalculation.  # noqa: E501
        :type: list[ForeignerWithAmount]
        """

        self._foreigner_with_amount = foreigner_with_amount

    @property
    def payroll_run(self):
        """Gets the payroll_run of this AGACalculation.  # noqa: E501


        :return: The payroll_run of this AGACalculation.  # noqa: E501
        :rtype: PayrollRun
        """
        return self._payroll_run

    @payroll_run.setter
    def payroll_run(self, payroll_run):
        """Sets the payroll_run of this AGACalculation.


        :param payroll_run: The payroll_run of this AGACalculation.  # noqa: E501
        :type: PayrollRun
        """

        self._payroll_run = payroll_run

    @property
    def dimensions(self):
        """Gets the dimensions of this AGACalculation.  # noqa: E501


        :return: The dimensions of this AGACalculation.  # noqa: E501
        :rtype: Dimensions
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this AGACalculation.


        :param dimensions: The dimensions of this AGACalculation.  # noqa: E501
        :type: Dimensions
        """

        self._dimensions = dimensions

    @property
    def custom_values(self):
        """Gets the custom_values of this AGACalculation.  # noqa: E501


        :return: The custom_values of this AGACalculation.  # noqa: E501
        :rtype: CustomValues
        """
        return self._custom_values

    @custom_values.setter
    def custom_values(self, custom_values):
        """Sets the custom_values of this AGACalculation.


        :param custom_values: The custom_values of this AGACalculation.  # noqa: E501
        :type: CustomValues
        """

        self._custom_values = custom_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AGACalculation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AGACalculation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
