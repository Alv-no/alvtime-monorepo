# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SalaryTransactionPeriodSums(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'org_number': 'str',
        'year': 'int',
        'to_period': 'int',
        'from_period': 'int',
        'aga_zone': 'str',
        'municipal_name': 'str',
        'sums': 'SalaryTransactionSums',
        'aga': 'AGACalculation',
        'custom_values': 'CustomValues'
    }

    attribute_map = {
        'org_number': 'OrgNumber',
        'year': 'Year',
        'to_period': 'ToPeriod',
        'from_period': 'FromPeriod',
        'aga_zone': 'AgaZone',
        'municipal_name': 'MunicipalName',
        'sums': 'Sums',
        'aga': 'Aga',
        'custom_values': 'CustomValues'
    }

    def __init__(self, org_number=None, year=None, to_period=None, from_period=None, aga_zone=None, municipal_name=None, sums=None, aga=None, custom_values=None):  # noqa: E501
        """SalaryTransactionPeriodSums - a model defined in Swagger"""  # noqa: E501
        self._org_number = None
        self._year = None
        self._to_period = None
        self._from_period = None
        self._aga_zone = None
        self._municipal_name = None
        self._sums = None
        self._aga = None
        self._custom_values = None
        self.discriminator = None
        if org_number is not None:
            self.org_number = org_number
        if year is not None:
            self.year = year
        if to_period is not None:
            self.to_period = to_period
        if from_period is not None:
            self.from_period = from_period
        if aga_zone is not None:
            self.aga_zone = aga_zone
        if municipal_name is not None:
            self.municipal_name = municipal_name
        if sums is not None:
            self.sums = sums
        if aga is not None:
            self.aga = aga
        if custom_values is not None:
            self.custom_values = custom_values

    @property
    def org_number(self):
        """Gets the org_number of this SalaryTransactionPeriodSums.  # noqa: E501


        :return: The org_number of this SalaryTransactionPeriodSums.  # noqa: E501
        :rtype: str
        """
        return self._org_number

    @org_number.setter
    def org_number(self, org_number):
        """Sets the org_number of this SalaryTransactionPeriodSums.


        :param org_number: The org_number of this SalaryTransactionPeriodSums.  # noqa: E501
        :type: str
        """

        self._org_number = org_number

    @property
    def year(self):
        """Gets the year of this SalaryTransactionPeriodSums.  # noqa: E501


        :return: The year of this SalaryTransactionPeriodSums.  # noqa: E501
        :rtype: int
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this SalaryTransactionPeriodSums.


        :param year: The year of this SalaryTransactionPeriodSums.  # noqa: E501
        :type: int
        """

        self._year = year

    @property
    def to_period(self):
        """Gets the to_period of this SalaryTransactionPeriodSums.  # noqa: E501


        :return: The to_period of this SalaryTransactionPeriodSums.  # noqa: E501
        :rtype: int
        """
        return self._to_period

    @to_period.setter
    def to_period(self, to_period):
        """Sets the to_period of this SalaryTransactionPeriodSums.


        :param to_period: The to_period of this SalaryTransactionPeriodSums.  # noqa: E501
        :type: int
        """

        self._to_period = to_period

    @property
    def from_period(self):
        """Gets the from_period of this SalaryTransactionPeriodSums.  # noqa: E501


        :return: The from_period of this SalaryTransactionPeriodSums.  # noqa: E501
        :rtype: int
        """
        return self._from_period

    @from_period.setter
    def from_period(self, from_period):
        """Sets the from_period of this SalaryTransactionPeriodSums.


        :param from_period: The from_period of this SalaryTransactionPeriodSums.  # noqa: E501
        :type: int
        """

        self._from_period = from_period

    @property
    def aga_zone(self):
        """Gets the aga_zone of this SalaryTransactionPeriodSums.  # noqa: E501


        :return: The aga_zone of this SalaryTransactionPeriodSums.  # noqa: E501
        :rtype: str
        """
        return self._aga_zone

    @aga_zone.setter
    def aga_zone(self, aga_zone):
        """Sets the aga_zone of this SalaryTransactionPeriodSums.


        :param aga_zone: The aga_zone of this SalaryTransactionPeriodSums.  # noqa: E501
        :type: str
        """

        self._aga_zone = aga_zone

    @property
    def municipal_name(self):
        """Gets the municipal_name of this SalaryTransactionPeriodSums.  # noqa: E501


        :return: The municipal_name of this SalaryTransactionPeriodSums.  # noqa: E501
        :rtype: str
        """
        return self._municipal_name

    @municipal_name.setter
    def municipal_name(self, municipal_name):
        """Sets the municipal_name of this SalaryTransactionPeriodSums.


        :param municipal_name: The municipal_name of this SalaryTransactionPeriodSums.  # noqa: E501
        :type: str
        """

        self._municipal_name = municipal_name

    @property
    def sums(self):
        """Gets the sums of this SalaryTransactionPeriodSums.  # noqa: E501


        :return: The sums of this SalaryTransactionPeriodSums.  # noqa: E501
        :rtype: SalaryTransactionSums
        """
        return self._sums

    @sums.setter
    def sums(self, sums):
        """Sets the sums of this SalaryTransactionPeriodSums.


        :param sums: The sums of this SalaryTransactionPeriodSums.  # noqa: E501
        :type: SalaryTransactionSums
        """

        self._sums = sums

    @property
    def aga(self):
        """Gets the aga of this SalaryTransactionPeriodSums.  # noqa: E501


        :return: The aga of this SalaryTransactionPeriodSums.  # noqa: E501
        :rtype: AGACalculation
        """
        return self._aga

    @aga.setter
    def aga(self, aga):
        """Sets the aga of this SalaryTransactionPeriodSums.


        :param aga: The aga of this SalaryTransactionPeriodSums.  # noqa: E501
        :type: AGACalculation
        """

        self._aga = aga

    @property
    def custom_values(self):
        """Gets the custom_values of this SalaryTransactionPeriodSums.  # noqa: E501


        :return: The custom_values of this SalaryTransactionPeriodSums.  # noqa: E501
        :rtype: CustomValues
        """
        return self._custom_values

    @custom_values.setter
    def custom_values(self, custom_values):
        """Sets the custom_values of this SalaryTransactionPeriodSums.


        :param custom_values: The custom_values of this SalaryTransactionPeriodSums.  # noqa: E501
        :type: CustomValues
        """

        self._custom_values = custom_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SalaryTransactionPeriodSums, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SalaryTransactionPeriodSums):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
