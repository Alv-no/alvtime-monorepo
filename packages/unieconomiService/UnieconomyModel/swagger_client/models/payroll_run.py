# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PayrollRun(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'journal_entry_number': 'str',
        'exclude_recurring_posts': 'bool',
        'free_text': 'str',
        'status_code': 'int',
        'deleted': 'bool',
        'holiday_pay_deduction': 'bool',
        'id': 'int',
        'updated_by': 'str',
        'created_by': 'str',
        'needs_recalc': 'bool',
        'taxdrawfactor': 'str',
        'paycheck_file_id': 'int',
        'transactions': 'list[SalaryTransaction]',
        'agacalculation': 'list[AGACalculation]',
        'custom_values': 'CustomValues'
    }

    attribute_map = {
        'description': 'Description',
        'journal_entry_number': 'JournalEntryNumber',
        'exclude_recurring_posts': 'ExcludeRecurringPosts',
        'free_text': 'FreeText',
        'status_code': 'StatusCode',
        'deleted': 'Deleted',
        'holiday_pay_deduction': 'HolidayPayDeduction',
        'id': 'ID',
        'updated_by': 'UpdatedBy',
        'created_by': 'CreatedBy',
        'needs_recalc': 'needsRecalc',
        'taxdrawfactor': 'taxdrawfactor',
        'paycheck_file_id': 'PaycheckFileID',
        'transactions': 'transactions',
        'agacalculation': 'agacalculation',
        'custom_values': 'CustomValues'
    }

    def __init__(self, description=None, journal_entry_number=None, exclude_recurring_posts=None, free_text=None, status_code=None, deleted=None, holiday_pay_deduction=None, id=None, updated_by=None, created_by=None, needs_recalc=None, taxdrawfactor=None, paycheck_file_id=None, transactions=None, agacalculation=None, custom_values=None):  # noqa: E501
        """PayrollRun - a model defined in Swagger"""  # noqa: E501
        self._description = None
        self._journal_entry_number = None
        self._exclude_recurring_posts = None
        self._free_text = None
        self._status_code = None
        self._deleted = None
        self._holiday_pay_deduction = None
        self._id = None
        self._updated_by = None
        self._created_by = None
        self._needs_recalc = None
        self._taxdrawfactor = None
        self._paycheck_file_id = None
        self._transactions = None
        self._agacalculation = None
        self._custom_values = None
        self.discriminator = None
        if description is not None:
            self.description = description
        if journal_entry_number is not None:
            self.journal_entry_number = journal_entry_number
        if exclude_recurring_posts is not None:
            self.exclude_recurring_posts = exclude_recurring_posts
        if free_text is not None:
            self.free_text = free_text
        if status_code is not None:
            self.status_code = status_code
        if deleted is not None:
            self.deleted = deleted
        if holiday_pay_deduction is not None:
            self.holiday_pay_deduction = holiday_pay_deduction
        if id is not None:
            self.id = id
        if updated_by is not None:
            self.updated_by = updated_by
        if created_by is not None:
            self.created_by = created_by
        if needs_recalc is not None:
            self.needs_recalc = needs_recalc
        if taxdrawfactor is not None:
            self.taxdrawfactor = taxdrawfactor
        if paycheck_file_id is not None:
            self.paycheck_file_id = paycheck_file_id
        if transactions is not None:
            self.transactions = transactions
        if agacalculation is not None:
            self.agacalculation = agacalculation
        if custom_values is not None:
            self.custom_values = custom_values

    @property
    def description(self):
        """Gets the description of this PayrollRun.  # noqa: E501


        :return: The description of this PayrollRun.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PayrollRun.


        :param description: The description of this PayrollRun.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def journal_entry_number(self):
        """Gets the journal_entry_number of this PayrollRun.  # noqa: E501


        :return: The journal_entry_number of this PayrollRun.  # noqa: E501
        :rtype: str
        """
        return self._journal_entry_number

    @journal_entry_number.setter
    def journal_entry_number(self, journal_entry_number):
        """Sets the journal_entry_number of this PayrollRun.


        :param journal_entry_number: The journal_entry_number of this PayrollRun.  # noqa: E501
        :type: str
        """

        self._journal_entry_number = journal_entry_number

    @property
    def exclude_recurring_posts(self):
        """Gets the exclude_recurring_posts of this PayrollRun.  # noqa: E501


        :return: The exclude_recurring_posts of this PayrollRun.  # noqa: E501
        :rtype: bool
        """
        return self._exclude_recurring_posts

    @exclude_recurring_posts.setter
    def exclude_recurring_posts(self, exclude_recurring_posts):
        """Sets the exclude_recurring_posts of this PayrollRun.


        :param exclude_recurring_posts: The exclude_recurring_posts of this PayrollRun.  # noqa: E501
        :type: bool
        """

        self._exclude_recurring_posts = exclude_recurring_posts

    @property
    def free_text(self):
        """Gets the free_text of this PayrollRun.  # noqa: E501


        :return: The free_text of this PayrollRun.  # noqa: E501
        :rtype: str
        """
        return self._free_text

    @free_text.setter
    def free_text(self, free_text):
        """Sets the free_text of this PayrollRun.


        :param free_text: The free_text of this PayrollRun.  # noqa: E501
        :type: str
        """

        self._free_text = free_text

    @property
    def status_code(self):
        """Gets the status_code of this PayrollRun.  # noqa: E501


        :return: The status_code of this PayrollRun.  # noqa: E501
        :rtype: int
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this PayrollRun.


        :param status_code: The status_code of this PayrollRun.  # noqa: E501
        :type: int
        """

        self._status_code = status_code

    @property
    def deleted(self):
        """Gets the deleted of this PayrollRun.  # noqa: E501


        :return: The deleted of this PayrollRun.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this PayrollRun.


        :param deleted: The deleted of this PayrollRun.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def holiday_pay_deduction(self):
        """Gets the holiday_pay_deduction of this PayrollRun.  # noqa: E501


        :return: The holiday_pay_deduction of this PayrollRun.  # noqa: E501
        :rtype: bool
        """
        return self._holiday_pay_deduction

    @holiday_pay_deduction.setter
    def holiday_pay_deduction(self, holiday_pay_deduction):
        """Sets the holiday_pay_deduction of this PayrollRun.


        :param holiday_pay_deduction: The holiday_pay_deduction of this PayrollRun.  # noqa: E501
        :type: bool
        """

        self._holiday_pay_deduction = holiday_pay_deduction

    @property
    def id(self):
        """Gets the id of this PayrollRun.  # noqa: E501


        :return: The id of this PayrollRun.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PayrollRun.


        :param id: The id of this PayrollRun.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def updated_by(self):
        """Gets the updated_by of this PayrollRun.  # noqa: E501


        :return: The updated_by of this PayrollRun.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this PayrollRun.


        :param updated_by: The updated_by of this PayrollRun.  # noqa: E501
        :type: str
        """

        self._updated_by = updated_by

    @property
    def created_by(self):
        """Gets the created_by of this PayrollRun.  # noqa: E501


        :return: The created_by of this PayrollRun.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this PayrollRun.


        :param created_by: The created_by of this PayrollRun.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def needs_recalc(self):
        """Gets the needs_recalc of this PayrollRun.  # noqa: E501


        :return: The needs_recalc of this PayrollRun.  # noqa: E501
        :rtype: bool
        """
        return self._needs_recalc

    @needs_recalc.setter
    def needs_recalc(self, needs_recalc):
        """Sets the needs_recalc of this PayrollRun.


        :param needs_recalc: The needs_recalc of this PayrollRun.  # noqa: E501
        :type: bool
        """

        self._needs_recalc = needs_recalc

    @property
    def taxdrawfactor(self):
        """Gets the taxdrawfactor of this PayrollRun.  # noqa: E501


        :return: The taxdrawfactor of this PayrollRun.  # noqa: E501
        :rtype: str
        """
        return self._taxdrawfactor

    @taxdrawfactor.setter
    def taxdrawfactor(self, taxdrawfactor):
        """Sets the taxdrawfactor of this PayrollRun.


        :param taxdrawfactor: The taxdrawfactor of this PayrollRun.  # noqa: E501
        :type: str
        """

        self._taxdrawfactor = taxdrawfactor

    @property
    def paycheck_file_id(self):
        """Gets the paycheck_file_id of this PayrollRun.  # noqa: E501


        :return: The paycheck_file_id of this PayrollRun.  # noqa: E501
        :rtype: int
        """
        return self._paycheck_file_id

    @paycheck_file_id.setter
    def paycheck_file_id(self, paycheck_file_id):
        """Sets the paycheck_file_id of this PayrollRun.


        :param paycheck_file_id: The paycheck_file_id of this PayrollRun.  # noqa: E501
        :type: int
        """

        self._paycheck_file_id = paycheck_file_id

    @property
    def transactions(self):
        """Gets the transactions of this PayrollRun.  # noqa: E501


        :return: The transactions of this PayrollRun.  # noqa: E501
        :rtype: list[SalaryTransaction]
        """
        return self._transactions

    @transactions.setter
    def transactions(self, transactions):
        """Sets the transactions of this PayrollRun.


        :param transactions: The transactions of this PayrollRun.  # noqa: E501
        :type: list[SalaryTransaction]
        """

        self._transactions = transactions

    @property
    def agacalculation(self):
        """Gets the agacalculation of this PayrollRun.  # noqa: E501


        :return: The agacalculation of this PayrollRun.  # noqa: E501
        :rtype: list[AGACalculation]
        """
        return self._agacalculation

    @agacalculation.setter
    def agacalculation(self, agacalculation):
        """Sets the agacalculation of this PayrollRun.


        :param agacalculation: The agacalculation of this PayrollRun.  # noqa: E501
        :type: list[AGACalculation]
        """

        self._agacalculation = agacalculation

    @property
    def custom_values(self):
        """Gets the custom_values of this PayrollRun.  # noqa: E501


        :return: The custom_values of this PayrollRun.  # noqa: E501
        :rtype: CustomValues
        """
        return self._custom_values

    @custom_values.setter
    def custom_values(self, custom_values):
        """Sets the custom_values of this PayrollRun.


        :param custom_values: The custom_values of this PayrollRun.  # noqa: E501
        :type: CustomValues
        """

        self._custom_values = custom_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PayrollRun, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PayrollRun):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
