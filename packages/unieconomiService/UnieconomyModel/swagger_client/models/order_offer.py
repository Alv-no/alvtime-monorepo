# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OrderOffer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'message': 'str',
        'order_id': 'str',
        'status': 'str',
        'reasons': 'list[Reason]',
        'purchase_amount': 'AmountDetail',
        'invoice_amount': 'AmountDetail',
        'financial_cost': 'AmountDetail',
        'fee': 'AmountDetail',
        'total_cost': 'AmountDetail',
        'disbursement_amount': 'AmountDetail',
        'limits': 'Limits',
        'custom_values': 'CustomValues'
    }

    attribute_map = {
        'message': 'Message',
        'order_id': 'OrderId',
        'status': 'Status',
        'reasons': 'Reasons',
        'purchase_amount': 'PurchaseAmount',
        'invoice_amount': 'InvoiceAmount',
        'financial_cost': 'FinancialCost',
        'fee': 'Fee',
        'total_cost': 'TotalCost',
        'disbursement_amount': 'DisbursementAmount',
        'limits': 'Limits',
        'custom_values': 'CustomValues'
    }

    def __init__(self, message=None, order_id=None, status=None, reasons=None, purchase_amount=None, invoice_amount=None, financial_cost=None, fee=None, total_cost=None, disbursement_amount=None, limits=None, custom_values=None):  # noqa: E501
        """OrderOffer - a model defined in Swagger"""  # noqa: E501
        self._message = None
        self._order_id = None
        self._status = None
        self._reasons = None
        self._purchase_amount = None
        self._invoice_amount = None
        self._financial_cost = None
        self._fee = None
        self._total_cost = None
        self._disbursement_amount = None
        self._limits = None
        self._custom_values = None
        self.discriminator = None
        if message is not None:
            self.message = message
        if order_id is not None:
            self.order_id = order_id
        if status is not None:
            self.status = status
        if reasons is not None:
            self.reasons = reasons
        if purchase_amount is not None:
            self.purchase_amount = purchase_amount
        if invoice_amount is not None:
            self.invoice_amount = invoice_amount
        if financial_cost is not None:
            self.financial_cost = financial_cost
        if fee is not None:
            self.fee = fee
        if total_cost is not None:
            self.total_cost = total_cost
        if disbursement_amount is not None:
            self.disbursement_amount = disbursement_amount
        if limits is not None:
            self.limits = limits
        if custom_values is not None:
            self.custom_values = custom_values

    @property
    def message(self):
        """Gets the message of this OrderOffer.  # noqa: E501


        :return: The message of this OrderOffer.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this OrderOffer.


        :param message: The message of this OrderOffer.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def order_id(self):
        """Gets the order_id of this OrderOffer.  # noqa: E501


        :return: The order_id of this OrderOffer.  # noqa: E501
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this OrderOffer.


        :param order_id: The order_id of this OrderOffer.  # noqa: E501
        :type: str
        """

        self._order_id = order_id

    @property
    def status(self):
        """Gets the status of this OrderOffer.  # noqa: E501


        :return: The status of this OrderOffer.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this OrderOffer.


        :param status: The status of this OrderOffer.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def reasons(self):
        """Gets the reasons of this OrderOffer.  # noqa: E501


        :return: The reasons of this OrderOffer.  # noqa: E501
        :rtype: list[Reason]
        """
        return self._reasons

    @reasons.setter
    def reasons(self, reasons):
        """Sets the reasons of this OrderOffer.


        :param reasons: The reasons of this OrderOffer.  # noqa: E501
        :type: list[Reason]
        """

        self._reasons = reasons

    @property
    def purchase_amount(self):
        """Gets the purchase_amount of this OrderOffer.  # noqa: E501


        :return: The purchase_amount of this OrderOffer.  # noqa: E501
        :rtype: AmountDetail
        """
        return self._purchase_amount

    @purchase_amount.setter
    def purchase_amount(self, purchase_amount):
        """Sets the purchase_amount of this OrderOffer.


        :param purchase_amount: The purchase_amount of this OrderOffer.  # noqa: E501
        :type: AmountDetail
        """

        self._purchase_amount = purchase_amount

    @property
    def invoice_amount(self):
        """Gets the invoice_amount of this OrderOffer.  # noqa: E501


        :return: The invoice_amount of this OrderOffer.  # noqa: E501
        :rtype: AmountDetail
        """
        return self._invoice_amount

    @invoice_amount.setter
    def invoice_amount(self, invoice_amount):
        """Sets the invoice_amount of this OrderOffer.


        :param invoice_amount: The invoice_amount of this OrderOffer.  # noqa: E501
        :type: AmountDetail
        """

        self._invoice_amount = invoice_amount

    @property
    def financial_cost(self):
        """Gets the financial_cost of this OrderOffer.  # noqa: E501


        :return: The financial_cost of this OrderOffer.  # noqa: E501
        :rtype: AmountDetail
        """
        return self._financial_cost

    @financial_cost.setter
    def financial_cost(self, financial_cost):
        """Sets the financial_cost of this OrderOffer.


        :param financial_cost: The financial_cost of this OrderOffer.  # noqa: E501
        :type: AmountDetail
        """

        self._financial_cost = financial_cost

    @property
    def fee(self):
        """Gets the fee of this OrderOffer.  # noqa: E501


        :return: The fee of this OrderOffer.  # noqa: E501
        :rtype: AmountDetail
        """
        return self._fee

    @fee.setter
    def fee(self, fee):
        """Sets the fee of this OrderOffer.


        :param fee: The fee of this OrderOffer.  # noqa: E501
        :type: AmountDetail
        """

        self._fee = fee

    @property
    def total_cost(self):
        """Gets the total_cost of this OrderOffer.  # noqa: E501


        :return: The total_cost of this OrderOffer.  # noqa: E501
        :rtype: AmountDetail
        """
        return self._total_cost

    @total_cost.setter
    def total_cost(self, total_cost):
        """Sets the total_cost of this OrderOffer.


        :param total_cost: The total_cost of this OrderOffer.  # noqa: E501
        :type: AmountDetail
        """

        self._total_cost = total_cost

    @property
    def disbursement_amount(self):
        """Gets the disbursement_amount of this OrderOffer.  # noqa: E501


        :return: The disbursement_amount of this OrderOffer.  # noqa: E501
        :rtype: AmountDetail
        """
        return self._disbursement_amount

    @disbursement_amount.setter
    def disbursement_amount(self, disbursement_amount):
        """Sets the disbursement_amount of this OrderOffer.


        :param disbursement_amount: The disbursement_amount of this OrderOffer.  # noqa: E501
        :type: AmountDetail
        """

        self._disbursement_amount = disbursement_amount

    @property
    def limits(self):
        """Gets the limits of this OrderOffer.  # noqa: E501


        :return: The limits of this OrderOffer.  # noqa: E501
        :rtype: Limits
        """
        return self._limits

    @limits.setter
    def limits(self, limits):
        """Sets the limits of this OrderOffer.


        :param limits: The limits of this OrderOffer.  # noqa: E501
        :type: Limits
        """

        self._limits = limits

    @property
    def custom_values(self):
        """Gets the custom_values of this OrderOffer.  # noqa: E501


        :return: The custom_values of this OrderOffer.  # noqa: E501
        :rtype: CustomValues
        """
        return self._custom_values

    @custom_values.setter
    def custom_values(self, custom_values):
        """Sets the custom_values of this OrderOffer.


        :param custom_values: The custom_values of this OrderOffer.  # noqa: E501
        :type: CustomValues
        """

        self._custom_values = custom_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrderOffer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderOffer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
