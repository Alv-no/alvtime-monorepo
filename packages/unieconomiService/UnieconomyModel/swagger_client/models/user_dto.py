# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UserDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'email': 'str',
        'permission_handling': 'str',
        'protected': 'bool',
        'status_code': 'int',
        'deleted': 'bool',
        'phone_number': 'str',
        'is_autobank_admin': 'bool',
        'user_name': 'str',
        'id': 'int',
        'display_name': 'str',
        'updated_by': 'str',
        'global_identity': 'str',
        'created_by': 'str',
        'bank_integration_user_name': 'str',
        'has_agreed_to_import_disclaimer': 'bool',
        'license': 'UserLicenseInformation',
        'custom_values': 'CustomValues'
    }

    attribute_map = {
        'email': 'Email',
        'permission_handling': 'PermissionHandling',
        'protected': 'Protected',
        'status_code': 'StatusCode',
        'deleted': 'Deleted',
        'phone_number': 'PhoneNumber',
        'is_autobank_admin': 'IsAutobankAdmin',
        'user_name': 'UserName',
        'id': 'ID',
        'display_name': 'DisplayName',
        'updated_by': 'UpdatedBy',
        'global_identity': 'GlobalIdentity',
        'created_by': 'CreatedBy',
        'bank_integration_user_name': 'BankIntegrationUserName',
        'has_agreed_to_import_disclaimer': 'HasAgreedToImportDisclaimer',
        'license': 'License',
        'custom_values': 'CustomValues'
    }

    def __init__(self, email=None, permission_handling=None, protected=None, status_code=None, deleted=None, phone_number=None, is_autobank_admin=None, user_name=None, id=None, display_name=None, updated_by=None, global_identity=None, created_by=None, bank_integration_user_name=None, has_agreed_to_import_disclaimer=None, license=None, custom_values=None):  # noqa: E501
        """UserDto - a model defined in Swagger"""  # noqa: E501
        self._email = None
        self._permission_handling = None
        self._protected = None
        self._status_code = None
        self._deleted = None
        self._phone_number = None
        self._is_autobank_admin = None
        self._user_name = None
        self._id = None
        self._display_name = None
        self._updated_by = None
        self._global_identity = None
        self._created_by = None
        self._bank_integration_user_name = None
        self._has_agreed_to_import_disclaimer = None
        self._license = None
        self._custom_values = None
        self.discriminator = None
        if email is not None:
            self.email = email
        if permission_handling is not None:
            self.permission_handling = permission_handling
        if protected is not None:
            self.protected = protected
        if status_code is not None:
            self.status_code = status_code
        if deleted is not None:
            self.deleted = deleted
        if phone_number is not None:
            self.phone_number = phone_number
        if is_autobank_admin is not None:
            self.is_autobank_admin = is_autobank_admin
        if user_name is not None:
            self.user_name = user_name
        if id is not None:
            self.id = id
        if display_name is not None:
            self.display_name = display_name
        if updated_by is not None:
            self.updated_by = updated_by
        if global_identity is not None:
            self.global_identity = global_identity
        if created_by is not None:
            self.created_by = created_by
        if bank_integration_user_name is not None:
            self.bank_integration_user_name = bank_integration_user_name
        if has_agreed_to_import_disclaimer is not None:
            self.has_agreed_to_import_disclaimer = has_agreed_to_import_disclaimer
        if license is not None:
            self.license = license
        if custom_values is not None:
            self.custom_values = custom_values

    @property
    def email(self):
        """Gets the email of this UserDto.  # noqa: E501


        :return: The email of this UserDto.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserDto.


        :param email: The email of this UserDto.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def permission_handling(self):
        """Gets the permission_handling of this UserDto.  # noqa: E501


        :return: The permission_handling of this UserDto.  # noqa: E501
        :rtype: str
        """
        return self._permission_handling

    @permission_handling.setter
    def permission_handling(self, permission_handling):
        """Sets the permission_handling of this UserDto.


        :param permission_handling: The permission_handling of this UserDto.  # noqa: E501
        :type: str
        """

        self._permission_handling = permission_handling

    @property
    def protected(self):
        """Gets the protected of this UserDto.  # noqa: E501


        :return: The protected of this UserDto.  # noqa: E501
        :rtype: bool
        """
        return self._protected

    @protected.setter
    def protected(self, protected):
        """Sets the protected of this UserDto.


        :param protected: The protected of this UserDto.  # noqa: E501
        :type: bool
        """

        self._protected = protected

    @property
    def status_code(self):
        """Gets the status_code of this UserDto.  # noqa: E501


        :return: The status_code of this UserDto.  # noqa: E501
        :rtype: int
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this UserDto.


        :param status_code: The status_code of this UserDto.  # noqa: E501
        :type: int
        """

        self._status_code = status_code

    @property
    def deleted(self):
        """Gets the deleted of this UserDto.  # noqa: E501


        :return: The deleted of this UserDto.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this UserDto.


        :param deleted: The deleted of this UserDto.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def phone_number(self):
        """Gets the phone_number of this UserDto.  # noqa: E501


        :return: The phone_number of this UserDto.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this UserDto.


        :param phone_number: The phone_number of this UserDto.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    @property
    def is_autobank_admin(self):
        """Gets the is_autobank_admin of this UserDto.  # noqa: E501


        :return: The is_autobank_admin of this UserDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_autobank_admin

    @is_autobank_admin.setter
    def is_autobank_admin(self, is_autobank_admin):
        """Sets the is_autobank_admin of this UserDto.


        :param is_autobank_admin: The is_autobank_admin of this UserDto.  # noqa: E501
        :type: bool
        """

        self._is_autobank_admin = is_autobank_admin

    @property
    def user_name(self):
        """Gets the user_name of this UserDto.  # noqa: E501


        :return: The user_name of this UserDto.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this UserDto.


        :param user_name: The user_name of this UserDto.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def id(self):
        """Gets the id of this UserDto.  # noqa: E501


        :return: The id of this UserDto.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserDto.


        :param id: The id of this UserDto.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def display_name(self):
        """Gets the display_name of this UserDto.  # noqa: E501


        :return: The display_name of this UserDto.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this UserDto.


        :param display_name: The display_name of this UserDto.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def updated_by(self):
        """Gets the updated_by of this UserDto.  # noqa: E501


        :return: The updated_by of this UserDto.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this UserDto.


        :param updated_by: The updated_by of this UserDto.  # noqa: E501
        :type: str
        """

        self._updated_by = updated_by

    @property
    def global_identity(self):
        """Gets the global_identity of this UserDto.  # noqa: E501


        :return: The global_identity of this UserDto.  # noqa: E501
        :rtype: str
        """
        return self._global_identity

    @global_identity.setter
    def global_identity(self, global_identity):
        """Sets the global_identity of this UserDto.


        :param global_identity: The global_identity of this UserDto.  # noqa: E501
        :type: str
        """

        self._global_identity = global_identity

    @property
    def created_by(self):
        """Gets the created_by of this UserDto.  # noqa: E501


        :return: The created_by of this UserDto.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this UserDto.


        :param created_by: The created_by of this UserDto.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def bank_integration_user_name(self):
        """Gets the bank_integration_user_name of this UserDto.  # noqa: E501


        :return: The bank_integration_user_name of this UserDto.  # noqa: E501
        :rtype: str
        """
        return self._bank_integration_user_name

    @bank_integration_user_name.setter
    def bank_integration_user_name(self, bank_integration_user_name):
        """Sets the bank_integration_user_name of this UserDto.


        :param bank_integration_user_name: The bank_integration_user_name of this UserDto.  # noqa: E501
        :type: str
        """

        self._bank_integration_user_name = bank_integration_user_name

    @property
    def has_agreed_to_import_disclaimer(self):
        """Gets the has_agreed_to_import_disclaimer of this UserDto.  # noqa: E501


        :return: The has_agreed_to_import_disclaimer of this UserDto.  # noqa: E501
        :rtype: bool
        """
        return self._has_agreed_to_import_disclaimer

    @has_agreed_to_import_disclaimer.setter
    def has_agreed_to_import_disclaimer(self, has_agreed_to_import_disclaimer):
        """Sets the has_agreed_to_import_disclaimer of this UserDto.


        :param has_agreed_to_import_disclaimer: The has_agreed_to_import_disclaimer of this UserDto.  # noqa: E501
        :type: bool
        """

        self._has_agreed_to_import_disclaimer = has_agreed_to_import_disclaimer

    @property
    def license(self):
        """Gets the license of this UserDto.  # noqa: E501


        :return: The license of this UserDto.  # noqa: E501
        :rtype: UserLicenseInformation
        """
        return self._license

    @license.setter
    def license(self, license):
        """Sets the license of this UserDto.


        :param license: The license of this UserDto.  # noqa: E501
        :type: UserLicenseInformation
        """

        self._license = license

    @property
    def custom_values(self):
        """Gets the custom_values of this UserDto.  # noqa: E501


        :return: The custom_values of this UserDto.  # noqa: E501
        :rtype: CustomValues
        """
        return self._custom_values

    @custom_values.setter
    def custom_values(self, custom_values):
        """Sets the custom_values of this UserDto.


        :param custom_values: The custom_values of this UserDto.  # noqa: E501
        :type: CustomValues
        """

        self._custom_values = custom_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
