# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PaycheckEmailInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'message': 'str',
        'subject': 'str',
        'report_id': 'int',
        'group_by_wage_type': 'bool',
        'custom_values': 'CustomValues'
    }

    attribute_map = {
        'message': 'Message',
        'subject': 'Subject',
        'report_id': 'ReportID',
        'group_by_wage_type': 'GroupByWageType',
        'custom_values': 'CustomValues'
    }

    def __init__(self, message=None, subject=None, report_id=None, group_by_wage_type=None, custom_values=None):  # noqa: E501
        """PaycheckEmailInfo - a model defined in Swagger"""  # noqa: E501
        self._message = None
        self._subject = None
        self._report_id = None
        self._group_by_wage_type = None
        self._custom_values = None
        self.discriminator = None
        if message is not None:
            self.message = message
        if subject is not None:
            self.subject = subject
        if report_id is not None:
            self.report_id = report_id
        if group_by_wage_type is not None:
            self.group_by_wage_type = group_by_wage_type
        if custom_values is not None:
            self.custom_values = custom_values

    @property
    def message(self):
        """Gets the message of this PaycheckEmailInfo.  # noqa: E501


        :return: The message of this PaycheckEmailInfo.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this PaycheckEmailInfo.


        :param message: The message of this PaycheckEmailInfo.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def subject(self):
        """Gets the subject of this PaycheckEmailInfo.  # noqa: E501


        :return: The subject of this PaycheckEmailInfo.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this PaycheckEmailInfo.


        :param subject: The subject of this PaycheckEmailInfo.  # noqa: E501
        :type: str
        """

        self._subject = subject

    @property
    def report_id(self):
        """Gets the report_id of this PaycheckEmailInfo.  # noqa: E501


        :return: The report_id of this PaycheckEmailInfo.  # noqa: E501
        :rtype: int
        """
        return self._report_id

    @report_id.setter
    def report_id(self, report_id):
        """Sets the report_id of this PaycheckEmailInfo.


        :param report_id: The report_id of this PaycheckEmailInfo.  # noqa: E501
        :type: int
        """

        self._report_id = report_id

    @property
    def group_by_wage_type(self):
        """Gets the group_by_wage_type of this PaycheckEmailInfo.  # noqa: E501


        :return: The group_by_wage_type of this PaycheckEmailInfo.  # noqa: E501
        :rtype: bool
        """
        return self._group_by_wage_type

    @group_by_wage_type.setter
    def group_by_wage_type(self, group_by_wage_type):
        """Sets the group_by_wage_type of this PaycheckEmailInfo.


        :param group_by_wage_type: The group_by_wage_type of this PaycheckEmailInfo.  # noqa: E501
        :type: bool
        """

        self._group_by_wage_type = group_by_wage_type

    @property
    def custom_values(self):
        """Gets the custom_values of this PaycheckEmailInfo.  # noqa: E501


        :return: The custom_values of this PaycheckEmailInfo.  # noqa: E501
        :rtype: CustomValues
        """
        return self._custom_values

    @custom_values.setter
    def custom_values(self, custom_values):
        """Sets the custom_values of this PaycheckEmailInfo.


        :param custom_values: The custom_values of this PaycheckEmailInfo.  # noqa: E501
        :type: CustomValues
        """

        self._custom_values = custom_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PaycheckEmailInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaycheckEmailInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
