# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AccountSetup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_group_setup_id': 'int',
        'account_number': 'int',
        'saft_mapping_account_id': 'int',
        'vat_code': 'str',
        'visible': 'bool',
        'account_name': 'str',
        'deleted': 'bool',
        'plan_type': 'str',
        'id': 'int',
        'updated_by': 'str',
        'created_by': 'str',
        'expected_debit_balance': 'bool',
        'account_group': 'AccountGroupSetup',
        'saft_mapping_account': 'SaftMappingAccount',
        'custom_values': 'CustomValues'
    }

    attribute_map = {
        'account_group_setup_id': 'AccountGroupSetupID',
        'account_number': 'AccountNumber',
        'saft_mapping_account_id': 'SaftMappingAccountID',
        'vat_code': 'VatCode',
        'visible': 'Visible',
        'account_name': 'AccountName',
        'deleted': 'Deleted',
        'plan_type': 'PlanType',
        'id': 'ID',
        'updated_by': 'UpdatedBy',
        'created_by': 'CreatedBy',
        'expected_debit_balance': 'ExpectedDebitBalance',
        'account_group': 'AccountGroup',
        'saft_mapping_account': 'SaftMappingAccount',
        'custom_values': 'CustomValues'
    }

    def __init__(self, account_group_setup_id=None, account_number=None, saft_mapping_account_id=None, vat_code=None, visible=None, account_name=None, deleted=None, plan_type=None, id=None, updated_by=None, created_by=None, expected_debit_balance=None, account_group=None, saft_mapping_account=None, custom_values=None):  # noqa: E501
        """AccountSetup - a model defined in Swagger"""  # noqa: E501
        self._account_group_setup_id = None
        self._account_number = None
        self._saft_mapping_account_id = None
        self._vat_code = None
        self._visible = None
        self._account_name = None
        self._deleted = None
        self._plan_type = None
        self._id = None
        self._updated_by = None
        self._created_by = None
        self._expected_debit_balance = None
        self._account_group = None
        self._saft_mapping_account = None
        self._custom_values = None
        self.discriminator = None
        if account_group_setup_id is not None:
            self.account_group_setup_id = account_group_setup_id
        if account_number is not None:
            self.account_number = account_number
        if saft_mapping_account_id is not None:
            self.saft_mapping_account_id = saft_mapping_account_id
        if vat_code is not None:
            self.vat_code = vat_code
        if visible is not None:
            self.visible = visible
        if account_name is not None:
            self.account_name = account_name
        if deleted is not None:
            self.deleted = deleted
        if plan_type is not None:
            self.plan_type = plan_type
        if id is not None:
            self.id = id
        if updated_by is not None:
            self.updated_by = updated_by
        if created_by is not None:
            self.created_by = created_by
        if expected_debit_balance is not None:
            self.expected_debit_balance = expected_debit_balance
        if account_group is not None:
            self.account_group = account_group
        if saft_mapping_account is not None:
            self.saft_mapping_account = saft_mapping_account
        if custom_values is not None:
            self.custom_values = custom_values

    @property
    def account_group_setup_id(self):
        """Gets the account_group_setup_id of this AccountSetup.  # noqa: E501


        :return: The account_group_setup_id of this AccountSetup.  # noqa: E501
        :rtype: int
        """
        return self._account_group_setup_id

    @account_group_setup_id.setter
    def account_group_setup_id(self, account_group_setup_id):
        """Sets the account_group_setup_id of this AccountSetup.


        :param account_group_setup_id: The account_group_setup_id of this AccountSetup.  # noqa: E501
        :type: int
        """

        self._account_group_setup_id = account_group_setup_id

    @property
    def account_number(self):
        """Gets the account_number of this AccountSetup.  # noqa: E501


        :return: The account_number of this AccountSetup.  # noqa: E501
        :rtype: int
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this AccountSetup.


        :param account_number: The account_number of this AccountSetup.  # noqa: E501
        :type: int
        """

        self._account_number = account_number

    @property
    def saft_mapping_account_id(self):
        """Gets the saft_mapping_account_id of this AccountSetup.  # noqa: E501


        :return: The saft_mapping_account_id of this AccountSetup.  # noqa: E501
        :rtype: int
        """
        return self._saft_mapping_account_id

    @saft_mapping_account_id.setter
    def saft_mapping_account_id(self, saft_mapping_account_id):
        """Sets the saft_mapping_account_id of this AccountSetup.


        :param saft_mapping_account_id: The saft_mapping_account_id of this AccountSetup.  # noqa: E501
        :type: int
        """

        self._saft_mapping_account_id = saft_mapping_account_id

    @property
    def vat_code(self):
        """Gets the vat_code of this AccountSetup.  # noqa: E501


        :return: The vat_code of this AccountSetup.  # noqa: E501
        :rtype: str
        """
        return self._vat_code

    @vat_code.setter
    def vat_code(self, vat_code):
        """Sets the vat_code of this AccountSetup.


        :param vat_code: The vat_code of this AccountSetup.  # noqa: E501
        :type: str
        """

        self._vat_code = vat_code

    @property
    def visible(self):
        """Gets the visible of this AccountSetup.  # noqa: E501


        :return: The visible of this AccountSetup.  # noqa: E501
        :rtype: bool
        """
        return self._visible

    @visible.setter
    def visible(self, visible):
        """Sets the visible of this AccountSetup.


        :param visible: The visible of this AccountSetup.  # noqa: E501
        :type: bool
        """

        self._visible = visible

    @property
    def account_name(self):
        """Gets the account_name of this AccountSetup.  # noqa: E501


        :return: The account_name of this AccountSetup.  # noqa: E501
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this AccountSetup.


        :param account_name: The account_name of this AccountSetup.  # noqa: E501
        :type: str
        """

        self._account_name = account_name

    @property
    def deleted(self):
        """Gets the deleted of this AccountSetup.  # noqa: E501


        :return: The deleted of this AccountSetup.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this AccountSetup.


        :param deleted: The deleted of this AccountSetup.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def plan_type(self):
        """Gets the plan_type of this AccountSetup.  # noqa: E501


        :return: The plan_type of this AccountSetup.  # noqa: E501
        :rtype: str
        """
        return self._plan_type

    @plan_type.setter
    def plan_type(self, plan_type):
        """Sets the plan_type of this AccountSetup.


        :param plan_type: The plan_type of this AccountSetup.  # noqa: E501
        :type: str
        """

        self._plan_type = plan_type

    @property
    def id(self):
        """Gets the id of this AccountSetup.  # noqa: E501


        :return: The id of this AccountSetup.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AccountSetup.


        :param id: The id of this AccountSetup.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def updated_by(self):
        """Gets the updated_by of this AccountSetup.  # noqa: E501


        :return: The updated_by of this AccountSetup.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this AccountSetup.


        :param updated_by: The updated_by of this AccountSetup.  # noqa: E501
        :type: str
        """

        self._updated_by = updated_by

    @property
    def created_by(self):
        """Gets the created_by of this AccountSetup.  # noqa: E501


        :return: The created_by of this AccountSetup.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this AccountSetup.


        :param created_by: The created_by of this AccountSetup.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def expected_debit_balance(self):
        """Gets the expected_debit_balance of this AccountSetup.  # noqa: E501


        :return: The expected_debit_balance of this AccountSetup.  # noqa: E501
        :rtype: bool
        """
        return self._expected_debit_balance

    @expected_debit_balance.setter
    def expected_debit_balance(self, expected_debit_balance):
        """Sets the expected_debit_balance of this AccountSetup.


        :param expected_debit_balance: The expected_debit_balance of this AccountSetup.  # noqa: E501
        :type: bool
        """

        self._expected_debit_balance = expected_debit_balance

    @property
    def account_group(self):
        """Gets the account_group of this AccountSetup.  # noqa: E501


        :return: The account_group of this AccountSetup.  # noqa: E501
        :rtype: AccountGroupSetup
        """
        return self._account_group

    @account_group.setter
    def account_group(self, account_group):
        """Sets the account_group of this AccountSetup.


        :param account_group: The account_group of this AccountSetup.  # noqa: E501
        :type: AccountGroupSetup
        """

        self._account_group = account_group

    @property
    def saft_mapping_account(self):
        """Gets the saft_mapping_account of this AccountSetup.  # noqa: E501


        :return: The saft_mapping_account of this AccountSetup.  # noqa: E501
        :rtype: SaftMappingAccount
        """
        return self._saft_mapping_account

    @saft_mapping_account.setter
    def saft_mapping_account(self, saft_mapping_account):
        """Sets the saft_mapping_account of this AccountSetup.


        :param saft_mapping_account: The saft_mapping_account of this AccountSetup.  # noqa: E501
        :type: SaftMappingAccount
        """

        self._saft_mapping_account = saft_mapping_account

    @property
    def custom_values(self):
        """Gets the custom_values of this AccountSetup.  # noqa: E501


        :return: The custom_values of this AccountSetup.  # noqa: E501
        :rtype: CustomValues
        """
        return self._custom_values

    @custom_values.setter
    def custom_values(self, custom_values):
        """Sets the custom_values of this AccountSetup.


        :param custom_values: The custom_values of this AccountSetup.  # noqa: E501
        :type: CustomValues
        """

        self._custom_values = custom_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountSetup, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountSetup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
