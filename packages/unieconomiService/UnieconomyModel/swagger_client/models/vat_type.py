# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class VatType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'output_vat': 'bool',
        'locked': 'bool',
        'vat_code': 'str',
        'visible': 'bool',
        'name': 'str',
        'status_code': 'int',
        'deleted': 'bool',
        'alias': 'str',
        'direct_journal_entry_only': 'bool',
        'vat_code_grouping_value': 'str',
        'vat_type_setup_id': 'int',
        'id': 'int',
        'reversed_tax_duty_vat': 'bool',
        'updated_by': 'str',
        'incoming_account_id': 'int',
        'created_by': 'str',
        'vat_code_group_id': 'int',
        'outgoing_account_id': 'int',
        'available_in_modules': 'bool',
        'in_use': 'bool',
        'incoming_account': 'Account',
        'outgoing_account': 'Account',
        'vat_code_group': 'VatCodeGroup',
        'vat_report_references': 'list[VatReportReference]',
        'vat_type_percentages': 'list[VatTypePercentage]',
        'custom_values': 'CustomValues'
    }

    attribute_map = {
        'output_vat': 'OutputVat',
        'locked': 'Locked',
        'vat_code': 'VatCode',
        'visible': 'Visible',
        'name': 'Name',
        'status_code': 'StatusCode',
        'deleted': 'Deleted',
        'alias': 'Alias',
        'direct_journal_entry_only': 'DirectJournalEntryOnly',
        'vat_code_grouping_value': 'VatCodeGroupingValue',
        'vat_type_setup_id': 'VatTypeSetupID',
        'id': 'ID',
        'reversed_tax_duty_vat': 'ReversedTaxDutyVat',
        'updated_by': 'UpdatedBy',
        'incoming_account_id': 'IncomingAccountID',
        'created_by': 'CreatedBy',
        'vat_code_group_id': 'VatCodeGroupID',
        'outgoing_account_id': 'OutgoingAccountID',
        'available_in_modules': 'AvailableInModules',
        'in_use': 'InUse',
        'incoming_account': 'IncomingAccount',
        'outgoing_account': 'OutgoingAccount',
        'vat_code_group': 'VatCodeGroup',
        'vat_report_references': 'VatReportReferences',
        'vat_type_percentages': 'VatTypePercentages',
        'custom_values': 'CustomValues'
    }

    def __init__(self, output_vat=None, locked=None, vat_code=None, visible=None, name=None, status_code=None, deleted=None, alias=None, direct_journal_entry_only=None, vat_code_grouping_value=None, vat_type_setup_id=None, id=None, reversed_tax_duty_vat=None, updated_by=None, incoming_account_id=None, created_by=None, vat_code_group_id=None, outgoing_account_id=None, available_in_modules=None, in_use=None, incoming_account=None, outgoing_account=None, vat_code_group=None, vat_report_references=None, vat_type_percentages=None, custom_values=None):  # noqa: E501
        """VatType - a model defined in Swagger"""  # noqa: E501
        self._output_vat = None
        self._locked = None
        self._vat_code = None
        self._visible = None
        self._name = None
        self._status_code = None
        self._deleted = None
        self._alias = None
        self._direct_journal_entry_only = None
        self._vat_code_grouping_value = None
        self._vat_type_setup_id = None
        self._id = None
        self._reversed_tax_duty_vat = None
        self._updated_by = None
        self._incoming_account_id = None
        self._created_by = None
        self._vat_code_group_id = None
        self._outgoing_account_id = None
        self._available_in_modules = None
        self._in_use = None
        self._incoming_account = None
        self._outgoing_account = None
        self._vat_code_group = None
        self._vat_report_references = None
        self._vat_type_percentages = None
        self._custom_values = None
        self.discriminator = None
        if output_vat is not None:
            self.output_vat = output_vat
        if locked is not None:
            self.locked = locked
        if vat_code is not None:
            self.vat_code = vat_code
        if visible is not None:
            self.visible = visible
        if name is not None:
            self.name = name
        if status_code is not None:
            self.status_code = status_code
        if deleted is not None:
            self.deleted = deleted
        if alias is not None:
            self.alias = alias
        if direct_journal_entry_only is not None:
            self.direct_journal_entry_only = direct_journal_entry_only
        if vat_code_grouping_value is not None:
            self.vat_code_grouping_value = vat_code_grouping_value
        if vat_type_setup_id is not None:
            self.vat_type_setup_id = vat_type_setup_id
        if id is not None:
            self.id = id
        if reversed_tax_duty_vat is not None:
            self.reversed_tax_duty_vat = reversed_tax_duty_vat
        if updated_by is not None:
            self.updated_by = updated_by
        if incoming_account_id is not None:
            self.incoming_account_id = incoming_account_id
        if created_by is not None:
            self.created_by = created_by
        if vat_code_group_id is not None:
            self.vat_code_group_id = vat_code_group_id
        if outgoing_account_id is not None:
            self.outgoing_account_id = outgoing_account_id
        if available_in_modules is not None:
            self.available_in_modules = available_in_modules
        if in_use is not None:
            self.in_use = in_use
        if incoming_account is not None:
            self.incoming_account = incoming_account
        if outgoing_account is not None:
            self.outgoing_account = outgoing_account
        if vat_code_group is not None:
            self.vat_code_group = vat_code_group
        if vat_report_references is not None:
            self.vat_report_references = vat_report_references
        if vat_type_percentages is not None:
            self.vat_type_percentages = vat_type_percentages
        if custom_values is not None:
            self.custom_values = custom_values

    @property
    def output_vat(self):
        """Gets the output_vat of this VatType.  # noqa: E501


        :return: The output_vat of this VatType.  # noqa: E501
        :rtype: bool
        """
        return self._output_vat

    @output_vat.setter
    def output_vat(self, output_vat):
        """Sets the output_vat of this VatType.


        :param output_vat: The output_vat of this VatType.  # noqa: E501
        :type: bool
        """

        self._output_vat = output_vat

    @property
    def locked(self):
        """Gets the locked of this VatType.  # noqa: E501


        :return: The locked of this VatType.  # noqa: E501
        :rtype: bool
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """Sets the locked of this VatType.


        :param locked: The locked of this VatType.  # noqa: E501
        :type: bool
        """

        self._locked = locked

    @property
    def vat_code(self):
        """Gets the vat_code of this VatType.  # noqa: E501


        :return: The vat_code of this VatType.  # noqa: E501
        :rtype: str
        """
        return self._vat_code

    @vat_code.setter
    def vat_code(self, vat_code):
        """Sets the vat_code of this VatType.


        :param vat_code: The vat_code of this VatType.  # noqa: E501
        :type: str
        """

        self._vat_code = vat_code

    @property
    def visible(self):
        """Gets the visible of this VatType.  # noqa: E501


        :return: The visible of this VatType.  # noqa: E501
        :rtype: bool
        """
        return self._visible

    @visible.setter
    def visible(self, visible):
        """Sets the visible of this VatType.


        :param visible: The visible of this VatType.  # noqa: E501
        :type: bool
        """

        self._visible = visible

    @property
    def name(self):
        """Gets the name of this VatType.  # noqa: E501


        :return: The name of this VatType.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VatType.


        :param name: The name of this VatType.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def status_code(self):
        """Gets the status_code of this VatType.  # noqa: E501


        :return: The status_code of this VatType.  # noqa: E501
        :rtype: int
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this VatType.


        :param status_code: The status_code of this VatType.  # noqa: E501
        :type: int
        """

        self._status_code = status_code

    @property
    def deleted(self):
        """Gets the deleted of this VatType.  # noqa: E501


        :return: The deleted of this VatType.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this VatType.


        :param deleted: The deleted of this VatType.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def alias(self):
        """Gets the alias of this VatType.  # noqa: E501


        :return: The alias of this VatType.  # noqa: E501
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this VatType.


        :param alias: The alias of this VatType.  # noqa: E501
        :type: str
        """

        self._alias = alias

    @property
    def direct_journal_entry_only(self):
        """Gets the direct_journal_entry_only of this VatType.  # noqa: E501


        :return: The direct_journal_entry_only of this VatType.  # noqa: E501
        :rtype: bool
        """
        return self._direct_journal_entry_only

    @direct_journal_entry_only.setter
    def direct_journal_entry_only(self, direct_journal_entry_only):
        """Sets the direct_journal_entry_only of this VatType.


        :param direct_journal_entry_only: The direct_journal_entry_only of this VatType.  # noqa: E501
        :type: bool
        """

        self._direct_journal_entry_only = direct_journal_entry_only

    @property
    def vat_code_grouping_value(self):
        """Gets the vat_code_grouping_value of this VatType.  # noqa: E501


        :return: The vat_code_grouping_value of this VatType.  # noqa: E501
        :rtype: str
        """
        return self._vat_code_grouping_value

    @vat_code_grouping_value.setter
    def vat_code_grouping_value(self, vat_code_grouping_value):
        """Sets the vat_code_grouping_value of this VatType.


        :param vat_code_grouping_value: The vat_code_grouping_value of this VatType.  # noqa: E501
        :type: str
        """

        self._vat_code_grouping_value = vat_code_grouping_value

    @property
    def vat_type_setup_id(self):
        """Gets the vat_type_setup_id of this VatType.  # noqa: E501


        :return: The vat_type_setup_id of this VatType.  # noqa: E501
        :rtype: int
        """
        return self._vat_type_setup_id

    @vat_type_setup_id.setter
    def vat_type_setup_id(self, vat_type_setup_id):
        """Sets the vat_type_setup_id of this VatType.


        :param vat_type_setup_id: The vat_type_setup_id of this VatType.  # noqa: E501
        :type: int
        """

        self._vat_type_setup_id = vat_type_setup_id

    @property
    def id(self):
        """Gets the id of this VatType.  # noqa: E501


        :return: The id of this VatType.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VatType.


        :param id: The id of this VatType.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def reversed_tax_duty_vat(self):
        """Gets the reversed_tax_duty_vat of this VatType.  # noqa: E501


        :return: The reversed_tax_duty_vat of this VatType.  # noqa: E501
        :rtype: bool
        """
        return self._reversed_tax_duty_vat

    @reversed_tax_duty_vat.setter
    def reversed_tax_duty_vat(self, reversed_tax_duty_vat):
        """Sets the reversed_tax_duty_vat of this VatType.


        :param reversed_tax_duty_vat: The reversed_tax_duty_vat of this VatType.  # noqa: E501
        :type: bool
        """

        self._reversed_tax_duty_vat = reversed_tax_duty_vat

    @property
    def updated_by(self):
        """Gets the updated_by of this VatType.  # noqa: E501


        :return: The updated_by of this VatType.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this VatType.


        :param updated_by: The updated_by of this VatType.  # noqa: E501
        :type: str
        """

        self._updated_by = updated_by

    @property
    def incoming_account_id(self):
        """Gets the incoming_account_id of this VatType.  # noqa: E501


        :return: The incoming_account_id of this VatType.  # noqa: E501
        :rtype: int
        """
        return self._incoming_account_id

    @incoming_account_id.setter
    def incoming_account_id(self, incoming_account_id):
        """Sets the incoming_account_id of this VatType.


        :param incoming_account_id: The incoming_account_id of this VatType.  # noqa: E501
        :type: int
        """

        self._incoming_account_id = incoming_account_id

    @property
    def created_by(self):
        """Gets the created_by of this VatType.  # noqa: E501


        :return: The created_by of this VatType.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this VatType.


        :param created_by: The created_by of this VatType.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def vat_code_group_id(self):
        """Gets the vat_code_group_id of this VatType.  # noqa: E501


        :return: The vat_code_group_id of this VatType.  # noqa: E501
        :rtype: int
        """
        return self._vat_code_group_id

    @vat_code_group_id.setter
    def vat_code_group_id(self, vat_code_group_id):
        """Sets the vat_code_group_id of this VatType.


        :param vat_code_group_id: The vat_code_group_id of this VatType.  # noqa: E501
        :type: int
        """

        self._vat_code_group_id = vat_code_group_id

    @property
    def outgoing_account_id(self):
        """Gets the outgoing_account_id of this VatType.  # noqa: E501


        :return: The outgoing_account_id of this VatType.  # noqa: E501
        :rtype: int
        """
        return self._outgoing_account_id

    @outgoing_account_id.setter
    def outgoing_account_id(self, outgoing_account_id):
        """Sets the outgoing_account_id of this VatType.


        :param outgoing_account_id: The outgoing_account_id of this VatType.  # noqa: E501
        :type: int
        """

        self._outgoing_account_id = outgoing_account_id

    @property
    def available_in_modules(self):
        """Gets the available_in_modules of this VatType.  # noqa: E501


        :return: The available_in_modules of this VatType.  # noqa: E501
        :rtype: bool
        """
        return self._available_in_modules

    @available_in_modules.setter
    def available_in_modules(self, available_in_modules):
        """Sets the available_in_modules of this VatType.


        :param available_in_modules: The available_in_modules of this VatType.  # noqa: E501
        :type: bool
        """

        self._available_in_modules = available_in_modules

    @property
    def in_use(self):
        """Gets the in_use of this VatType.  # noqa: E501


        :return: The in_use of this VatType.  # noqa: E501
        :rtype: bool
        """
        return self._in_use

    @in_use.setter
    def in_use(self, in_use):
        """Sets the in_use of this VatType.


        :param in_use: The in_use of this VatType.  # noqa: E501
        :type: bool
        """

        self._in_use = in_use

    @property
    def incoming_account(self):
        """Gets the incoming_account of this VatType.  # noqa: E501


        :return: The incoming_account of this VatType.  # noqa: E501
        :rtype: Account
        """
        return self._incoming_account

    @incoming_account.setter
    def incoming_account(self, incoming_account):
        """Sets the incoming_account of this VatType.


        :param incoming_account: The incoming_account of this VatType.  # noqa: E501
        :type: Account
        """

        self._incoming_account = incoming_account

    @property
    def outgoing_account(self):
        """Gets the outgoing_account of this VatType.  # noqa: E501


        :return: The outgoing_account of this VatType.  # noqa: E501
        :rtype: Account
        """
        return self._outgoing_account

    @outgoing_account.setter
    def outgoing_account(self, outgoing_account):
        """Sets the outgoing_account of this VatType.


        :param outgoing_account: The outgoing_account of this VatType.  # noqa: E501
        :type: Account
        """

        self._outgoing_account = outgoing_account

    @property
    def vat_code_group(self):
        """Gets the vat_code_group of this VatType.  # noqa: E501


        :return: The vat_code_group of this VatType.  # noqa: E501
        :rtype: VatCodeGroup
        """
        return self._vat_code_group

    @vat_code_group.setter
    def vat_code_group(self, vat_code_group):
        """Sets the vat_code_group of this VatType.


        :param vat_code_group: The vat_code_group of this VatType.  # noqa: E501
        :type: VatCodeGroup
        """

        self._vat_code_group = vat_code_group

    @property
    def vat_report_references(self):
        """Gets the vat_report_references of this VatType.  # noqa: E501


        :return: The vat_report_references of this VatType.  # noqa: E501
        :rtype: list[VatReportReference]
        """
        return self._vat_report_references

    @vat_report_references.setter
    def vat_report_references(self, vat_report_references):
        """Sets the vat_report_references of this VatType.


        :param vat_report_references: The vat_report_references of this VatType.  # noqa: E501
        :type: list[VatReportReference]
        """

        self._vat_report_references = vat_report_references

    @property
    def vat_type_percentages(self):
        """Gets the vat_type_percentages of this VatType.  # noqa: E501


        :return: The vat_type_percentages of this VatType.  # noqa: E501
        :rtype: list[VatTypePercentage]
        """
        return self._vat_type_percentages

    @vat_type_percentages.setter
    def vat_type_percentages(self, vat_type_percentages):
        """Sets the vat_type_percentages of this VatType.


        :param vat_type_percentages: The vat_type_percentages of this VatType.  # noqa: E501
        :type: list[VatTypePercentage]
        """

        self._vat_type_percentages = vat_type_percentages

    @property
    def custom_values(self):
        """Gets the custom_values of this VatType.  # noqa: E501


        :return: The custom_values of this VatType.  # noqa: E501
        :rtype: CustomValues
        """
        return self._custom_values

    @custom_values.setter
    def custom_values(self, custom_values):
        """Sets the custom_values of this VatType.


        :param custom_values: The custom_values of this VatType.  # noqa: E501
        :type: CustomValues
        """

        self._custom_values = custom_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VatType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VatType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
