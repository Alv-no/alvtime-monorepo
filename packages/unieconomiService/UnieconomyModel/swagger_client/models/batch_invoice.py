# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BatchInvoice(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'free_txt': 'str',
        'number_of_batches': 'int',
        'notify_email': 'bool',
        'total_to_process': 'int',
        'status_code': 'int',
        'deleted': 'bool',
        'seller_id': 'int',
        'processed': 'int',
        'your_ref': 'str',
        'id': 'int',
        'updated_by': 'str',
        'operation': 'str',
        'created_by': 'str',
        'comment': 'str',
        'our_ref': 'str',
        'items': 'list[BatchInvoiceItem]',
        'custom_values': 'CustomValues'
    }

    attribute_map = {
        'free_txt': 'FreeTxt',
        'number_of_batches': 'NumberOfBatches',
        'notify_email': 'NotifyEmail',
        'total_to_process': 'TotalToProcess',
        'status_code': 'StatusCode',
        'deleted': 'Deleted',
        'seller_id': 'SellerID',
        'processed': 'Processed',
        'your_ref': 'YourRef',
        'id': 'ID',
        'updated_by': 'UpdatedBy',
        'operation': 'Operation',
        'created_by': 'CreatedBy',
        'comment': 'Comment',
        'our_ref': 'OurRef',
        'items': 'Items',
        'custom_values': 'CustomValues'
    }

    def __init__(self, free_txt=None, number_of_batches=None, notify_email=None, total_to_process=None, status_code=None, deleted=None, seller_id=None, processed=None, your_ref=None, id=None, updated_by=None, operation=None, created_by=None, comment=None, our_ref=None, items=None, custom_values=None):  # noqa: E501
        """BatchInvoice - a model defined in Swagger"""  # noqa: E501
        self._free_txt = None
        self._number_of_batches = None
        self._notify_email = None
        self._total_to_process = None
        self._status_code = None
        self._deleted = None
        self._seller_id = None
        self._processed = None
        self._your_ref = None
        self._id = None
        self._updated_by = None
        self._operation = None
        self._created_by = None
        self._comment = None
        self._our_ref = None
        self._items = None
        self._custom_values = None
        self.discriminator = None
        if free_txt is not None:
            self.free_txt = free_txt
        if number_of_batches is not None:
            self.number_of_batches = number_of_batches
        if notify_email is not None:
            self.notify_email = notify_email
        if total_to_process is not None:
            self.total_to_process = total_to_process
        if status_code is not None:
            self.status_code = status_code
        if deleted is not None:
            self.deleted = deleted
        if seller_id is not None:
            self.seller_id = seller_id
        if processed is not None:
            self.processed = processed
        if your_ref is not None:
            self.your_ref = your_ref
        if id is not None:
            self.id = id
        if updated_by is not None:
            self.updated_by = updated_by
        if operation is not None:
            self.operation = operation
        if created_by is not None:
            self.created_by = created_by
        if comment is not None:
            self.comment = comment
        if our_ref is not None:
            self.our_ref = our_ref
        if items is not None:
            self.items = items
        if custom_values is not None:
            self.custom_values = custom_values

    @property
    def free_txt(self):
        """Gets the free_txt of this BatchInvoice.  # noqa: E501


        :return: The free_txt of this BatchInvoice.  # noqa: E501
        :rtype: str
        """
        return self._free_txt

    @free_txt.setter
    def free_txt(self, free_txt):
        """Sets the free_txt of this BatchInvoice.


        :param free_txt: The free_txt of this BatchInvoice.  # noqa: E501
        :type: str
        """

        self._free_txt = free_txt

    @property
    def number_of_batches(self):
        """Gets the number_of_batches of this BatchInvoice.  # noqa: E501


        :return: The number_of_batches of this BatchInvoice.  # noqa: E501
        :rtype: int
        """
        return self._number_of_batches

    @number_of_batches.setter
    def number_of_batches(self, number_of_batches):
        """Sets the number_of_batches of this BatchInvoice.


        :param number_of_batches: The number_of_batches of this BatchInvoice.  # noqa: E501
        :type: int
        """

        self._number_of_batches = number_of_batches

    @property
    def notify_email(self):
        """Gets the notify_email of this BatchInvoice.  # noqa: E501


        :return: The notify_email of this BatchInvoice.  # noqa: E501
        :rtype: bool
        """
        return self._notify_email

    @notify_email.setter
    def notify_email(self, notify_email):
        """Sets the notify_email of this BatchInvoice.


        :param notify_email: The notify_email of this BatchInvoice.  # noqa: E501
        :type: bool
        """

        self._notify_email = notify_email

    @property
    def total_to_process(self):
        """Gets the total_to_process of this BatchInvoice.  # noqa: E501


        :return: The total_to_process of this BatchInvoice.  # noqa: E501
        :rtype: int
        """
        return self._total_to_process

    @total_to_process.setter
    def total_to_process(self, total_to_process):
        """Sets the total_to_process of this BatchInvoice.


        :param total_to_process: The total_to_process of this BatchInvoice.  # noqa: E501
        :type: int
        """

        self._total_to_process = total_to_process

    @property
    def status_code(self):
        """Gets the status_code of this BatchInvoice.  # noqa: E501


        :return: The status_code of this BatchInvoice.  # noqa: E501
        :rtype: int
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this BatchInvoice.


        :param status_code: The status_code of this BatchInvoice.  # noqa: E501
        :type: int
        """

        self._status_code = status_code

    @property
    def deleted(self):
        """Gets the deleted of this BatchInvoice.  # noqa: E501


        :return: The deleted of this BatchInvoice.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this BatchInvoice.


        :param deleted: The deleted of this BatchInvoice.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def seller_id(self):
        """Gets the seller_id of this BatchInvoice.  # noqa: E501


        :return: The seller_id of this BatchInvoice.  # noqa: E501
        :rtype: int
        """
        return self._seller_id

    @seller_id.setter
    def seller_id(self, seller_id):
        """Sets the seller_id of this BatchInvoice.


        :param seller_id: The seller_id of this BatchInvoice.  # noqa: E501
        :type: int
        """

        self._seller_id = seller_id

    @property
    def processed(self):
        """Gets the processed of this BatchInvoice.  # noqa: E501


        :return: The processed of this BatchInvoice.  # noqa: E501
        :rtype: int
        """
        return self._processed

    @processed.setter
    def processed(self, processed):
        """Sets the processed of this BatchInvoice.


        :param processed: The processed of this BatchInvoice.  # noqa: E501
        :type: int
        """

        self._processed = processed

    @property
    def your_ref(self):
        """Gets the your_ref of this BatchInvoice.  # noqa: E501


        :return: The your_ref of this BatchInvoice.  # noqa: E501
        :rtype: str
        """
        return self._your_ref

    @your_ref.setter
    def your_ref(self, your_ref):
        """Sets the your_ref of this BatchInvoice.


        :param your_ref: The your_ref of this BatchInvoice.  # noqa: E501
        :type: str
        """

        self._your_ref = your_ref

    @property
    def id(self):
        """Gets the id of this BatchInvoice.  # noqa: E501


        :return: The id of this BatchInvoice.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BatchInvoice.


        :param id: The id of this BatchInvoice.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def updated_by(self):
        """Gets the updated_by of this BatchInvoice.  # noqa: E501


        :return: The updated_by of this BatchInvoice.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this BatchInvoice.


        :param updated_by: The updated_by of this BatchInvoice.  # noqa: E501
        :type: str
        """

        self._updated_by = updated_by

    @property
    def operation(self):
        """Gets the operation of this BatchInvoice.  # noqa: E501


        :return: The operation of this BatchInvoice.  # noqa: E501
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this BatchInvoice.


        :param operation: The operation of this BatchInvoice.  # noqa: E501
        :type: str
        """

        self._operation = operation

    @property
    def created_by(self):
        """Gets the created_by of this BatchInvoice.  # noqa: E501


        :return: The created_by of this BatchInvoice.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this BatchInvoice.


        :param created_by: The created_by of this BatchInvoice.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def comment(self):
        """Gets the comment of this BatchInvoice.  # noqa: E501


        :return: The comment of this BatchInvoice.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this BatchInvoice.


        :param comment: The comment of this BatchInvoice.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def our_ref(self):
        """Gets the our_ref of this BatchInvoice.  # noqa: E501


        :return: The our_ref of this BatchInvoice.  # noqa: E501
        :rtype: str
        """
        return self._our_ref

    @our_ref.setter
    def our_ref(self, our_ref):
        """Sets the our_ref of this BatchInvoice.


        :param our_ref: The our_ref of this BatchInvoice.  # noqa: E501
        :type: str
        """

        self._our_ref = our_ref

    @property
    def items(self):
        """Gets the items of this BatchInvoice.  # noqa: E501


        :return: The items of this BatchInvoice.  # noqa: E501
        :rtype: list[BatchInvoiceItem]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this BatchInvoice.


        :param items: The items of this BatchInvoice.  # noqa: E501
        :type: list[BatchInvoiceItem]
        """

        self._items = items

    @property
    def custom_values(self):
        """Gets the custom_values of this BatchInvoice.  # noqa: E501


        :return: The custom_values of this BatchInvoice.  # noqa: E501
        :rtype: CustomValues
        """
        return self._custom_values

    @custom_values.setter
    def custom_values(self, custom_values):
        """Sets the custom_values of this BatchInvoice.


        :param custom_values: The custom_values of this BatchInvoice.  # noqa: E501
        :type: CustomValues
        """

        self._custom_values = custom_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BatchInvoice, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BatchInvoice):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
