# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Paycheck(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'employee': 'Employee',
        'payroll': 'PayrollRun',
        'transactions': 'list[SalaryTransaction]',
        'sum_on_pay': 'SumOnRun',
        'sum_on_year': 'SumOnYear',
        'sum_vacation_last_year': 'VacationPayLastYear',
        'custom_values': 'CustomValues'
    }

    attribute_map = {
        'employee': 'employee',
        'payroll': 'payroll',
        'transactions': 'transactions',
        'sum_on_pay': 'sumOnPay',
        'sum_on_year': 'sumOnYear',
        'sum_vacation_last_year': 'sumVacationLastYear',
        'custom_values': 'CustomValues'
    }

    def __init__(self, employee=None, payroll=None, transactions=None, sum_on_pay=None, sum_on_year=None, sum_vacation_last_year=None, custom_values=None):  # noqa: E501
        """Paycheck - a model defined in Swagger"""  # noqa: E501
        self._employee = None
        self._payroll = None
        self._transactions = None
        self._sum_on_pay = None
        self._sum_on_year = None
        self._sum_vacation_last_year = None
        self._custom_values = None
        self.discriminator = None
        if employee is not None:
            self.employee = employee
        if payroll is not None:
            self.payroll = payroll
        if transactions is not None:
            self.transactions = transactions
        if sum_on_pay is not None:
            self.sum_on_pay = sum_on_pay
        if sum_on_year is not None:
            self.sum_on_year = sum_on_year
        if sum_vacation_last_year is not None:
            self.sum_vacation_last_year = sum_vacation_last_year
        if custom_values is not None:
            self.custom_values = custom_values

    @property
    def employee(self):
        """Gets the employee of this Paycheck.  # noqa: E501


        :return: The employee of this Paycheck.  # noqa: E501
        :rtype: Employee
        """
        return self._employee

    @employee.setter
    def employee(self, employee):
        """Sets the employee of this Paycheck.


        :param employee: The employee of this Paycheck.  # noqa: E501
        :type: Employee
        """

        self._employee = employee

    @property
    def payroll(self):
        """Gets the payroll of this Paycheck.  # noqa: E501


        :return: The payroll of this Paycheck.  # noqa: E501
        :rtype: PayrollRun
        """
        return self._payroll

    @payroll.setter
    def payroll(self, payroll):
        """Sets the payroll of this Paycheck.


        :param payroll: The payroll of this Paycheck.  # noqa: E501
        :type: PayrollRun
        """

        self._payroll = payroll

    @property
    def transactions(self):
        """Gets the transactions of this Paycheck.  # noqa: E501


        :return: The transactions of this Paycheck.  # noqa: E501
        :rtype: list[SalaryTransaction]
        """
        return self._transactions

    @transactions.setter
    def transactions(self, transactions):
        """Sets the transactions of this Paycheck.


        :param transactions: The transactions of this Paycheck.  # noqa: E501
        :type: list[SalaryTransaction]
        """

        self._transactions = transactions

    @property
    def sum_on_pay(self):
        """Gets the sum_on_pay of this Paycheck.  # noqa: E501


        :return: The sum_on_pay of this Paycheck.  # noqa: E501
        :rtype: SumOnRun
        """
        return self._sum_on_pay

    @sum_on_pay.setter
    def sum_on_pay(self, sum_on_pay):
        """Sets the sum_on_pay of this Paycheck.


        :param sum_on_pay: The sum_on_pay of this Paycheck.  # noqa: E501
        :type: SumOnRun
        """

        self._sum_on_pay = sum_on_pay

    @property
    def sum_on_year(self):
        """Gets the sum_on_year of this Paycheck.  # noqa: E501


        :return: The sum_on_year of this Paycheck.  # noqa: E501
        :rtype: SumOnYear
        """
        return self._sum_on_year

    @sum_on_year.setter
    def sum_on_year(self, sum_on_year):
        """Sets the sum_on_year of this Paycheck.


        :param sum_on_year: The sum_on_year of this Paycheck.  # noqa: E501
        :type: SumOnYear
        """

        self._sum_on_year = sum_on_year

    @property
    def sum_vacation_last_year(self):
        """Gets the sum_vacation_last_year of this Paycheck.  # noqa: E501


        :return: The sum_vacation_last_year of this Paycheck.  # noqa: E501
        :rtype: VacationPayLastYear
        """
        return self._sum_vacation_last_year

    @sum_vacation_last_year.setter
    def sum_vacation_last_year(self, sum_vacation_last_year):
        """Sets the sum_vacation_last_year of this Paycheck.


        :param sum_vacation_last_year: The sum_vacation_last_year of this Paycheck.  # noqa: E501
        :type: VacationPayLastYear
        """

        self._sum_vacation_last_year = sum_vacation_last_year

    @property
    def custom_values(self):
        """Gets the custom_values of this Paycheck.  # noqa: E501


        :return: The custom_values of this Paycheck.  # noqa: E501
        :rtype: CustomValues
        """
        return self._custom_values

    @custom_values.setter
    def custom_values(self, custom_values):
        """Sets the custom_values of this Paycheck.


        :param custom_values: The custom_values of this Paycheck.  # noqa: E501
        :type: CustomValues
        """

        self._custom_values = custom_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Paycheck, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Paycheck):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
