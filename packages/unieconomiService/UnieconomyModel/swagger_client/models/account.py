# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Account(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_setup_id': 'int',
        'customer_id': 'int',
        'do_synchronize': 'bool',
        'account_number': 'int',
        'locked': 'bool',
        'use_vat_deduction_group_id': 'int',
        'saft_mapping_account_id': 'int',
        'description': 'str',
        'cost_allocation_id': 'int',
        'account_id': 'int',
        'visible': 'bool',
        'active': 'bool',
        'account_name': 'str',
        'dimensions_id': 'int',
        'status_code': 'int',
        'deleted': 'bool',
        'lock_manual_posts': 'bool',
        'system_account': 'bool',
        'id': 'int',
        'vat_type_id': 'int',
        'use_post_post': 'bool',
        'account_group_id': 'int',
        'currency_code_id': 'int',
        'updated_by': 'str',
        'top_level_account_group_id': 'int',
        'created_by': 'str',
        'supplier_id': 'int',
        'employee_id': 'int',
        'keywords': 'str',
        'account_group': 'AccountGroup',
        'top_level_account_group': 'AccountGroup',
        'vat_type': 'VatType',
        'main_account': 'Account',
        'customer': 'Customer',
        'supplier': 'Supplier',
        'employee': 'Employee',
        'dimensions': 'Dimensions',
        'alias': 'list[AccountAlias]',
        'mandatory_dimensions': 'list[AccountMandatoryDimension]',
        'compatible_account_groups': 'list[AccountGroup]',
        'sub_accounts': 'list[Account]',
        'cost_allocation': 'CostAllocation',
        'custom_values': 'CustomValues'
    }

    attribute_map = {
        'account_setup_id': 'AccountSetupID',
        'customer_id': 'CustomerID',
        'do_synchronize': 'DoSynchronize',
        'account_number': 'AccountNumber',
        'locked': 'Locked',
        'use_vat_deduction_group_id': 'UseVatDeductionGroupID',
        'saft_mapping_account_id': 'SaftMappingAccountID',
        'description': 'Description',
        'cost_allocation_id': 'CostAllocationID',
        'account_id': 'AccountID',
        'visible': 'Visible',
        'active': 'Active',
        'account_name': 'AccountName',
        'dimensions_id': 'DimensionsID',
        'status_code': 'StatusCode',
        'deleted': 'Deleted',
        'lock_manual_posts': 'LockManualPosts',
        'system_account': 'SystemAccount',
        'id': 'ID',
        'vat_type_id': 'VatTypeID',
        'use_post_post': 'UsePostPost',
        'account_group_id': 'AccountGroupID',
        'currency_code_id': 'CurrencyCodeID',
        'updated_by': 'UpdatedBy',
        'top_level_account_group_id': 'TopLevelAccountGroupID',
        'created_by': 'CreatedBy',
        'supplier_id': 'SupplierID',
        'employee_id': 'EmployeeID',
        'keywords': 'Keywords',
        'account_group': 'AccountGroup',
        'top_level_account_group': 'TopLevelAccountGroup',
        'vat_type': 'VatType',
        'main_account': 'MainAccount',
        'customer': 'Customer',
        'supplier': 'Supplier',
        'employee': 'Employee',
        'dimensions': 'Dimensions',
        'alias': 'Alias',
        'mandatory_dimensions': 'MandatoryDimensions',
        'compatible_account_groups': 'CompatibleAccountGroups',
        'sub_accounts': 'SubAccounts',
        'cost_allocation': 'CostAllocation',
        'custom_values': 'CustomValues'
    }

    def __init__(self, account_setup_id=None, customer_id=None, do_synchronize=None, account_number=None, locked=None, use_vat_deduction_group_id=None, saft_mapping_account_id=None, description=None, cost_allocation_id=None, account_id=None, visible=None, active=None, account_name=None, dimensions_id=None, status_code=None, deleted=None, lock_manual_posts=None, system_account=None, id=None, vat_type_id=None, use_post_post=None, account_group_id=None, currency_code_id=None, updated_by=None, top_level_account_group_id=None, created_by=None, supplier_id=None, employee_id=None, keywords=None, account_group=None, top_level_account_group=None, vat_type=None, main_account=None, customer=None, supplier=None, employee=None, dimensions=None, alias=None, mandatory_dimensions=None, compatible_account_groups=None, sub_accounts=None, cost_allocation=None, custom_values=None):  # noqa: E501
        """Account - a model defined in Swagger"""  # noqa: E501
        self._account_setup_id = None
        self._customer_id = None
        self._do_synchronize = None
        self._account_number = None
        self._locked = None
        self._use_vat_deduction_group_id = None
        self._saft_mapping_account_id = None
        self._description = None
        self._cost_allocation_id = None
        self._account_id = None
        self._visible = None
        self._active = None
        self._account_name = None
        self._dimensions_id = None
        self._status_code = None
        self._deleted = None
        self._lock_manual_posts = None
        self._system_account = None
        self._id = None
        self._vat_type_id = None
        self._use_post_post = None
        self._account_group_id = None
        self._currency_code_id = None
        self._updated_by = None
        self._top_level_account_group_id = None
        self._created_by = None
        self._supplier_id = None
        self._employee_id = None
        self._keywords = None
        self._account_group = None
        self._top_level_account_group = None
        self._vat_type = None
        self._main_account = None
        self._customer = None
        self._supplier = None
        self._employee = None
        self._dimensions = None
        self._alias = None
        self._mandatory_dimensions = None
        self._compatible_account_groups = None
        self._sub_accounts = None
        self._cost_allocation = None
        self._custom_values = None
        self.discriminator = None
        if account_setup_id is not None:
            self.account_setup_id = account_setup_id
        if customer_id is not None:
            self.customer_id = customer_id
        if do_synchronize is not None:
            self.do_synchronize = do_synchronize
        if account_number is not None:
            self.account_number = account_number
        if locked is not None:
            self.locked = locked
        if use_vat_deduction_group_id is not None:
            self.use_vat_deduction_group_id = use_vat_deduction_group_id
        if saft_mapping_account_id is not None:
            self.saft_mapping_account_id = saft_mapping_account_id
        if description is not None:
            self.description = description
        if cost_allocation_id is not None:
            self.cost_allocation_id = cost_allocation_id
        if account_id is not None:
            self.account_id = account_id
        if visible is not None:
            self.visible = visible
        if active is not None:
            self.active = active
        if account_name is not None:
            self.account_name = account_name
        if dimensions_id is not None:
            self.dimensions_id = dimensions_id
        if status_code is not None:
            self.status_code = status_code
        if deleted is not None:
            self.deleted = deleted
        if lock_manual_posts is not None:
            self.lock_manual_posts = lock_manual_posts
        if system_account is not None:
            self.system_account = system_account
        if id is not None:
            self.id = id
        if vat_type_id is not None:
            self.vat_type_id = vat_type_id
        if use_post_post is not None:
            self.use_post_post = use_post_post
        if account_group_id is not None:
            self.account_group_id = account_group_id
        if currency_code_id is not None:
            self.currency_code_id = currency_code_id
        if updated_by is not None:
            self.updated_by = updated_by
        if top_level_account_group_id is not None:
            self.top_level_account_group_id = top_level_account_group_id
        if created_by is not None:
            self.created_by = created_by
        if supplier_id is not None:
            self.supplier_id = supplier_id
        if employee_id is not None:
            self.employee_id = employee_id
        if keywords is not None:
            self.keywords = keywords
        if account_group is not None:
            self.account_group = account_group
        if top_level_account_group is not None:
            self.top_level_account_group = top_level_account_group
        if vat_type is not None:
            self.vat_type = vat_type
        if main_account is not None:
            self.main_account = main_account
        if customer is not None:
            self.customer = customer
        if supplier is not None:
            self.supplier = supplier
        if employee is not None:
            self.employee = employee
        if dimensions is not None:
            self.dimensions = dimensions
        if alias is not None:
            self.alias = alias
        if mandatory_dimensions is not None:
            self.mandatory_dimensions = mandatory_dimensions
        if compatible_account_groups is not None:
            self.compatible_account_groups = compatible_account_groups
        if sub_accounts is not None:
            self.sub_accounts = sub_accounts
        if cost_allocation is not None:
            self.cost_allocation = cost_allocation
        if custom_values is not None:
            self.custom_values = custom_values

    @property
    def account_setup_id(self):
        """Gets the account_setup_id of this Account.  # noqa: E501


        :return: The account_setup_id of this Account.  # noqa: E501
        :rtype: int
        """
        return self._account_setup_id

    @account_setup_id.setter
    def account_setup_id(self, account_setup_id):
        """Sets the account_setup_id of this Account.


        :param account_setup_id: The account_setup_id of this Account.  # noqa: E501
        :type: int
        """

        self._account_setup_id = account_setup_id

    @property
    def customer_id(self):
        """Gets the customer_id of this Account.  # noqa: E501


        :return: The customer_id of this Account.  # noqa: E501
        :rtype: int
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this Account.


        :param customer_id: The customer_id of this Account.  # noqa: E501
        :type: int
        """

        self._customer_id = customer_id

    @property
    def do_synchronize(self):
        """Gets the do_synchronize of this Account.  # noqa: E501


        :return: The do_synchronize of this Account.  # noqa: E501
        :rtype: bool
        """
        return self._do_synchronize

    @do_synchronize.setter
    def do_synchronize(self, do_synchronize):
        """Sets the do_synchronize of this Account.


        :param do_synchronize: The do_synchronize of this Account.  # noqa: E501
        :type: bool
        """

        self._do_synchronize = do_synchronize

    @property
    def account_number(self):
        """Gets the account_number of this Account.  # noqa: E501


        :return: The account_number of this Account.  # noqa: E501
        :rtype: int
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this Account.


        :param account_number: The account_number of this Account.  # noqa: E501
        :type: int
        """

        self._account_number = account_number

    @property
    def locked(self):
        """Gets the locked of this Account.  # noqa: E501


        :return: The locked of this Account.  # noqa: E501
        :rtype: bool
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """Sets the locked of this Account.


        :param locked: The locked of this Account.  # noqa: E501
        :type: bool
        """

        self._locked = locked

    @property
    def use_vat_deduction_group_id(self):
        """Gets the use_vat_deduction_group_id of this Account.  # noqa: E501


        :return: The use_vat_deduction_group_id of this Account.  # noqa: E501
        :rtype: int
        """
        return self._use_vat_deduction_group_id

    @use_vat_deduction_group_id.setter
    def use_vat_deduction_group_id(self, use_vat_deduction_group_id):
        """Sets the use_vat_deduction_group_id of this Account.


        :param use_vat_deduction_group_id: The use_vat_deduction_group_id of this Account.  # noqa: E501
        :type: int
        """

        self._use_vat_deduction_group_id = use_vat_deduction_group_id

    @property
    def saft_mapping_account_id(self):
        """Gets the saft_mapping_account_id of this Account.  # noqa: E501


        :return: The saft_mapping_account_id of this Account.  # noqa: E501
        :rtype: int
        """
        return self._saft_mapping_account_id

    @saft_mapping_account_id.setter
    def saft_mapping_account_id(self, saft_mapping_account_id):
        """Sets the saft_mapping_account_id of this Account.


        :param saft_mapping_account_id: The saft_mapping_account_id of this Account.  # noqa: E501
        :type: int
        """

        self._saft_mapping_account_id = saft_mapping_account_id

    @property
    def description(self):
        """Gets the description of this Account.  # noqa: E501


        :return: The description of this Account.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Account.


        :param description: The description of this Account.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def cost_allocation_id(self):
        """Gets the cost_allocation_id of this Account.  # noqa: E501


        :return: The cost_allocation_id of this Account.  # noqa: E501
        :rtype: int
        """
        return self._cost_allocation_id

    @cost_allocation_id.setter
    def cost_allocation_id(self, cost_allocation_id):
        """Sets the cost_allocation_id of this Account.


        :param cost_allocation_id: The cost_allocation_id of this Account.  # noqa: E501
        :type: int
        """

        self._cost_allocation_id = cost_allocation_id

    @property
    def account_id(self):
        """Gets the account_id of this Account.  # noqa: E501


        :return: The account_id of this Account.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Account.


        :param account_id: The account_id of this Account.  # noqa: E501
        :type: int
        """

        self._account_id = account_id

    @property
    def visible(self):
        """Gets the visible of this Account.  # noqa: E501


        :return: The visible of this Account.  # noqa: E501
        :rtype: bool
        """
        return self._visible

    @visible.setter
    def visible(self, visible):
        """Sets the visible of this Account.


        :param visible: The visible of this Account.  # noqa: E501
        :type: bool
        """

        self._visible = visible

    @property
    def active(self):
        """Gets the active of this Account.  # noqa: E501


        :return: The active of this Account.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Account.


        :param active: The active of this Account.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def account_name(self):
        """Gets the account_name of this Account.  # noqa: E501


        :return: The account_name of this Account.  # noqa: E501
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this Account.


        :param account_name: The account_name of this Account.  # noqa: E501
        :type: str
        """

        self._account_name = account_name

    @property
    def dimensions_id(self):
        """Gets the dimensions_id of this Account.  # noqa: E501


        :return: The dimensions_id of this Account.  # noqa: E501
        :rtype: int
        """
        return self._dimensions_id

    @dimensions_id.setter
    def dimensions_id(self, dimensions_id):
        """Sets the dimensions_id of this Account.


        :param dimensions_id: The dimensions_id of this Account.  # noqa: E501
        :type: int
        """

        self._dimensions_id = dimensions_id

    @property
    def status_code(self):
        """Gets the status_code of this Account.  # noqa: E501


        :return: The status_code of this Account.  # noqa: E501
        :rtype: int
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this Account.


        :param status_code: The status_code of this Account.  # noqa: E501
        :type: int
        """

        self._status_code = status_code

    @property
    def deleted(self):
        """Gets the deleted of this Account.  # noqa: E501


        :return: The deleted of this Account.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this Account.


        :param deleted: The deleted of this Account.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def lock_manual_posts(self):
        """Gets the lock_manual_posts of this Account.  # noqa: E501


        :return: The lock_manual_posts of this Account.  # noqa: E501
        :rtype: bool
        """
        return self._lock_manual_posts

    @lock_manual_posts.setter
    def lock_manual_posts(self, lock_manual_posts):
        """Sets the lock_manual_posts of this Account.


        :param lock_manual_posts: The lock_manual_posts of this Account.  # noqa: E501
        :type: bool
        """

        self._lock_manual_posts = lock_manual_posts

    @property
    def system_account(self):
        """Gets the system_account of this Account.  # noqa: E501


        :return: The system_account of this Account.  # noqa: E501
        :rtype: bool
        """
        return self._system_account

    @system_account.setter
    def system_account(self, system_account):
        """Sets the system_account of this Account.


        :param system_account: The system_account of this Account.  # noqa: E501
        :type: bool
        """

        self._system_account = system_account

    @property
    def id(self):
        """Gets the id of this Account.  # noqa: E501


        :return: The id of this Account.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Account.


        :param id: The id of this Account.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def vat_type_id(self):
        """Gets the vat_type_id of this Account.  # noqa: E501


        :return: The vat_type_id of this Account.  # noqa: E501
        :rtype: int
        """
        return self._vat_type_id

    @vat_type_id.setter
    def vat_type_id(self, vat_type_id):
        """Sets the vat_type_id of this Account.


        :param vat_type_id: The vat_type_id of this Account.  # noqa: E501
        :type: int
        """

        self._vat_type_id = vat_type_id

    @property
    def use_post_post(self):
        """Gets the use_post_post of this Account.  # noqa: E501


        :return: The use_post_post of this Account.  # noqa: E501
        :rtype: bool
        """
        return self._use_post_post

    @use_post_post.setter
    def use_post_post(self, use_post_post):
        """Sets the use_post_post of this Account.


        :param use_post_post: The use_post_post of this Account.  # noqa: E501
        :type: bool
        """

        self._use_post_post = use_post_post

    @property
    def account_group_id(self):
        """Gets the account_group_id of this Account.  # noqa: E501


        :return: The account_group_id of this Account.  # noqa: E501
        :rtype: int
        """
        return self._account_group_id

    @account_group_id.setter
    def account_group_id(self, account_group_id):
        """Sets the account_group_id of this Account.


        :param account_group_id: The account_group_id of this Account.  # noqa: E501
        :type: int
        """

        self._account_group_id = account_group_id

    @property
    def currency_code_id(self):
        """Gets the currency_code_id of this Account.  # noqa: E501


        :return: The currency_code_id of this Account.  # noqa: E501
        :rtype: int
        """
        return self._currency_code_id

    @currency_code_id.setter
    def currency_code_id(self, currency_code_id):
        """Sets the currency_code_id of this Account.


        :param currency_code_id: The currency_code_id of this Account.  # noqa: E501
        :type: int
        """

        self._currency_code_id = currency_code_id

    @property
    def updated_by(self):
        """Gets the updated_by of this Account.  # noqa: E501


        :return: The updated_by of this Account.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this Account.


        :param updated_by: The updated_by of this Account.  # noqa: E501
        :type: str
        """

        self._updated_by = updated_by

    @property
    def top_level_account_group_id(self):
        """Gets the top_level_account_group_id of this Account.  # noqa: E501


        :return: The top_level_account_group_id of this Account.  # noqa: E501
        :rtype: int
        """
        return self._top_level_account_group_id

    @top_level_account_group_id.setter
    def top_level_account_group_id(self, top_level_account_group_id):
        """Sets the top_level_account_group_id of this Account.


        :param top_level_account_group_id: The top_level_account_group_id of this Account.  # noqa: E501
        :type: int
        """

        self._top_level_account_group_id = top_level_account_group_id

    @property
    def created_by(self):
        """Gets the created_by of this Account.  # noqa: E501


        :return: The created_by of this Account.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Account.


        :param created_by: The created_by of this Account.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def supplier_id(self):
        """Gets the supplier_id of this Account.  # noqa: E501


        :return: The supplier_id of this Account.  # noqa: E501
        :rtype: int
        """
        return self._supplier_id

    @supplier_id.setter
    def supplier_id(self, supplier_id):
        """Sets the supplier_id of this Account.


        :param supplier_id: The supplier_id of this Account.  # noqa: E501
        :type: int
        """

        self._supplier_id = supplier_id

    @property
    def employee_id(self):
        """Gets the employee_id of this Account.  # noqa: E501


        :return: The employee_id of this Account.  # noqa: E501
        :rtype: int
        """
        return self._employee_id

    @employee_id.setter
    def employee_id(self, employee_id):
        """Sets the employee_id of this Account.


        :param employee_id: The employee_id of this Account.  # noqa: E501
        :type: int
        """

        self._employee_id = employee_id

    @property
    def keywords(self):
        """Gets the keywords of this Account.  # noqa: E501


        :return: The keywords of this Account.  # noqa: E501
        :rtype: str
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this Account.


        :param keywords: The keywords of this Account.  # noqa: E501
        :type: str
        """

        self._keywords = keywords

    @property
    def account_group(self):
        """Gets the account_group of this Account.  # noqa: E501


        :return: The account_group of this Account.  # noqa: E501
        :rtype: AccountGroup
        """
        return self._account_group

    @account_group.setter
    def account_group(self, account_group):
        """Sets the account_group of this Account.


        :param account_group: The account_group of this Account.  # noqa: E501
        :type: AccountGroup
        """

        self._account_group = account_group

    @property
    def top_level_account_group(self):
        """Gets the top_level_account_group of this Account.  # noqa: E501


        :return: The top_level_account_group of this Account.  # noqa: E501
        :rtype: AccountGroup
        """
        return self._top_level_account_group

    @top_level_account_group.setter
    def top_level_account_group(self, top_level_account_group):
        """Sets the top_level_account_group of this Account.


        :param top_level_account_group: The top_level_account_group of this Account.  # noqa: E501
        :type: AccountGroup
        """

        self._top_level_account_group = top_level_account_group

    @property
    def vat_type(self):
        """Gets the vat_type of this Account.  # noqa: E501


        :return: The vat_type of this Account.  # noqa: E501
        :rtype: VatType
        """
        return self._vat_type

    @vat_type.setter
    def vat_type(self, vat_type):
        """Sets the vat_type of this Account.


        :param vat_type: The vat_type of this Account.  # noqa: E501
        :type: VatType
        """

        self._vat_type = vat_type

    @property
    def main_account(self):
        """Gets the main_account of this Account.  # noqa: E501


        :return: The main_account of this Account.  # noqa: E501
        :rtype: Account
        """
        return self._main_account

    @main_account.setter
    def main_account(self, main_account):
        """Sets the main_account of this Account.


        :param main_account: The main_account of this Account.  # noqa: E501
        :type: Account
        """

        self._main_account = main_account

    @property
    def customer(self):
        """Gets the customer of this Account.  # noqa: E501


        :return: The customer of this Account.  # noqa: E501
        :rtype: Customer
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """Sets the customer of this Account.


        :param customer: The customer of this Account.  # noqa: E501
        :type: Customer
        """

        self._customer = customer

    @property
    def supplier(self):
        """Gets the supplier of this Account.  # noqa: E501


        :return: The supplier of this Account.  # noqa: E501
        :rtype: Supplier
        """
        return self._supplier

    @supplier.setter
    def supplier(self, supplier):
        """Sets the supplier of this Account.


        :param supplier: The supplier of this Account.  # noqa: E501
        :type: Supplier
        """

        self._supplier = supplier

    @property
    def employee(self):
        """Gets the employee of this Account.  # noqa: E501


        :return: The employee of this Account.  # noqa: E501
        :rtype: Employee
        """
        return self._employee

    @employee.setter
    def employee(self, employee):
        """Sets the employee of this Account.


        :param employee: The employee of this Account.  # noqa: E501
        :type: Employee
        """

        self._employee = employee

    @property
    def dimensions(self):
        """Gets the dimensions of this Account.  # noqa: E501


        :return: The dimensions of this Account.  # noqa: E501
        :rtype: Dimensions
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this Account.


        :param dimensions: The dimensions of this Account.  # noqa: E501
        :type: Dimensions
        """

        self._dimensions = dimensions

    @property
    def alias(self):
        """Gets the alias of this Account.  # noqa: E501


        :return: The alias of this Account.  # noqa: E501
        :rtype: list[AccountAlias]
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this Account.


        :param alias: The alias of this Account.  # noqa: E501
        :type: list[AccountAlias]
        """

        self._alias = alias

    @property
    def mandatory_dimensions(self):
        """Gets the mandatory_dimensions of this Account.  # noqa: E501


        :return: The mandatory_dimensions of this Account.  # noqa: E501
        :rtype: list[AccountMandatoryDimension]
        """
        return self._mandatory_dimensions

    @mandatory_dimensions.setter
    def mandatory_dimensions(self, mandatory_dimensions):
        """Sets the mandatory_dimensions of this Account.


        :param mandatory_dimensions: The mandatory_dimensions of this Account.  # noqa: E501
        :type: list[AccountMandatoryDimension]
        """

        self._mandatory_dimensions = mandatory_dimensions

    @property
    def compatible_account_groups(self):
        """Gets the compatible_account_groups of this Account.  # noqa: E501


        :return: The compatible_account_groups of this Account.  # noqa: E501
        :rtype: list[AccountGroup]
        """
        return self._compatible_account_groups

    @compatible_account_groups.setter
    def compatible_account_groups(self, compatible_account_groups):
        """Sets the compatible_account_groups of this Account.


        :param compatible_account_groups: The compatible_account_groups of this Account.  # noqa: E501
        :type: list[AccountGroup]
        """

        self._compatible_account_groups = compatible_account_groups

    @property
    def sub_accounts(self):
        """Gets the sub_accounts of this Account.  # noqa: E501


        :return: The sub_accounts of this Account.  # noqa: E501
        :rtype: list[Account]
        """
        return self._sub_accounts

    @sub_accounts.setter
    def sub_accounts(self, sub_accounts):
        """Sets the sub_accounts of this Account.


        :param sub_accounts: The sub_accounts of this Account.  # noqa: E501
        :type: list[Account]
        """

        self._sub_accounts = sub_accounts

    @property
    def cost_allocation(self):
        """Gets the cost_allocation of this Account.  # noqa: E501


        :return: The cost_allocation of this Account.  # noqa: E501
        :rtype: CostAllocation
        """
        return self._cost_allocation

    @cost_allocation.setter
    def cost_allocation(self, cost_allocation):
        """Sets the cost_allocation of this Account.


        :param cost_allocation: The cost_allocation of this Account.  # noqa: E501
        :type: CostAllocation
        """

        self._cost_allocation = cost_allocation

    @property
    def custom_values(self):
        """Gets the custom_values of this Account.  # noqa: E501


        :return: The custom_values of this Account.  # noqa: E501
        :rtype: CustomValues
        """
        return self._custom_values

    @custom_values.setter
    def custom_values(self, custom_values):
        """Sets the custom_values of this Account.


        :param custom_values: The custom_values of this Account.  # noqa: E501
        :type: CustomValues
        """

        self._custom_values = custom_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Account, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Account):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
