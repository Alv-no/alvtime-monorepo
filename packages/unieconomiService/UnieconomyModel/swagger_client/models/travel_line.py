# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TravelLine(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_number': 'int',
        'travel_id': 'int',
        'description': 'str',
        'line_state': 'str',
        'invoice_account': 'int',
        'dimensions_id': 'int',
        'status_code': 'int',
        'deleted': 'bool',
        'id': 'int',
        'vat_type_id': 'int',
        'paytrans_id': 'int',
        'updated_by': 'str',
        'created_by': 'str',
        'type_id': 'int',
        'travel_identificator': 'str',
        'cost_type': 'str',
        'travel': 'Travel',
        'vat_type': 'VatType',
        'travel_type': 'TravelType',
        'custom_values': 'CustomValues'
    }

    attribute_map = {
        'account_number': 'AccountNumber',
        'travel_id': 'TravelID',
        'description': 'Description',
        'line_state': 'LineState',
        'invoice_account': 'InvoiceAccount',
        'dimensions_id': 'DimensionsID',
        'status_code': 'StatusCode',
        'deleted': 'Deleted',
        'id': 'ID',
        'vat_type_id': 'VatTypeID',
        'paytrans_id': 'paytransID',
        'updated_by': 'UpdatedBy',
        'created_by': 'CreatedBy',
        'type_id': 'TypeID',
        'travel_identificator': 'TravelIdentificator',
        'cost_type': 'CostType',
        'travel': 'Travel',
        'vat_type': 'VatType',
        'travel_type': 'travelType',
        'custom_values': 'CustomValues'
    }

    def __init__(self, account_number=None, travel_id=None, description=None, line_state=None, invoice_account=None, dimensions_id=None, status_code=None, deleted=None, id=None, vat_type_id=None, paytrans_id=None, updated_by=None, created_by=None, type_id=None, travel_identificator=None, cost_type=None, travel=None, vat_type=None, travel_type=None, custom_values=None):  # noqa: E501
        """TravelLine - a model defined in Swagger"""  # noqa: E501
        self._account_number = None
        self._travel_id = None
        self._description = None
        self._line_state = None
        self._invoice_account = None
        self._dimensions_id = None
        self._status_code = None
        self._deleted = None
        self._id = None
        self._vat_type_id = None
        self._paytrans_id = None
        self._updated_by = None
        self._created_by = None
        self._type_id = None
        self._travel_identificator = None
        self._cost_type = None
        self._travel = None
        self._vat_type = None
        self._travel_type = None
        self._custom_values = None
        self.discriminator = None
        if account_number is not None:
            self.account_number = account_number
        if travel_id is not None:
            self.travel_id = travel_id
        if description is not None:
            self.description = description
        if line_state is not None:
            self.line_state = line_state
        if invoice_account is not None:
            self.invoice_account = invoice_account
        if dimensions_id is not None:
            self.dimensions_id = dimensions_id
        if status_code is not None:
            self.status_code = status_code
        if deleted is not None:
            self.deleted = deleted
        if id is not None:
            self.id = id
        if vat_type_id is not None:
            self.vat_type_id = vat_type_id
        if paytrans_id is not None:
            self.paytrans_id = paytrans_id
        if updated_by is not None:
            self.updated_by = updated_by
        if created_by is not None:
            self.created_by = created_by
        if type_id is not None:
            self.type_id = type_id
        if travel_identificator is not None:
            self.travel_identificator = travel_identificator
        if cost_type is not None:
            self.cost_type = cost_type
        if travel is not None:
            self.travel = travel
        if vat_type is not None:
            self.vat_type = vat_type
        if travel_type is not None:
            self.travel_type = travel_type
        if custom_values is not None:
            self.custom_values = custom_values

    @property
    def account_number(self):
        """Gets the account_number of this TravelLine.  # noqa: E501


        :return: The account_number of this TravelLine.  # noqa: E501
        :rtype: int
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this TravelLine.


        :param account_number: The account_number of this TravelLine.  # noqa: E501
        :type: int
        """

        self._account_number = account_number

    @property
    def travel_id(self):
        """Gets the travel_id of this TravelLine.  # noqa: E501


        :return: The travel_id of this TravelLine.  # noqa: E501
        :rtype: int
        """
        return self._travel_id

    @travel_id.setter
    def travel_id(self, travel_id):
        """Sets the travel_id of this TravelLine.


        :param travel_id: The travel_id of this TravelLine.  # noqa: E501
        :type: int
        """

        self._travel_id = travel_id

    @property
    def description(self):
        """Gets the description of this TravelLine.  # noqa: E501


        :return: The description of this TravelLine.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TravelLine.


        :param description: The description of this TravelLine.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def line_state(self):
        """Gets the line_state of this TravelLine.  # noqa: E501


        :return: The line_state of this TravelLine.  # noqa: E501
        :rtype: str
        """
        return self._line_state

    @line_state.setter
    def line_state(self, line_state):
        """Sets the line_state of this TravelLine.


        :param line_state: The line_state of this TravelLine.  # noqa: E501
        :type: str
        """

        self._line_state = line_state

    @property
    def invoice_account(self):
        """Gets the invoice_account of this TravelLine.  # noqa: E501


        :return: The invoice_account of this TravelLine.  # noqa: E501
        :rtype: int
        """
        return self._invoice_account

    @invoice_account.setter
    def invoice_account(self, invoice_account):
        """Sets the invoice_account of this TravelLine.


        :param invoice_account: The invoice_account of this TravelLine.  # noqa: E501
        :type: int
        """

        self._invoice_account = invoice_account

    @property
    def dimensions_id(self):
        """Gets the dimensions_id of this TravelLine.  # noqa: E501


        :return: The dimensions_id of this TravelLine.  # noqa: E501
        :rtype: int
        """
        return self._dimensions_id

    @dimensions_id.setter
    def dimensions_id(self, dimensions_id):
        """Sets the dimensions_id of this TravelLine.


        :param dimensions_id: The dimensions_id of this TravelLine.  # noqa: E501
        :type: int
        """

        self._dimensions_id = dimensions_id

    @property
    def status_code(self):
        """Gets the status_code of this TravelLine.  # noqa: E501


        :return: The status_code of this TravelLine.  # noqa: E501
        :rtype: int
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this TravelLine.


        :param status_code: The status_code of this TravelLine.  # noqa: E501
        :type: int
        """

        self._status_code = status_code

    @property
    def deleted(self):
        """Gets the deleted of this TravelLine.  # noqa: E501


        :return: The deleted of this TravelLine.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this TravelLine.


        :param deleted: The deleted of this TravelLine.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def id(self):
        """Gets the id of this TravelLine.  # noqa: E501


        :return: The id of this TravelLine.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TravelLine.


        :param id: The id of this TravelLine.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def vat_type_id(self):
        """Gets the vat_type_id of this TravelLine.  # noqa: E501


        :return: The vat_type_id of this TravelLine.  # noqa: E501
        :rtype: int
        """
        return self._vat_type_id

    @vat_type_id.setter
    def vat_type_id(self, vat_type_id):
        """Sets the vat_type_id of this TravelLine.


        :param vat_type_id: The vat_type_id of this TravelLine.  # noqa: E501
        :type: int
        """

        self._vat_type_id = vat_type_id

    @property
    def paytrans_id(self):
        """Gets the paytrans_id of this TravelLine.  # noqa: E501


        :return: The paytrans_id of this TravelLine.  # noqa: E501
        :rtype: int
        """
        return self._paytrans_id

    @paytrans_id.setter
    def paytrans_id(self, paytrans_id):
        """Sets the paytrans_id of this TravelLine.


        :param paytrans_id: The paytrans_id of this TravelLine.  # noqa: E501
        :type: int
        """

        self._paytrans_id = paytrans_id

    @property
    def updated_by(self):
        """Gets the updated_by of this TravelLine.  # noqa: E501


        :return: The updated_by of this TravelLine.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this TravelLine.


        :param updated_by: The updated_by of this TravelLine.  # noqa: E501
        :type: str
        """

        self._updated_by = updated_by

    @property
    def created_by(self):
        """Gets the created_by of this TravelLine.  # noqa: E501


        :return: The created_by of this TravelLine.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this TravelLine.


        :param created_by: The created_by of this TravelLine.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def type_id(self):
        """Gets the type_id of this TravelLine.  # noqa: E501


        :return: The type_id of this TravelLine.  # noqa: E501
        :rtype: int
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this TravelLine.


        :param type_id: The type_id of this TravelLine.  # noqa: E501
        :type: int
        """

        self._type_id = type_id

    @property
    def travel_identificator(self):
        """Gets the travel_identificator of this TravelLine.  # noqa: E501


        :return: The travel_identificator of this TravelLine.  # noqa: E501
        :rtype: str
        """
        return self._travel_identificator

    @travel_identificator.setter
    def travel_identificator(self, travel_identificator):
        """Sets the travel_identificator of this TravelLine.


        :param travel_identificator: The travel_identificator of this TravelLine.  # noqa: E501
        :type: str
        """

        self._travel_identificator = travel_identificator

    @property
    def cost_type(self):
        """Gets the cost_type of this TravelLine.  # noqa: E501


        :return: The cost_type of this TravelLine.  # noqa: E501
        :rtype: str
        """
        return self._cost_type

    @cost_type.setter
    def cost_type(self, cost_type):
        """Sets the cost_type of this TravelLine.


        :param cost_type: The cost_type of this TravelLine.  # noqa: E501
        :type: str
        """

        self._cost_type = cost_type

    @property
    def travel(self):
        """Gets the travel of this TravelLine.  # noqa: E501


        :return: The travel of this TravelLine.  # noqa: E501
        :rtype: Travel
        """
        return self._travel

    @travel.setter
    def travel(self, travel):
        """Sets the travel of this TravelLine.


        :param travel: The travel of this TravelLine.  # noqa: E501
        :type: Travel
        """

        self._travel = travel

    @property
    def vat_type(self):
        """Gets the vat_type of this TravelLine.  # noqa: E501


        :return: The vat_type of this TravelLine.  # noqa: E501
        :rtype: VatType
        """
        return self._vat_type

    @vat_type.setter
    def vat_type(self, vat_type):
        """Sets the vat_type of this TravelLine.


        :param vat_type: The vat_type of this TravelLine.  # noqa: E501
        :type: VatType
        """

        self._vat_type = vat_type

    @property
    def travel_type(self):
        """Gets the travel_type of this TravelLine.  # noqa: E501


        :return: The travel_type of this TravelLine.  # noqa: E501
        :rtype: TravelType
        """
        return self._travel_type

    @travel_type.setter
    def travel_type(self, travel_type):
        """Sets the travel_type of this TravelLine.


        :param travel_type: The travel_type of this TravelLine.  # noqa: E501
        :type: TravelType
        """

        self._travel_type = travel_type

    @property
    def custom_values(self):
        """Gets the custom_values of this TravelLine.  # noqa: E501


        :return: The custom_values of this TravelLine.  # noqa: E501
        :rtype: CustomValues
        """
        return self._custom_values

    @custom_values.setter
    def custom_values(self, custom_values):
        """Sets the custom_values of this TravelLine.


        :param custom_values: The custom_values of this TravelLine.  # noqa: E501
        :type: CustomValues
        """

        self._custom_values = custom_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TravelLine, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TravelLine):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
