# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class AccountMandatoryDimensionApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def accountmandatorydimension_get(self, **kwargs):  # noqa: E501
        """accountmandatorydimension_get  # noqa: E501

        Query AccountMandatoryDimension  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accountmandatorydimension_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[AccountMandatoryDimension]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accountmandatorydimension_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.accountmandatorydimension_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def accountmandatorydimension_get_with_http_info(self, **kwargs):  # noqa: E501
        """accountmandatorydimension_get  # noqa: E501

        Query AccountMandatoryDimension  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accountmandatorydimension_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[AccountMandatoryDimension]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accountmandatorydimension_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/accountmandatorydimension', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AccountMandatoryDimension]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def accountmandatorydimension_id_delete(self, id, **kwargs):  # noqa: E501
        """accountmandatorydimension_id_delete  # noqa: E501

        Delete AccountMandatoryDimension  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accountmandatorydimension_id_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: AccountMandatoryDimension
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accountmandatorydimension_id_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.accountmandatorydimension_id_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def accountmandatorydimension_id_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """accountmandatorydimension_id_delete  # noqa: E501

        Delete AccountMandatoryDimension  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accountmandatorydimension_id_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: AccountMandatoryDimension
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accountmandatorydimension_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `accountmandatorydimension_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/accountmandatorydimension/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountMandatoryDimension',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def accountmandatorydimension_id_get(self, id, **kwargs):  # noqa: E501
        """accountmandatorydimension_id_get  # noqa: E501

        Get AccountMandatoryDimension  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accountmandatorydimension_id_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: AccountMandatoryDimension
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accountmandatorydimension_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.accountmandatorydimension_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def accountmandatorydimension_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """accountmandatorydimension_id_get  # noqa: E501

        Get AccountMandatoryDimension  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accountmandatorydimension_id_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: AccountMandatoryDimension
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accountmandatorydimension_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `accountmandatorydimension_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/accountmandatorydimension/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountMandatoryDimension',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def accountmandatorydimension_id_put(self, body, id, **kwargs):  # noqa: E501
        """accountmandatorydimension_id_put  # noqa: E501

        Update AccountMandatoryDimension  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accountmandatorydimension_id_put(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AccountMandatoryDimension body: (required)
        :param int id: (required)
        :return: AccountMandatoryDimension
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accountmandatorydimension_id_put_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.accountmandatorydimension_id_put_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def accountmandatorydimension_id_put_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """accountmandatorydimension_id_put  # noqa: E501

        Update AccountMandatoryDimension  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accountmandatorydimension_id_put_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AccountMandatoryDimension body: (required)
        :param int id: (required)
        :return: AccountMandatoryDimension
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accountmandatorydimension_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `accountmandatorydimension_id_put`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `accountmandatorydimension_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/accountmandatorydimension/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountMandatoryDimension',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def accountmandatorydimension_post(self, body, **kwargs):  # noqa: E501
        """accountmandatorydimension_post  # noqa: E501

        Create AccountMandatoryDimension  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accountmandatorydimension_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AccountMandatoryDimension body: (required)
        :return: AccountMandatoryDimension
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accountmandatorydimension_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.accountmandatorydimension_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def accountmandatorydimension_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """accountmandatorydimension_post  # noqa: E501

        Create AccountMandatoryDimension  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accountmandatorydimension_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AccountMandatoryDimension body: (required)
        :return: AccountMandatoryDimension
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accountmandatorydimension_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `accountmandatorydimension_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/accountmandatorydimension', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountMandatoryDimension',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def accountmandatorydimensionactionadd_accounts_mandatory_dimensions_put(self, from_account_no, to_account_no, dimension_no, mandatory_type, **kwargs):  # noqa: E501
        """accountmandatorydimensionactionadd_accounts_mandatory_dimensions_put  # noqa: E501

        add-accounts-mandatory-dimensions Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accountmandatorydimensionactionadd_accounts_mandatory_dimensions_put(from_account_no, to_account_no, dimension_no, mandatory_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object from_account_no: (required)
        :param Object to_account_no: (required)
        :param Object dimension_no: (required)
        :param Object mandatory_type: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accountmandatorydimensionactionadd_accounts_mandatory_dimensions_put_with_http_info(from_account_no, to_account_no, dimension_no, mandatory_type, **kwargs)  # noqa: E501
        else:
            (data) = self.accountmandatorydimensionactionadd_accounts_mandatory_dimensions_put_with_http_info(from_account_no, to_account_no, dimension_no, mandatory_type, **kwargs)  # noqa: E501
            return data

    def accountmandatorydimensionactionadd_accounts_mandatory_dimensions_put_with_http_info(self, from_account_no, to_account_no, dimension_no, mandatory_type, **kwargs):  # noqa: E501
        """accountmandatorydimensionactionadd_accounts_mandatory_dimensions_put  # noqa: E501

        add-accounts-mandatory-dimensions Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accountmandatorydimensionactionadd_accounts_mandatory_dimensions_put_with_http_info(from_account_no, to_account_no, dimension_no, mandatory_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object from_account_no: (required)
        :param Object to_account_no: (required)
        :param Object dimension_no: (required)
        :param Object mandatory_type: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['from_account_no', 'to_account_no', 'dimension_no', 'mandatory_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accountmandatorydimensionactionadd_accounts_mandatory_dimensions_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'from_account_no' is set
        if ('from_account_no' not in params or
                params['from_account_no'] is None):
            raise ValueError("Missing the required parameter `from_account_no` when calling `accountmandatorydimensionactionadd_accounts_mandatory_dimensions_put`")  # noqa: E501
        # verify the required parameter 'to_account_no' is set
        if ('to_account_no' not in params or
                params['to_account_no'] is None):
            raise ValueError("Missing the required parameter `to_account_no` when calling `accountmandatorydimensionactionadd_accounts_mandatory_dimensions_put`")  # noqa: E501
        # verify the required parameter 'dimension_no' is set
        if ('dimension_no' not in params or
                params['dimension_no'] is None):
            raise ValueError("Missing the required parameter `dimension_no` when calling `accountmandatorydimensionactionadd_accounts_mandatory_dimensions_put`")  # noqa: E501
        # verify the required parameter 'mandatory_type' is set
        if ('mandatory_type' not in params or
                params['mandatory_type'] is None):
            raise ValueError("Missing the required parameter `mandatory_type` when calling `accountmandatorydimensionactionadd_accounts_mandatory_dimensions_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'from_account_no' in params:
            path_params['FromAccountNo'] = params['from_account_no']  # noqa: E501
        if 'to_account_no' in params:
            path_params['ToAccountNo'] = params['to_account_no']  # noqa: E501
        if 'dimension_no' in params:
            path_params['DimensionNo'] = params['dimension_no']  # noqa: E501
        if 'mandatory_type' in params:
            path_params['MandatoryType'] = params['mandatory_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/accountmandatorydimension?action=add-accounts-mandatory-dimensions', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def accountmandatorydimensionactioncheck_recurringinvoices_get(self, account_id, **kwargs):  # noqa: E501
        """accountmandatorydimensionactioncheck_recurringinvoices_get  # noqa: E501

        check-recurringinvoices Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accountmandatorydimensionactioncheck_recurringinvoices_get(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object account_id: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accountmandatorydimensionactioncheck_recurringinvoices_get_with_http_info(account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.accountmandatorydimensionactioncheck_recurringinvoices_get_with_http_info(account_id, **kwargs)  # noqa: E501
            return data

    def accountmandatorydimensionactioncheck_recurringinvoices_get_with_http_info(self, account_id, **kwargs):  # noqa: E501
        """accountmandatorydimensionactioncheck_recurringinvoices_get  # noqa: E501

        check-recurringinvoices Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accountmandatorydimensionactioncheck_recurringinvoices_get_with_http_info(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object account_id: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accountmandatorydimensionactioncheck_recurringinvoices_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accountmandatorydimensionactioncheck_recurringinvoices_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['accountID'] = params['account_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/accountmandatorydimension?action=check-recurringinvoices', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def accountmandatorydimensionactionget_customer_mandatory_dimensions_report_dimensions_id_get(self, customer_id, dimensions_id, **kwargs):  # noqa: E501
        """accountmandatorydimensionactionget_customer_mandatory_dimensions_report_dimensions_id_get  # noqa: E501

        get-customer-mandatory-dimensions-report-dimensionsID Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accountmandatorydimensionactionget_customer_mandatory_dimensions_report_dimensions_id_get(customer_id, dimensions_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object customer_id: (required)
        :param Object dimensions_id: (required)
        :return: MandatoryDimensionAccountReport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accountmandatorydimensionactionget_customer_mandatory_dimensions_report_dimensions_id_get_with_http_info(customer_id, dimensions_id, **kwargs)  # noqa: E501
        else:
            (data) = self.accountmandatorydimensionactionget_customer_mandatory_dimensions_report_dimensions_id_get_with_http_info(customer_id, dimensions_id, **kwargs)  # noqa: E501
            return data

    def accountmandatorydimensionactionget_customer_mandatory_dimensions_report_dimensions_id_get_with_http_info(self, customer_id, dimensions_id, **kwargs):  # noqa: E501
        """accountmandatorydimensionactionget_customer_mandatory_dimensions_report_dimensions_id_get  # noqa: E501

        get-customer-mandatory-dimensions-report-dimensionsID Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accountmandatorydimensionactionget_customer_mandatory_dimensions_report_dimensions_id_get_with_http_info(customer_id, dimensions_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object customer_id: (required)
        :param Object dimensions_id: (required)
        :return: MandatoryDimensionAccountReport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_id', 'dimensions_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accountmandatorydimensionactionget_customer_mandatory_dimensions_report_dimensions_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'customer_id' is set
        if ('customer_id' not in params or
                params['customer_id'] is None):
            raise ValueError("Missing the required parameter `customer_id` when calling `accountmandatorydimensionactionget_customer_mandatory_dimensions_report_dimensions_id_get`")  # noqa: E501
        # verify the required parameter 'dimensions_id' is set
        if ('dimensions_id' not in params or
                params['dimensions_id'] is None):
            raise ValueError("Missing the required parameter `dimensions_id` when calling `accountmandatorydimensionactionget_customer_mandatory_dimensions_report_dimensions_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'customer_id' in params:
            path_params['customerID'] = params['customer_id']  # noqa: E501
        if 'dimensions_id' in params:
            path_params['dimensionsID'] = params['dimensions_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/accountmandatorydimension?action=get-customer-mandatory-dimensions-report-dimensionsID', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MandatoryDimensionAccountReport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def accountmandatorydimensionactionget_customer_mandatory_dimensions_report_dimensions_put(self, customer_id, **kwargs):  # noqa: E501
        """accountmandatorydimensionactionget_customer_mandatory_dimensions_report_dimensions_put  # noqa: E501

        get-customer-mandatory-dimensions-report-dimensions Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accountmandatorydimensionactionget_customer_mandatory_dimensions_report_dimensions_put(customer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object customer_id: (required)
        :param Dimensions body:
        :return: MandatoryDimensionAccountReport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accountmandatorydimensionactionget_customer_mandatory_dimensions_report_dimensions_put_with_http_info(customer_id, **kwargs)  # noqa: E501
        else:
            (data) = self.accountmandatorydimensionactionget_customer_mandatory_dimensions_report_dimensions_put_with_http_info(customer_id, **kwargs)  # noqa: E501
            return data

    def accountmandatorydimensionactionget_customer_mandatory_dimensions_report_dimensions_put_with_http_info(self, customer_id, **kwargs):  # noqa: E501
        """accountmandatorydimensionactionget_customer_mandatory_dimensions_report_dimensions_put  # noqa: E501

        get-customer-mandatory-dimensions-report-dimensions Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accountmandatorydimensionactionget_customer_mandatory_dimensions_report_dimensions_put_with_http_info(customer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object customer_id: (required)
        :param Dimensions body:
        :return: MandatoryDimensionAccountReport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accountmandatorydimensionactionget_customer_mandatory_dimensions_report_dimensions_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'customer_id' is set
        if ('customer_id' not in params or
                params['customer_id'] is None):
            raise ValueError("Missing the required parameter `customer_id` when calling `accountmandatorydimensionactionget_customer_mandatory_dimensions_report_dimensions_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'customer_id' in params:
            path_params['customerID'] = params['customer_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/accountmandatorydimension?action=get-customer-mandatory-dimensions-report-dimensions', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MandatoryDimensionAccountReport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def accountmandatorydimensionactionget_mandatory_dimensions_report_by_dimensions_put(self, account_id, **kwargs):  # noqa: E501
        """accountmandatorydimensionactionget_mandatory_dimensions_report_by_dimensions_put  # noqa: E501

        get-mandatory-dimensions-report-by-dimensions Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accountmandatorydimensionactionget_mandatory_dimensions_report_by_dimensions_put(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object account_id: (required)
        :param Dimensions body:
        :return: MandatoryDimensionAccountReport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accountmandatorydimensionactionget_mandatory_dimensions_report_by_dimensions_put_with_http_info(account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.accountmandatorydimensionactionget_mandatory_dimensions_report_by_dimensions_put_with_http_info(account_id, **kwargs)  # noqa: E501
            return data

    def accountmandatorydimensionactionget_mandatory_dimensions_report_by_dimensions_put_with_http_info(self, account_id, **kwargs):  # noqa: E501
        """accountmandatorydimensionactionget_mandatory_dimensions_report_by_dimensions_put  # noqa: E501

        get-mandatory-dimensions-report-by-dimensions Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accountmandatorydimensionactionget_mandatory_dimensions_report_by_dimensions_put_with_http_info(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object account_id: (required)
        :param Dimensions body:
        :return: MandatoryDimensionAccountReport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accountmandatorydimensionactionget_mandatory_dimensions_report_by_dimensions_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accountmandatorydimensionactionget_mandatory_dimensions_report_by_dimensions_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['accountID'] = params['account_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/accountmandatorydimension?action=get-mandatory-dimensions-report-by-dimensions', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MandatoryDimensionAccountReport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def accountmandatorydimensionactionget_mandatory_dimensions_report_get(self, account_id, dimensions_id, **kwargs):  # noqa: E501
        """accountmandatorydimensionactionget_mandatory_dimensions_report_get  # noqa: E501

        get-mandatory-dimensions-report Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accountmandatorydimensionactionget_mandatory_dimensions_report_get(account_id, dimensions_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object account_id: (required)
        :param Object dimensions_id: (required)
        :return: MandatoryDimensionAccountReport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accountmandatorydimensionactionget_mandatory_dimensions_report_get_with_http_info(account_id, dimensions_id, **kwargs)  # noqa: E501
        else:
            (data) = self.accountmandatorydimensionactionget_mandatory_dimensions_report_get_with_http_info(account_id, dimensions_id, **kwargs)  # noqa: E501
            return data

    def accountmandatorydimensionactionget_mandatory_dimensions_report_get_with_http_info(self, account_id, dimensions_id, **kwargs):  # noqa: E501
        """accountmandatorydimensionactionget_mandatory_dimensions_report_get  # noqa: E501

        get-mandatory-dimensions-report Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accountmandatorydimensionactionget_mandatory_dimensions_report_get_with_http_info(account_id, dimensions_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object account_id: (required)
        :param Object dimensions_id: (required)
        :return: MandatoryDimensionAccountReport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'dimensions_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accountmandatorydimensionactionget_mandatory_dimensions_report_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accountmandatorydimensionactionget_mandatory_dimensions_report_get`")  # noqa: E501
        # verify the required parameter 'dimensions_id' is set
        if ('dimensions_id' not in params or
                params['dimensions_id'] is None):
            raise ValueError("Missing the required parameter `dimensions_id` when calling `accountmandatorydimensionactionget_mandatory_dimensions_report_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['accountID'] = params['account_id']  # noqa: E501
        if 'dimensions_id' in params:
            path_params['dimensionsID'] = params['dimensions_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/accountmandatorydimension?action=get-mandatory-dimensions-report', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MandatoryDimensionAccountReport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def accountmandatorydimensionactionget_mandatory_dimensions_reports_put(self, **kwargs):  # noqa: E501
        """accountmandatorydimensionactionget_mandatory_dimensions_reports_put  # noqa: E501

        get-mandatory-dimensions-reports Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accountmandatorydimensionactionget_mandatory_dimensions_reports_put(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[AccountDimension] body:
        :return: list[MandatoryDimensionAccountReport]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accountmandatorydimensionactionget_mandatory_dimensions_reports_put_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.accountmandatorydimensionactionget_mandatory_dimensions_reports_put_with_http_info(**kwargs)  # noqa: E501
            return data

    def accountmandatorydimensionactionget_mandatory_dimensions_reports_put_with_http_info(self, **kwargs):  # noqa: E501
        """accountmandatorydimensionactionget_mandatory_dimensions_reports_put  # noqa: E501

        get-mandatory-dimensions-reports Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accountmandatorydimensionactionget_mandatory_dimensions_reports_put_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[AccountDimension] body:
        :return: list[MandatoryDimensionAccountReport]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accountmandatorydimensionactionget_mandatory_dimensions_reports_put" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/accountmandatorydimension?action=get-mandatory-dimensions-reports', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MandatoryDimensionAccountReport]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def accountmandatorydimensionactionget_supplier_mandatory_dimensions_report_dimensions_id_get(self, supplier_id, dimensions_id, **kwargs):  # noqa: E501
        """accountmandatorydimensionactionget_supplier_mandatory_dimensions_report_dimensions_id_get  # noqa: E501

        get-supplier-mandatory-dimensions-report-dimensionsID Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accountmandatorydimensionactionget_supplier_mandatory_dimensions_report_dimensions_id_get(supplier_id, dimensions_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object supplier_id: (required)
        :param Object dimensions_id: (required)
        :return: MandatoryDimensionAccountReport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accountmandatorydimensionactionget_supplier_mandatory_dimensions_report_dimensions_id_get_with_http_info(supplier_id, dimensions_id, **kwargs)  # noqa: E501
        else:
            (data) = self.accountmandatorydimensionactionget_supplier_mandatory_dimensions_report_dimensions_id_get_with_http_info(supplier_id, dimensions_id, **kwargs)  # noqa: E501
            return data

    def accountmandatorydimensionactionget_supplier_mandatory_dimensions_report_dimensions_id_get_with_http_info(self, supplier_id, dimensions_id, **kwargs):  # noqa: E501
        """accountmandatorydimensionactionget_supplier_mandatory_dimensions_report_dimensions_id_get  # noqa: E501

        get-supplier-mandatory-dimensions-report-dimensionsID Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accountmandatorydimensionactionget_supplier_mandatory_dimensions_report_dimensions_id_get_with_http_info(supplier_id, dimensions_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object supplier_id: (required)
        :param Object dimensions_id: (required)
        :return: MandatoryDimensionAccountReport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['supplier_id', 'dimensions_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accountmandatorydimensionactionget_supplier_mandatory_dimensions_report_dimensions_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'supplier_id' is set
        if ('supplier_id' not in params or
                params['supplier_id'] is None):
            raise ValueError("Missing the required parameter `supplier_id` when calling `accountmandatorydimensionactionget_supplier_mandatory_dimensions_report_dimensions_id_get`")  # noqa: E501
        # verify the required parameter 'dimensions_id' is set
        if ('dimensions_id' not in params or
                params['dimensions_id'] is None):
            raise ValueError("Missing the required parameter `dimensions_id` when calling `accountmandatorydimensionactionget_supplier_mandatory_dimensions_report_dimensions_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'supplier_id' in params:
            path_params['supplierID'] = params['supplier_id']  # noqa: E501
        if 'dimensions_id' in params:
            path_params['dimensionsID'] = params['dimensions_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/accountmandatorydimension?action=get-supplier-mandatory-dimensions-report-dimensionsID', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MandatoryDimensionAccountReport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def accountmandatorydimensionactionget_supplier_mandatory_dimensions_report_dimensions_put(self, supplier_id, **kwargs):  # noqa: E501
        """accountmandatorydimensionactionget_supplier_mandatory_dimensions_report_dimensions_put  # noqa: E501

        get-supplier-mandatory-dimensions-report-dimensions Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accountmandatorydimensionactionget_supplier_mandatory_dimensions_report_dimensions_put(supplier_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object supplier_id: (required)
        :param Dimensions body:
        :return: MandatoryDimensionAccountReport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accountmandatorydimensionactionget_supplier_mandatory_dimensions_report_dimensions_put_with_http_info(supplier_id, **kwargs)  # noqa: E501
        else:
            (data) = self.accountmandatorydimensionactionget_supplier_mandatory_dimensions_report_dimensions_put_with_http_info(supplier_id, **kwargs)  # noqa: E501
            return data

    def accountmandatorydimensionactionget_supplier_mandatory_dimensions_report_dimensions_put_with_http_info(self, supplier_id, **kwargs):  # noqa: E501
        """accountmandatorydimensionactionget_supplier_mandatory_dimensions_report_dimensions_put  # noqa: E501

        get-supplier-mandatory-dimensions-report-dimensions Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accountmandatorydimensionactionget_supplier_mandatory_dimensions_report_dimensions_put_with_http_info(supplier_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object supplier_id: (required)
        :param Dimensions body:
        :return: MandatoryDimensionAccountReport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['supplier_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accountmandatorydimensionactionget_supplier_mandatory_dimensions_report_dimensions_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'supplier_id' is set
        if ('supplier_id' not in params or
                params['supplier_id'] is None):
            raise ValueError("Missing the required parameter `supplier_id` when calling `accountmandatorydimensionactionget_supplier_mandatory_dimensions_report_dimensions_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'supplier_id' in params:
            path_params['supplierID'] = params['supplier_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/accountmandatorydimension?action=get-supplier-mandatory-dimensions-report-dimensions', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MandatoryDimensionAccountReport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
