# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class BankStatementApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def bankstatements_get(self, **kwargs):  # noqa: E501
        """bankstatements_get  # noqa: E501

        Query BankStatement  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bankstatements_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[BankStatement]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bankstatements_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.bankstatements_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def bankstatements_get_with_http_info(self, **kwargs):  # noqa: E501
        """bankstatements_get  # noqa: E501

        Query BankStatement  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bankstatements_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[BankStatement]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bankstatements_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bankstatements', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[BankStatement]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bankstatements_id_delete(self, id, **kwargs):  # noqa: E501
        """bankstatements_id_delete  # noqa: E501

        Delete BankStatement  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bankstatements_id_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: BankStatement
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bankstatements_id_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.bankstatements_id_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def bankstatements_id_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """bankstatements_id_delete  # noqa: E501

        Delete BankStatement  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bankstatements_id_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: BankStatement
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bankstatements_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bankstatements_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bankstatements/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BankStatement',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bankstatements_id_get(self, id, **kwargs):  # noqa: E501
        """bankstatements_id_get  # noqa: E501

        Get BankStatement  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bankstatements_id_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: BankStatement
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bankstatements_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.bankstatements_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def bankstatements_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """bankstatements_id_get  # noqa: E501

        Get BankStatement  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bankstatements_id_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: BankStatement
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bankstatements_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bankstatements_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bankstatements/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BankStatement',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bankstatements_id_put(self, body, id, **kwargs):  # noqa: E501
        """bankstatements_id_put  # noqa: E501

        Update BankStatement  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bankstatements_id_put(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BankStatement body: (required)
        :param int id: (required)
        :return: BankStatement
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bankstatements_id_put_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.bankstatements_id_put_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def bankstatements_id_put_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """bankstatements_id_put  # noqa: E501

        Update BankStatement  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bankstatements_id_put_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BankStatement body: (required)
        :param int id: (required)
        :return: BankStatement
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bankstatements_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `bankstatements_id_put`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bankstatements_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bankstatements/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BankStatement',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bankstatements_idactioncomplete_post(self, id, id, **kwargs):  # noqa: E501
        """bankstatements_idactioncomplete_post  # noqa: E501

        complete Transition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bankstatements_idactioncomplete_post(id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: BankStatement
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bankstatements_idactioncomplete_post_with_http_info(id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.bankstatements_idactioncomplete_post_with_http_info(id, id, **kwargs)  # noqa: E501
            return data

    def bankstatements_idactioncomplete_post_with_http_info(self, id, id, **kwargs):  # noqa: E501
        """bankstatements_idactioncomplete_post  # noqa: E501

        complete Transition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bankstatements_idactioncomplete_post_with_http_info(id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: BankStatement
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bankstatements_idactioncomplete_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bankstatements_idactioncomplete_post`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bankstatements_idactioncomplete_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bankstatements/{id}?action=complete', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BankStatement',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bankstatements_idactionreopen_post(self, id, id, **kwargs):  # noqa: E501
        """bankstatements_idactionreopen_post  # noqa: E501

        reopen Transition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bankstatements_idactionreopen_post(id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: BankStatement
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bankstatements_idactionreopen_post_with_http_info(id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.bankstatements_idactionreopen_post_with_http_info(id, id, **kwargs)  # noqa: E501
            return data

    def bankstatements_idactionreopen_post_with_http_info(self, id, id, **kwargs):  # noqa: E501
        """bankstatements_idactionreopen_post  # noqa: E501

        reopen Transition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bankstatements_idactionreopen_post_with_http_info(id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: BankStatement
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bankstatements_idactionreopen_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bankstatements_idactionreopen_post`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bankstatements_idactionreopen_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bankstatements/{id}?action=reopen', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BankStatement',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bankstatements_post(self, body, **kwargs):  # noqa: E501
        """bankstatements_post  # noqa: E501

        Create BankStatement  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bankstatements_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BankStatement body: (required)
        :return: BankStatement
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bankstatements_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.bankstatements_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def bankstatements_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """bankstatements_post  # noqa: E501

        Create BankStatement  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bankstatements_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BankStatement body: (required)
        :return: BankStatement
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bankstatements_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `bankstatements_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bankstatements', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BankStatement',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bankstatementsactionaccount_balance_get(self, accountid, _date, **kwargs):  # noqa: E501
        """bankstatementsactionaccount_balance_get  # noqa: E501

        account-balance Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bankstatementsactionaccount_balance_get(accountid, _date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object accountid: (required)
        :param Object _date: (required)
        :return: BalanceDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bankstatementsactionaccount_balance_get_with_http_info(accountid, _date, **kwargs)  # noqa: E501
        else:
            (data) = self.bankstatementsactionaccount_balance_get_with_http_info(accountid, _date, **kwargs)  # noqa: E501
            return data

    def bankstatementsactionaccount_balance_get_with_http_info(self, accountid, _date, **kwargs):  # noqa: E501
        """bankstatementsactionaccount_balance_get  # noqa: E501

        account-balance Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bankstatementsactionaccount_balance_get_with_http_info(accountid, _date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object accountid: (required)
        :param Object _date: (required)
        :return: BalanceDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accountid', '_date']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bankstatementsactionaccount_balance_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'accountid' is set
        if ('accountid' not in params or
                params['accountid'] is None):
            raise ValueError("Missing the required parameter `accountid` when calling `bankstatementsactionaccount_balance_get`")  # noqa: E501
        # verify the required parameter '_date' is set
        if ('_date' not in params or
                params['_date'] is None):
            raise ValueError("Missing the required parameter `_date` when calling `bankstatementsactionaccount_balance_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'accountid' in params:
            path_params['accountid'] = params['accountid']  # noqa: E501
        if '_date' in params:
            path_params['date'] = params['_date']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bankstatements?action=account-balance', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BalanceDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bankstatementsactionaccount_status_get(self, accountid, fromdate, todate, **kwargs):  # noqa: E501
        """bankstatementsactionaccount_status_get  # noqa: E501

        account-status Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bankstatementsactionaccount_status_get(accountid, fromdate, todate, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object accountid: (required)
        :param Object fromdate: (required)
        :param Object todate: (required)
        :return: ReconciliationStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bankstatementsactionaccount_status_get_with_http_info(accountid, fromdate, todate, **kwargs)  # noqa: E501
        else:
            (data) = self.bankstatementsactionaccount_status_get_with_http_info(accountid, fromdate, todate, **kwargs)  # noqa: E501
            return data

    def bankstatementsactionaccount_status_get_with_http_info(self, accountid, fromdate, todate, **kwargs):  # noqa: E501
        """bankstatementsactionaccount_status_get  # noqa: E501

        account-status Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bankstatementsactionaccount_status_get_with_http_info(accountid, fromdate, todate, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object accountid: (required)
        :param Object fromdate: (required)
        :param Object todate: (required)
        :return: ReconciliationStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accountid', 'fromdate', 'todate']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bankstatementsactionaccount_status_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'accountid' is set
        if ('accountid' not in params or
                params['accountid'] is None):
            raise ValueError("Missing the required parameter `accountid` when calling `bankstatementsactionaccount_status_get`")  # noqa: E501
        # verify the required parameter 'fromdate' is set
        if ('fromdate' not in params or
                params['fromdate'] is None):
            raise ValueError("Missing the required parameter `fromdate` when calling `bankstatementsactionaccount_status_get`")  # noqa: E501
        # verify the required parameter 'todate' is set
        if ('todate' not in params or
                params['todate'] is None):
            raise ValueError("Missing the required parameter `todate` when calling `bankstatementsactionaccount_status_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'accountid' in params:
            path_params['accountid'] = params['accountid']  # noqa: E501
        if 'fromdate' in params:
            path_params['fromdate'] = params['fromdate']  # noqa: E501
        if 'todate' in params:
            path_params['todate'] = params['todate']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bankstatements?action=account-status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReconciliationStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bankstatementsactionaccount_status_monthly_get(self, accountid, fromdate, todate, **kwargs):  # noqa: E501
        """bankstatementsactionaccount_status_monthly_get  # noqa: E501

        account-status-monthly Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bankstatementsactionaccount_status_monthly_get(accountid, fromdate, todate, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object accountid: (required)
        :param Object fromdate: (required)
        :param Object todate: (required)
        :return: list[ReconciliationStatus]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bankstatementsactionaccount_status_monthly_get_with_http_info(accountid, fromdate, todate, **kwargs)  # noqa: E501
        else:
            (data) = self.bankstatementsactionaccount_status_monthly_get_with_http_info(accountid, fromdate, todate, **kwargs)  # noqa: E501
            return data

    def bankstatementsactionaccount_status_monthly_get_with_http_info(self, accountid, fromdate, todate, **kwargs):  # noqa: E501
        """bankstatementsactionaccount_status_monthly_get  # noqa: E501

        account-status-monthly Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bankstatementsactionaccount_status_monthly_get_with_http_info(accountid, fromdate, todate, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object accountid: (required)
        :param Object fromdate: (required)
        :param Object todate: (required)
        :return: list[ReconciliationStatus]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accountid', 'fromdate', 'todate']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bankstatementsactionaccount_status_monthly_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'accountid' is set
        if ('accountid' not in params or
                params['accountid'] is None):
            raise ValueError("Missing the required parameter `accountid` when calling `bankstatementsactionaccount_status_monthly_get`")  # noqa: E501
        # verify the required parameter 'fromdate' is set
        if ('fromdate' not in params or
                params['fromdate'] is None):
            raise ValueError("Missing the required parameter `fromdate` when calling `bankstatementsactionaccount_status_monthly_get`")  # noqa: E501
        # verify the required parameter 'todate' is set
        if ('todate' not in params or
                params['todate'] is None):
            raise ValueError("Missing the required parameter `todate` when calling `bankstatementsactionaccount_status_monthly_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'accountid' in params:
            path_params['accountid'] = params['accountid']  # noqa: E501
        if 'fromdate' in params:
            path_params['fromdate'] = params['fromdate']  # noqa: E501
        if 'todate' in params:
            path_params['todate'] = params['todate']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bankstatements?action=account-status-monthly', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ReconciliationStatus]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bankstatementsactionimport_post(self, accountid, file_id, max_lines, **kwargs):  # noqa: E501
        """bankstatementsactionimport_post  # noqa: E501

        import Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bankstatementsactionimport_post(accountid, file_id, max_lines, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object accountid: (required)
        :param Object file_id: (required)
        :param Object max_lines: (required)
        :param BankfileFormat body:
        :return: BankStatement
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bankstatementsactionimport_post_with_http_info(accountid, file_id, max_lines, **kwargs)  # noqa: E501
        else:
            (data) = self.bankstatementsactionimport_post_with_http_info(accountid, file_id, max_lines, **kwargs)  # noqa: E501
            return data

    def bankstatementsactionimport_post_with_http_info(self, accountid, file_id, max_lines, **kwargs):  # noqa: E501
        """bankstatementsactionimport_post  # noqa: E501

        import Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bankstatementsactionimport_post_with_http_info(accountid, file_id, max_lines, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object accountid: (required)
        :param Object file_id: (required)
        :param Object max_lines: (required)
        :param BankfileFormat body:
        :return: BankStatement
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accountid', 'file_id', 'max_lines', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bankstatementsactionimport_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'accountid' is set
        if ('accountid' not in params or
                params['accountid'] is None):
            raise ValueError("Missing the required parameter `accountid` when calling `bankstatementsactionimport_post`")  # noqa: E501
        # verify the required parameter 'file_id' is set
        if ('file_id' not in params or
                params['file_id'] is None):
            raise ValueError("Missing the required parameter `file_id` when calling `bankstatementsactionimport_post`")  # noqa: E501
        # verify the required parameter 'max_lines' is set
        if ('max_lines' not in params or
                params['max_lines'] is None):
            raise ValueError("Missing the required parameter `max_lines` when calling `bankstatementsactionimport_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'accountid' in params:
            path_params['accountid'] = params['accountid']  # noqa: E501
        if 'file_id' in params:
            path_params['fileID'] = params['file_id']  # noqa: E501
        if 'max_lines' in params:
            path_params['maxLines'] = params['max_lines']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bankstatements?action=import', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BankStatement',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bankstatementsactionmatch_items_post(self, **kwargs):  # noqa: E501
        """bankstatementsactionmatch_items_post  # noqa: E501

        match-items Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bankstatementsactionmatch_items_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[BankStatementMatch] body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bankstatementsactionmatch_items_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.bankstatementsactionmatch_items_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def bankstatementsactionmatch_items_post_with_http_info(self, **kwargs):  # noqa: E501
        """bankstatementsactionmatch_items_post  # noqa: E501

        match-items Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bankstatementsactionmatch_items_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[BankStatementMatch] body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bankstatementsactionmatch_items_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bankstatements?action=match-items', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bankstatementsactionpreview_post(self, accountid, file_id, max_lines, **kwargs):  # noqa: E501
        """bankstatementsactionpreview_post  # noqa: E501

        preview Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bankstatementsactionpreview_post(accountid, file_id, max_lines, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object accountid: (required)
        :param Object file_id: (required)
        :param Object max_lines: (required)
        :param BankfileFormat body:
        :return: BankStatement
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bankstatementsactionpreview_post_with_http_info(accountid, file_id, max_lines, **kwargs)  # noqa: E501
        else:
            (data) = self.bankstatementsactionpreview_post_with_http_info(accountid, file_id, max_lines, **kwargs)  # noqa: E501
            return data

    def bankstatementsactionpreview_post_with_http_info(self, accountid, file_id, max_lines, **kwargs):  # noqa: E501
        """bankstatementsactionpreview_post  # noqa: E501

        preview Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bankstatementsactionpreview_post_with_http_info(accountid, file_id, max_lines, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object accountid: (required)
        :param Object file_id: (required)
        :param Object max_lines: (required)
        :param BankfileFormat body:
        :return: BankStatement
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['accountid', 'file_id', 'max_lines', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bankstatementsactionpreview_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'accountid' is set
        if ('accountid' not in params or
                params['accountid'] is None):
            raise ValueError("Missing the required parameter `accountid` when calling `bankstatementsactionpreview_post`")  # noqa: E501
        # verify the required parameter 'file_id' is set
        if ('file_id' not in params or
                params['file_id'] is None):
            raise ValueError("Missing the required parameter `file_id` when calling `bankstatementsactionpreview_post`")  # noqa: E501
        # verify the required parameter 'max_lines' is set
        if ('max_lines' not in params or
                params['max_lines'] is None):
            raise ValueError("Missing the required parameter `max_lines` when calling `bankstatementsactionpreview_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'accountid' in params:
            path_params['accountid'] = params['accountid']  # noqa: E501
        if 'file_id' in params:
            path_params['fileID'] = params['file_id']  # noqa: E501
        if 'max_lines' in params:
            path_params['maxLines'] = params['max_lines']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bankstatements?action=preview', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BankStatement',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bankstatementsactionsuggest_match_post(self, **kwargs):  # noqa: E501
        """bankstatementsactionsuggest_match_post  # noqa: E501

        suggest-match Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bankstatementsactionsuggest_match_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MatchRequest body:
        :return: list[BankMatchSuggestion]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bankstatementsactionsuggest_match_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.bankstatementsactionsuggest_match_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def bankstatementsactionsuggest_match_post_with_http_info(self, **kwargs):  # noqa: E501
        """bankstatementsactionsuggest_match_post  # noqa: E501

        suggest-match Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bankstatementsactionsuggest_match_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MatchRequest body:
        :return: list[BankMatchSuggestion]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bankstatementsactionsuggest_match_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bankstatements?action=suggest-match', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[BankMatchSuggestion]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bankstatementsactiontemplates_get(self, **kwargs):  # noqa: E501
        """bankstatementsactiontemplates_get  # noqa: E501

        templates Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bankstatementsactiontemplates_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[BankfileFormat]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bankstatementsactiontemplates_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.bankstatementsactiontemplates_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def bankstatementsactiontemplates_get_with_http_info(self, **kwargs):  # noqa: E501
        """bankstatementsactiontemplates_get  # noqa: E501

        templates Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bankstatementsactiontemplates_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[BankfileFormat]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bankstatementsactiontemplates_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bankstatements?action=templates', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[BankfileFormat]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
