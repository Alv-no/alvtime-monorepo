# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class JournalEntryApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def journalentries_get(self, **kwargs):  # noqa: E501
        """journalentries_get  # noqa: E501

        Query JournalEntry  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.journalentries_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[JournalEntry]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.journalentries_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.journalentries_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def journalentries_get_with_http_info(self, **kwargs):  # noqa: E501
        """journalentries_get  # noqa: E501

        Query JournalEntry  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.journalentries_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[JournalEntry]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method journalentries_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/journalentries', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[JournalEntry]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def journalentries_id_delete(self, id, **kwargs):  # noqa: E501
        """journalentries_id_delete  # noqa: E501

        Delete JournalEntry  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.journalentries_id_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: JournalEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.journalentries_id_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.journalentries_id_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def journalentries_id_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """journalentries_id_delete  # noqa: E501

        Delete JournalEntry  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.journalentries_id_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: JournalEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method journalentries_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `journalentries_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/journalentries/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JournalEntry',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def journalentries_id_get(self, id, **kwargs):  # noqa: E501
        """journalentries_id_get  # noqa: E501

        Get JournalEntry  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.journalentries_id_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: JournalEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.journalentries_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.journalentries_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def journalentries_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """journalentries_id_get  # noqa: E501

        Get JournalEntry  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.journalentries_id_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: JournalEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method journalentries_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `journalentries_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/journalentries/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JournalEntry',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def journalentries_id_put(self, body, id, **kwargs):  # noqa: E501
        """journalentries_id_put  # noqa: E501

        Update JournalEntry  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.journalentries_id_put(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param JournalEntry body: (required)
        :param int id: (required)
        :return: JournalEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.journalentries_id_put_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.journalentries_id_put_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def journalentries_id_put_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """journalentries_id_put  # noqa: E501

        Update JournalEntry  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.journalentries_id_put_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param JournalEntry body: (required)
        :param int id: (required)
        :return: JournalEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method journalentries_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `journalentries_id_put`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `journalentries_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/journalentries/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JournalEntry',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def journalentries_post(self, body, **kwargs):  # noqa: E501
        """journalentries_post  # noqa: E501

        Create JournalEntry  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.journalentries_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param JournalEntry body: (required)
        :return: JournalEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.journalentries_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.journalentries_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def journalentries_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """journalentries_post  # noqa: E501

        Create JournalEntry  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.journalentries_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param JournalEntry body: (required)
        :return: JournalEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method journalentries_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `journalentries_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/journalentries', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JournalEntry',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def journalentriesactionbook_journal_entries_post(self, **kwargs):  # noqa: E501
        """journalentriesactionbook_journal_entries_post  # noqa: E501

        book-journal-entries Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.journalentriesactionbook_journal_entries_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[JournalEntry] body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.journalentriesactionbook_journal_entries_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.journalentriesactionbook_journal_entries_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def journalentriesactionbook_journal_entries_post_with_http_info(self, **kwargs):  # noqa: E501
        """journalentriesactionbook_journal_entries_post  # noqa: E501

        book-journal-entries Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.journalentriesactionbook_journal_entries_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[JournalEntry] body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method journalentriesactionbook_journal_entries_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/journalentries?action=book-journal-entries', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def journalentriesactionbook_journal_entry_against_payment_post(self, journal_entry_id, payment_id, **kwargs):  # noqa: E501
        """journalentriesactionbook_journal_entry_against_payment_post  # noqa: E501

        book-journal-entry-against-payment Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.journalentriesactionbook_journal_entry_against_payment_post(journal_entry_id, payment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object journal_entry_id: (required)
        :param Object payment_id: (required)
        :return: JournalEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.journalentriesactionbook_journal_entry_against_payment_post_with_http_info(journal_entry_id, payment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.journalentriesactionbook_journal_entry_against_payment_post_with_http_info(journal_entry_id, payment_id, **kwargs)  # noqa: E501
            return data

    def journalentriesactionbook_journal_entry_against_payment_post_with_http_info(self, journal_entry_id, payment_id, **kwargs):  # noqa: E501
        """journalentriesactionbook_journal_entry_against_payment_post  # noqa: E501

        book-journal-entry-against-payment Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.journalentriesactionbook_journal_entry_against_payment_post_with_http_info(journal_entry_id, payment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object journal_entry_id: (required)
        :param Object payment_id: (required)
        :return: JournalEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['journal_entry_id', 'payment_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method journalentriesactionbook_journal_entry_against_payment_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'journal_entry_id' is set
        if ('journal_entry_id' not in params or
                params['journal_entry_id'] is None):
            raise ValueError("Missing the required parameter `journal_entry_id` when calling `journalentriesactionbook_journal_entry_against_payment_post`")  # noqa: E501
        # verify the required parameter 'payment_id' is set
        if ('payment_id' not in params or
                params['payment_id'] is None):
            raise ValueError("Missing the required parameter `payment_id` when calling `journalentriesactionbook_journal_entry_against_payment_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'journal_entry_id' in params:
            path_params['journalEntryID'] = params['journal_entry_id']  # noqa: E501
        if 'payment_id' in params:
            path_params['paymentID'] = params['payment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/journalentries?action=book-journal-entry-against-payment', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JournalEntry',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def journalentriesactionbook_payment_against_customer_put(self, customer_id, payment_id, is_balance_kid, **kwargs):  # noqa: E501
        """journalentriesactionbook_payment_against_customer_put  # noqa: E501

        book-payment-against-customer Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.journalentriesactionbook_payment_against_customer_put(customer_id, payment_id, is_balance_kid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object customer_id: (required)
        :param Object payment_id: (required)
        :param Object is_balance_kid: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.journalentriesactionbook_payment_against_customer_put_with_http_info(customer_id, payment_id, is_balance_kid, **kwargs)  # noqa: E501
        else:
            (data) = self.journalentriesactionbook_payment_against_customer_put_with_http_info(customer_id, payment_id, is_balance_kid, **kwargs)  # noqa: E501
            return data

    def journalentriesactionbook_payment_against_customer_put_with_http_info(self, customer_id, payment_id, is_balance_kid, **kwargs):  # noqa: E501
        """journalentriesactionbook_payment_against_customer_put  # noqa: E501

        book-payment-against-customer Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.journalentriesactionbook_payment_against_customer_put_with_http_info(customer_id, payment_id, is_balance_kid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object customer_id: (required)
        :param Object payment_id: (required)
        :param Object is_balance_kid: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_id', 'payment_id', 'is_balance_kid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method journalentriesactionbook_payment_against_customer_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'customer_id' is set
        if ('customer_id' not in params or
                params['customer_id'] is None):
            raise ValueError("Missing the required parameter `customer_id` when calling `journalentriesactionbook_payment_against_customer_put`")  # noqa: E501
        # verify the required parameter 'payment_id' is set
        if ('payment_id' not in params or
                params['payment_id'] is None):
            raise ValueError("Missing the required parameter `payment_id` when calling `journalentriesactionbook_payment_against_customer_put`")  # noqa: E501
        # verify the required parameter 'is_balance_kid' is set
        if ('is_balance_kid' not in params or
                params['is_balance_kid'] is None):
            raise ValueError("Missing the required parameter `is_balance_kid` when calling `journalentriesactionbook_payment_against_customer_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'customer_id' in params:
            path_params['customerID'] = params['customer_id']  # noqa: E501
        if 'payment_id' in params:
            path_params['paymentID'] = params['payment_id']  # noqa: E501
        if 'is_balance_kid' in params:
            path_params['isBalanceKID'] = params['is_balance_kid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/journalentries?action=book-payment-against-customer', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def journalentriesactionbook_payment_against_main_account_put(self, payment_id, account_id, **kwargs):  # noqa: E501
        """journalentriesactionbook_payment_against_main_account_put  # noqa: E501

        book-payment-against-main-account Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.journalentriesactionbook_payment_against_main_account_put(payment_id, account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object payment_id: (required)
        :param Object account_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.journalentriesactionbook_payment_against_main_account_put_with_http_info(payment_id, account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.journalentriesactionbook_payment_against_main_account_put_with_http_info(payment_id, account_id, **kwargs)  # noqa: E501
            return data

    def journalentriesactionbook_payment_against_main_account_put_with_http_info(self, payment_id, account_id, **kwargs):  # noqa: E501
        """journalentriesactionbook_payment_against_main_account_put  # noqa: E501

        book-payment-against-main-account Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.journalentriesactionbook_payment_against_main_account_put_with_http_info(payment_id, account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object payment_id: (required)
        :param Object account_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['payment_id', 'account_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method journalentriesactionbook_payment_against_main_account_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'payment_id' is set
        if ('payment_id' not in params or
                params['payment_id'] is None):
            raise ValueError("Missing the required parameter `payment_id` when calling `journalentriesactionbook_payment_against_main_account_put`")  # noqa: E501
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `journalentriesactionbook_payment_against_main_account_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'payment_id' in params:
            path_params['paymentID'] = params['payment_id']  # noqa: E501
        if 'account_id' in params:
            path_params['accountID'] = params['account_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/journalentries?action=book-payment-against-main-account', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def journalentriesactionbook_payment_against_supplier_put(self, supplier_id, payment_id, **kwargs):  # noqa: E501
        """journalentriesactionbook_payment_against_supplier_put  # noqa: E501

        book-payment-against-supplier Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.journalentriesactionbook_payment_against_supplier_put(supplier_id, payment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object supplier_id: (required)
        :param Object payment_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.journalentriesactionbook_payment_against_supplier_put_with_http_info(supplier_id, payment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.journalentriesactionbook_payment_against_supplier_put_with_http_info(supplier_id, payment_id, **kwargs)  # noqa: E501
            return data

    def journalentriesactionbook_payment_against_supplier_put_with_http_info(self, supplier_id, payment_id, **kwargs):  # noqa: E501
        """journalentriesactionbook_payment_against_supplier_put  # noqa: E501

        book-payment-against-supplier Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.journalentriesactionbook_payment_against_supplier_put_with_http_info(supplier_id, payment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object supplier_id: (required)
        :param Object payment_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['supplier_id', 'payment_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method journalentriesactionbook_payment_against_supplier_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'supplier_id' is set
        if ('supplier_id' not in params or
                params['supplier_id'] is None):
            raise ValueError("Missing the required parameter `supplier_id` when calling `journalentriesactionbook_payment_against_supplier_put`")  # noqa: E501
        # verify the required parameter 'payment_id' is set
        if ('payment_id' not in params or
                params['payment_id'] is None):
            raise ValueError("Missing the required parameter `payment_id` when calling `journalentriesactionbook_payment_against_supplier_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'supplier_id' in params:
            path_params['supplierID'] = params['supplier_id']  # noqa: E501
        if 'payment_id' in params:
            path_params['paymentID'] = params['payment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/journalentries?action=book-payment-against-supplier', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def journalentriesactioncredit_and_book_journal_entry_post(self, journal_entry_id, credit_date, **kwargs):  # noqa: E501
        """journalentriesactioncredit_and_book_journal_entry_post  # noqa: E501

        credit-and-book-journal-entry Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.journalentriesactioncredit_and_book_journal_entry_post(journal_entry_id, credit_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object journal_entry_id: (required)
        :param Object credit_date: (required)
        :param list[JournalEntry] body:
        :return: list[JournalEntry]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.journalentriesactioncredit_and_book_journal_entry_post_with_http_info(journal_entry_id, credit_date, **kwargs)  # noqa: E501
        else:
            (data) = self.journalentriesactioncredit_and_book_journal_entry_post_with_http_info(journal_entry_id, credit_date, **kwargs)  # noqa: E501
            return data

    def journalentriesactioncredit_and_book_journal_entry_post_with_http_info(self, journal_entry_id, credit_date, **kwargs):  # noqa: E501
        """journalentriesactioncredit_and_book_journal_entry_post  # noqa: E501

        credit-and-book-journal-entry Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.journalentriesactioncredit_and_book_journal_entry_post_with_http_info(journal_entry_id, credit_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object journal_entry_id: (required)
        :param Object credit_date: (required)
        :param list[JournalEntry] body:
        :return: list[JournalEntry]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['journal_entry_id', 'credit_date', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method journalentriesactioncredit_and_book_journal_entry_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'journal_entry_id' is set
        if ('journal_entry_id' not in params or
                params['journal_entry_id'] is None):
            raise ValueError("Missing the required parameter `journal_entry_id` when calling `journalentriesactioncredit_and_book_journal_entry_post`")  # noqa: E501
        # verify the required parameter 'credit_date' is set
        if ('credit_date' not in params or
                params['credit_date'] is None):
            raise ValueError("Missing the required parameter `credit_date` when calling `journalentriesactioncredit_and_book_journal_entry_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'journal_entry_id' in params:
            path_params['journalEntryID'] = params['journal_entry_id']  # noqa: E501
        if 'credit_date' in params:
            path_params['creditDate'] = params['credit_date']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/journalentries?action=credit-and-book-journal-entry', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[JournalEntry]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def journalentriesactioncredit_and_book_journalentry_post(self, journal_entry_id, **kwargs):  # noqa: E501
        """journalentriesactioncredit_and_book_journalentry_post  # noqa: E501

        credit-and-book-journalentry Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.journalentriesactioncredit_and_book_journalentry_post(journal_entry_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object journal_entry_id: (required)
        :param list[JournalEntry] body:
        :return: list[JournalEntry]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.journalentriesactioncredit_and_book_journalentry_post_with_http_info(journal_entry_id, **kwargs)  # noqa: E501
        else:
            (data) = self.journalentriesactioncredit_and_book_journalentry_post_with_http_info(journal_entry_id, **kwargs)  # noqa: E501
            return data

    def journalentriesactioncredit_and_book_journalentry_post_with_http_info(self, journal_entry_id, **kwargs):  # noqa: E501
        """journalentriesactioncredit_and_book_journalentry_post  # noqa: E501

        credit-and-book-journalentry Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.journalentriesactioncredit_and_book_journalentry_post_with_http_info(journal_entry_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object journal_entry_id: (required)
        :param list[JournalEntry] body:
        :return: list[JournalEntry]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['journal_entry_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method journalentriesactioncredit_and_book_journalentry_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'journal_entry_id' is set
        if ('journal_entry_id' not in params or
                params['journal_entry_id'] is None):
            raise ValueError("Missing the required parameter `journal_entry_id` when calling `journalentriesactioncredit_and_book_journalentry_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'journal_entry_id' in params:
            path_params['journalEntryID'] = params['journal_entry_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/journalentries?action=credit-and-book-journalentry', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[JournalEntry]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def journalentriesactioncredit_journal_entry_post(self, journal_entry_number, credit_date, **kwargs):  # noqa: E501
        """journalentriesactioncredit_journal_entry_post  # noqa: E501

        credit-journal-entry Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.journalentriesactioncredit_journal_entry_post(journal_entry_number, credit_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object journal_entry_number: (required)
        :param Object credit_date: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.journalentriesactioncredit_journal_entry_post_with_http_info(journal_entry_number, credit_date, **kwargs)  # noqa: E501
        else:
            (data) = self.journalentriesactioncredit_journal_entry_post_with_http_info(journal_entry_number, credit_date, **kwargs)  # noqa: E501
            return data

    def journalentriesactioncredit_journal_entry_post_with_http_info(self, journal_entry_number, credit_date, **kwargs):  # noqa: E501
        """journalentriesactioncredit_journal_entry_post  # noqa: E501

        credit-journal-entry Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.journalentriesactioncredit_journal_entry_post_with_http_info(journal_entry_number, credit_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object journal_entry_number: (required)
        :param Object credit_date: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['journal_entry_number', 'credit_date']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method journalentriesactioncredit_journal_entry_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'journal_entry_number' is set
        if ('journal_entry_number' not in params or
                params['journal_entry_number'] is None):
            raise ValueError("Missing the required parameter `journal_entry_number` when calling `journalentriesactioncredit_journal_entry_post`")  # noqa: E501
        # verify the required parameter 'credit_date' is set
        if ('credit_date' not in params or
                params['credit_date'] is None):
            raise ValueError("Missing the required parameter `credit_date` when calling `journalentriesactioncredit_journal_entry_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'journal_entry_number' in params:
            path_params['journalEntryNumber'] = params['journal_entry_number']  # noqa: E501
        if 'credit_date' in params:
            path_params['creditDate'] = params['credit_date']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/journalentries?action=credit-journal-entry', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def journalentriesactioncredit_journalentry_post(self, journal_entry_number, **kwargs):  # noqa: E501
        """journalentriesactioncredit_journalentry_post  # noqa: E501

        credit-journalentry Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.journalentriesactioncredit_journalentry_post(journal_entry_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object journal_entry_number: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.journalentriesactioncredit_journalentry_post_with_http_info(journal_entry_number, **kwargs)  # noqa: E501
        else:
            (data) = self.journalentriesactioncredit_journalentry_post_with_http_info(journal_entry_number, **kwargs)  # noqa: E501
            return data

    def journalentriesactioncredit_journalentry_post_with_http_info(self, journal_entry_number, **kwargs):  # noqa: E501
        """journalentriesactioncredit_journalentry_post  # noqa: E501

        credit-journalentry Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.journalentriesactioncredit_journalentry_post_with_http_info(journal_entry_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object journal_entry_number: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['journal_entry_number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method journalentriesactioncredit_journalentry_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'journal_entry_number' is set
        if ('journal_entry_number' not in params or
                params['journal_entry_number'] is None):
            raise ValueError("Missing the required parameter `journal_entry_number` when calling `journalentriesactioncredit_journalentry_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'journal_entry_number' in params:
            path_params['journalEntryNumber'] = params['journal_entry_number']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/journalentries?action=credit-journalentry', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def journalentriesactiondelete_journal_entry_draft_group_delete(self, journal_entry_draft_group, **kwargs):  # noqa: E501
        """journalentriesactiondelete_journal_entry_draft_group_delete  # noqa: E501

        delete-journal-entry-draft-group Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.journalentriesactiondelete_journal_entry_draft_group_delete(journal_entry_draft_group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object journal_entry_draft_group: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.journalentriesactiondelete_journal_entry_draft_group_delete_with_http_info(journal_entry_draft_group, **kwargs)  # noqa: E501
        else:
            (data) = self.journalentriesactiondelete_journal_entry_draft_group_delete_with_http_info(journal_entry_draft_group, **kwargs)  # noqa: E501
            return data

    def journalentriesactiondelete_journal_entry_draft_group_delete_with_http_info(self, journal_entry_draft_group, **kwargs):  # noqa: E501
        """journalentriesactiondelete_journal_entry_draft_group_delete  # noqa: E501

        delete-journal-entry-draft-group Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.journalentriesactiondelete_journal_entry_draft_group_delete_with_http_info(journal_entry_draft_group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object journal_entry_draft_group: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['journal_entry_draft_group']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method journalentriesactiondelete_journal_entry_draft_group_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'journal_entry_draft_group' is set
        if ('journal_entry_draft_group' not in params or
                params['journal_entry_draft_group'] is None):
            raise ValueError("Missing the required parameter `journal_entry_draft_group` when calling `journalentriesactiondelete_journal_entry_draft_group_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'journal_entry_draft_group' in params:
            path_params['journalEntryDraftGroup'] = params['journal_entry_draft_group']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/journalentries?action=delete-journal-entry-draft-group', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def journalentriesactionget_journal_entry_data_get(self, batch_number, journal_entry_id, supplier_invoice_id, journal_entry_draft_group, **kwargs):  # noqa: E501
        """journalentriesactionget_journal_entry_data_get  # noqa: E501

        get-journal-entry-data Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.journalentriesactionget_journal_entry_data_get(batch_number, journal_entry_id, supplier_invoice_id, journal_entry_draft_group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object batch_number: (required)
        :param Object journal_entry_id: (required)
        :param Object supplier_invoice_id: (required)
        :param Object journal_entry_draft_group: (required)
        :return: list[JournalEntryData]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.journalentriesactionget_journal_entry_data_get_with_http_info(batch_number, journal_entry_id, supplier_invoice_id, journal_entry_draft_group, **kwargs)  # noqa: E501
        else:
            (data) = self.journalentriesactionget_journal_entry_data_get_with_http_info(batch_number, journal_entry_id, supplier_invoice_id, journal_entry_draft_group, **kwargs)  # noqa: E501
            return data

    def journalentriesactionget_journal_entry_data_get_with_http_info(self, batch_number, journal_entry_id, supplier_invoice_id, journal_entry_draft_group, **kwargs):  # noqa: E501
        """journalentriesactionget_journal_entry_data_get  # noqa: E501

        get-journal-entry-data Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.journalentriesactionget_journal_entry_data_get_with_http_info(batch_number, journal_entry_id, supplier_invoice_id, journal_entry_draft_group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object batch_number: (required)
        :param Object journal_entry_id: (required)
        :param Object supplier_invoice_id: (required)
        :param Object journal_entry_draft_group: (required)
        :return: list[JournalEntryData]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['batch_number', 'journal_entry_id', 'supplier_invoice_id', 'journal_entry_draft_group']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method journalentriesactionget_journal_entry_data_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'batch_number' is set
        if ('batch_number' not in params or
                params['batch_number'] is None):
            raise ValueError("Missing the required parameter `batch_number` when calling `journalentriesactionget_journal_entry_data_get`")  # noqa: E501
        # verify the required parameter 'journal_entry_id' is set
        if ('journal_entry_id' not in params or
                params['journal_entry_id'] is None):
            raise ValueError("Missing the required parameter `journal_entry_id` when calling `journalentriesactionget_journal_entry_data_get`")  # noqa: E501
        # verify the required parameter 'supplier_invoice_id' is set
        if ('supplier_invoice_id' not in params or
                params['supplier_invoice_id'] is None):
            raise ValueError("Missing the required parameter `supplier_invoice_id` when calling `journalentriesactionget_journal_entry_data_get`")  # noqa: E501
        # verify the required parameter 'journal_entry_draft_group' is set
        if ('journal_entry_draft_group' not in params or
                params['journal_entry_draft_group'] is None):
            raise ValueError("Missing the required parameter `journal_entry_draft_group` when calling `journalentriesactionget_journal_entry_data_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'batch_number' in params:
            path_params['batchNumber'] = params['batch_number']  # noqa: E501
        if 'journal_entry_id' in params:
            path_params['journalEntryID'] = params['journal_entry_id']  # noqa: E501
        if 'supplier_invoice_id' in params:
            path_params['supplierInvoiceID'] = params['supplier_invoice_id']  # noqa: E501
        if 'journal_entry_draft_group' in params:
            path_params['journalEntryDraftGroup'] = params['journal_entry_draft_group']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/journalentries?action=get-journal-entry-data', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[JournalEntryData]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def journalentriesactionget_journal_entry_period_data_get(self, account_id, **kwargs):  # noqa: E501
        """journalentriesactionget_journal_entry_period_data_get  # noqa: E501

        get-journal-entry-period-data Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.journalentriesactionget_journal_entry_period_data_get(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object account_id: (required)
        :return: list[JournalEntryPeriodData]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.journalentriesactionget_journal_entry_period_data_get_with_http_info(account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.journalentriesactionget_journal_entry_period_data_get_with_http_info(account_id, **kwargs)  # noqa: E501
            return data

    def journalentriesactionget_journal_entry_period_data_get_with_http_info(self, account_id, **kwargs):  # noqa: E501
        """journalentriesactionget_journal_entry_period_data_get  # noqa: E501

        get-journal-entry-period-data Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.journalentriesactionget_journal_entry_period_data_get_with_http_info(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object account_id: (required)
        :return: list[JournalEntryPeriodData]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method journalentriesactionget_journal_entry_period_data_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `journalentriesactionget_journal_entry_period_data_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['accountID'] = params['account_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/journalentries?action=get-journal-entry-period-data', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[JournalEntryPeriodData]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def journalentriesactionget_or_create_financial_year_get(self, current, **kwargs):  # noqa: E501
        """journalentriesactionget_or_create_financial_year_get  # noqa: E501

        get-or-create-financial-year Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.journalentriesactionget_or_create_financial_year_get(current, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object current: (required)
        :return: FinancialYear
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.journalentriesactionget_or_create_financial_year_get_with_http_info(current, **kwargs)  # noqa: E501
        else:
            (data) = self.journalentriesactionget_or_create_financial_year_get_with_http_info(current, **kwargs)  # noqa: E501
            return data

    def journalentriesactionget_or_create_financial_year_get_with_http_info(self, current, **kwargs):  # noqa: E501
        """journalentriesactionget_or_create_financial_year_get  # noqa: E501

        get-or-create-financial-year Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.journalentriesactionget_or_create_financial_year_get_with_http_info(current, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object current: (required)
        :return: FinancialYear
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['current']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method journalentriesactionget_or_create_financial_year_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'current' is set
        if ('current' not in params or
                params['current'] is None):
            raise ValueError("Missing the required parameter `current` when calling `journalentriesactionget_or_create_financial_year_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'current' in params:
            path_params['current'] = params['current']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/journalentries?action=get-or-create-financial-year', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FinancialYear',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def journalentriesactionnextjournalentrynumber_post(self, **kwargs):  # noqa: E501
        """journalentriesactionnextjournalentrynumber_post  # noqa: E501

        nextjournalentrynumber Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.journalentriesactionnextjournalentrynumber_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param JournalEntryData body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.journalentriesactionnextjournalentrynumber_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.journalentriesactionnextjournalentrynumber_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def journalentriesactionnextjournalentrynumber_post_with_http_info(self, **kwargs):  # noqa: E501
        """journalentriesactionnextjournalentrynumber_post  # noqa: E501

        nextjournalentrynumber Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.journalentriesactionnextjournalentrynumber_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param JournalEntryData body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method journalentriesactionnextjournalentrynumber_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/journalentries?action=nextjournalentrynumber', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def journalentriesactionsave_journal_entries_as_draft_post(self, **kwargs):  # noqa: E501
        """journalentriesactionsave_journal_entries_as_draft_post  # noqa: E501

        save-journal-entries-as-draft Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.journalentriesactionsave_journal_entries_as_draft_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[JournalEntry] body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.journalentriesactionsave_journal_entries_as_draft_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.journalentriesactionsave_journal_entries_as_draft_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def journalentriesactionsave_journal_entries_as_draft_post_with_http_info(self, **kwargs):  # noqa: E501
        """journalentriesactionsave_journal_entries_as_draft_post  # noqa: E501

        save-journal-entries-as-draft Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.journalentriesactionsave_journal_entries_as_draft_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[JournalEntry] body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method journalentriesactionsave_journal_entries_as_draft_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/journalentries?action=save-journal-entries-as-draft', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
