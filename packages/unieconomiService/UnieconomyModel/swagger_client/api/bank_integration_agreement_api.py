# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class BankIntegrationAgreementApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def bank_agreements_get(self, **kwargs):  # noqa: E501
        """bank_agreements_get  # noqa: E501

        Query BankIntegrationAgreement  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bank_agreements_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[BankIntegrationAgreement]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bank_agreements_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.bank_agreements_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def bank_agreements_get_with_http_info(self, **kwargs):  # noqa: E501
        """bank_agreements_get  # noqa: E501

        Query BankIntegrationAgreement  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bank_agreements_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[BankIntegrationAgreement]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bank_agreements_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bank-agreements', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[BankIntegrationAgreement]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bank_agreements_id_delete(self, id, **kwargs):  # noqa: E501
        """bank_agreements_id_delete  # noqa: E501

        Delete BankIntegrationAgreement  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bank_agreements_id_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: BankIntegrationAgreement
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bank_agreements_id_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.bank_agreements_id_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def bank_agreements_id_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """bank_agreements_id_delete  # noqa: E501

        Delete BankIntegrationAgreement  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bank_agreements_id_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: BankIntegrationAgreement
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bank_agreements_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bank_agreements_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bank-agreements/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BankIntegrationAgreement',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bank_agreements_id_get(self, id, **kwargs):  # noqa: E501
        """bank_agreements_id_get  # noqa: E501

        Get BankIntegrationAgreement  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bank_agreements_id_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: BankIntegrationAgreement
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bank_agreements_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.bank_agreements_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def bank_agreements_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """bank_agreements_id_get  # noqa: E501

        Get BankIntegrationAgreement  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bank_agreements_id_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: BankIntegrationAgreement
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bank_agreements_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bank_agreements_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bank-agreements/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BankIntegrationAgreement',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bank_agreements_id_put(self, body, id, **kwargs):  # noqa: E501
        """bank_agreements_id_put  # noqa: E501

        Update BankIntegrationAgreement  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bank_agreements_id_put(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BankIntegrationAgreement body: (required)
        :param int id: (required)
        :return: BankIntegrationAgreement
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bank_agreements_id_put_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.bank_agreements_id_put_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def bank_agreements_id_put_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """bank_agreements_id_put  # noqa: E501

        Update BankIntegrationAgreement  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bank_agreements_id_put_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BankIntegrationAgreement body: (required)
        :param int id: (required)
        :return: BankIntegrationAgreement
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bank_agreements_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `bank_agreements_id_put`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bank_agreements_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bank-agreements/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BankIntegrationAgreement',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bank_agreements_idactionset_default_put(self, id, **kwargs):  # noqa: E501
        """bank_agreements_idactionset_default_put  # noqa: E501

        set-default Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bank_agreements_idactionset_default_put(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: BankIntegrationAgreement
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bank_agreements_idactionset_default_put_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.bank_agreements_idactionset_default_put_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def bank_agreements_idactionset_default_put_with_http_info(self, id, **kwargs):  # noqa: E501
        """bank_agreements_idactionset_default_put  # noqa: E501

        set-default Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bank_agreements_idactionset_default_put_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: BankIntegrationAgreement
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bank_agreements_idactionset_default_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bank_agreements_idactionset_default_put`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bank_agreements_idactionset_default_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bank-agreements/{id}?action=set-default', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BankIntegrationAgreement',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bank_agreements_idactionupdate_bank_properties_put(self, id2, id, **kwargs):  # noqa: E501
        """bank_agreements_idactionupdate_bank_properties_put  # noqa: E501

        update-bank-properties Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bank_agreements_idactionupdate_bank_properties_put(id2, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id2: (required)
        :param Object id: (required)
        :param ZdataUpdateBankProperties body:
        :return: BankIntegrationAgreement
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bank_agreements_idactionupdate_bank_properties_put_with_http_info(id2, id, **kwargs)  # noqa: E501
        else:
            (data) = self.bank_agreements_idactionupdate_bank_properties_put_with_http_info(id2, id, **kwargs)  # noqa: E501
            return data

    def bank_agreements_idactionupdate_bank_properties_put_with_http_info(self, id2, id, **kwargs):  # noqa: E501
        """bank_agreements_idactionupdate_bank_properties_put  # noqa: E501

        update-bank-properties Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bank_agreements_idactionupdate_bank_properties_put_with_http_info(id2, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id2: (required)
        :param Object id: (required)
        :param ZdataUpdateBankProperties body:
        :return: BankIntegrationAgreement
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id2', 'id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bank_agreements_idactionupdate_bank_properties_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id2' is set
        if ('id2' not in params or
                params['id2'] is None):
            raise ValueError("Missing the required parameter `id2` when calling `bank_agreements_idactionupdate_bank_properties_put`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bank_agreements_idactionupdate_bank_properties_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bank-agreements/{id}?action=update-bank-properties', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BankIntegrationAgreement',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bank_agreements_idactionupdate_status_put(self, id2, id, **kwargs):  # noqa: E501
        """bank_agreements_idactionupdate_status_put  # noqa: E501

        update-status Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bank_agreements_idactionupdate_status_put(id2, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id2: (required)
        :param Object id: (required)
        :param str body:
        :return: BankIntegrationAgreement
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bank_agreements_idactionupdate_status_put_with_http_info(id2, id, **kwargs)  # noqa: E501
        else:
            (data) = self.bank_agreements_idactionupdate_status_put_with_http_info(id2, id, **kwargs)  # noqa: E501
            return data

    def bank_agreements_idactionupdate_status_put_with_http_info(self, id2, id, **kwargs):  # noqa: E501
        """bank_agreements_idactionupdate_status_put  # noqa: E501

        update-status Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bank_agreements_idactionupdate_status_put_with_http_info(id2, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id2: (required)
        :param Object id: (required)
        :param str body:
        :return: BankIntegrationAgreement
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id2', 'id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bank_agreements_idactionupdate_status_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id2' is set
        if ('id2' not in params or
                params['id2'] is None):
            raise ValueError("Missing the required parameter `id2` when calling `bank_agreements_idactionupdate_status_put`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bank_agreements_idactionupdate_status_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bank-agreements/{id}?action=update-status', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BankIntegrationAgreement',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bank_agreementsactionadd_autobank_user_post(self, password, **kwargs):  # noqa: E501
        """bank_agreementsactionadd_autobank_user_post  # noqa: E501

        add-autobank-user Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bank_agreementsactionadd_autobank_user_post(password, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object password: (required)
        :param AutobankUserDTO body:
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bank_agreementsactionadd_autobank_user_post_with_http_info(password, **kwargs)  # noqa: E501
        else:
            (data) = self.bank_agreementsactionadd_autobank_user_post_with_http_info(password, **kwargs)  # noqa: E501
            return data

    def bank_agreementsactionadd_autobank_user_post_with_http_info(self, password, **kwargs):  # noqa: E501
        """bank_agreementsactionadd_autobank_user_post  # noqa: E501

        add-autobank-user Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bank_agreementsactionadd_autobank_user_post_with_http_info(password, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object password: (required)
        :param AutobankUserDTO body:
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['password', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bank_agreementsactionadd_autobank_user_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'password' is set
        if ('password' not in params or
                params['password'] is None):
            raise ValueError("Missing the required parameter `password` when calling `bank_agreementsactionadd_autobank_user_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'password' in params:
            path_params['password'] = params['password']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bank-agreements?action=add-autobank-user', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='User',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bank_agreementsactionauth_code_post(self, **kwargs):  # noqa: E501
        """bank_agreementsactionauth_code_post  # noqa: E501

        auth-code Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bank_agreementsactionauth_code_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bank_agreementsactionauth_code_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.bank_agreementsactionauth_code_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def bank_agreementsactionauth_code_post_with_http_info(self, **kwargs):  # noqa: E501
        """bank_agreementsactionauth_code_post  # noqa: E501

        auth-code Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bank_agreementsactionauth_code_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bank_agreementsactionauth_code_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bank-agreements?action=auth-code', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bank_agreementsactioncreate_initial_company_and_bank_accounts_agreement_post(self, **kwargs):  # noqa: E501
        """bank_agreementsactioncreate_initial_company_and_bank_accounts_agreement_post  # noqa: E501

        create-initial-company-and-bank-accounts-agreement Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bank_agreementsactioncreate_initial_company_and_bank_accounts_agreement_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateBankIntegrationDTO body:
        :return: BankIntegrationAgreement
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bank_agreementsactioncreate_initial_company_and_bank_accounts_agreement_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.bank_agreementsactioncreate_initial_company_and_bank_accounts_agreement_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def bank_agreementsactioncreate_initial_company_and_bank_accounts_agreement_post_with_http_info(self, **kwargs):  # noqa: E501
        """bank_agreementsactioncreate_initial_company_and_bank_accounts_agreement_post  # noqa: E501

        create-initial-company-and-bank-accounts-agreement Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bank_agreementsactioncreate_initial_company_and_bank_accounts_agreement_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateBankIntegrationDTO body:
        :return: BankIntegrationAgreement
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bank_agreementsactioncreate_initial_company_and_bank_accounts_agreement_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bank-agreements?action=create-initial-company-and-bank-accounts-agreement', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BankIntegrationAgreement',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bank_agreementsactioncreate_integration_post(self, **kwargs):  # noqa: E501
        """bank_agreementsactioncreate_integration_post  # noqa: E501

        create-integration Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bank_agreementsactioncreate_integration_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateBankIntegrationDTO body:
        :return: BankIntegrationAgreement
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bank_agreementsactioncreate_integration_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.bank_agreementsactioncreate_integration_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def bank_agreementsactioncreate_integration_post_with_http_info(self, **kwargs):  # noqa: E501
        """bank_agreementsactioncreate_integration_post  # noqa: E501

        create-integration Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bank_agreementsactioncreate_integration_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateBankIntegrationDTO body:
        :return: BankIntegrationAgreement
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bank_agreementsactioncreate_integration_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bank-agreements?action=create-integration', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BankIntegrationAgreement',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bank_agreementsactiondelete_all_bankagreements_put(self, email_address, **kwargs):  # noqa: E501
        """bank_agreementsactiondelete_all_bankagreements_put  # noqa: E501

        delete-all-bankagreements Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bank_agreementsactiondelete_all_bankagreements_put(email_address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object email_address: (required)
        :return: list[BankAccount]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bank_agreementsactiondelete_all_bankagreements_put_with_http_info(email_address, **kwargs)  # noqa: E501
        else:
            (data) = self.bank_agreementsactiondelete_all_bankagreements_put_with_http_info(email_address, **kwargs)  # noqa: E501
            return data

    def bank_agreementsactiondelete_all_bankagreements_put_with_http_info(self, email_address, **kwargs):  # noqa: E501
        """bank_agreementsactiondelete_all_bankagreements_put  # noqa: E501

        delete-all-bankagreements Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bank_agreementsactiondelete_all_bankagreements_put_with_http_info(email_address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object email_address: (required)
        :return: list[BankAccount]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['email_address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bank_agreementsactiondelete_all_bankagreements_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'email_address' is set
        if ('email_address' not in params or
                params['email_address'] is None):
            raise ValueError("Missing the required parameter `email_address` when calling `bank_agreementsactiondelete_all_bankagreements_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'email_address' in params:
            path_params['emailAddress'] = params['email_address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bank-agreements?action=delete-all-bankagreements', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[BankAccount]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bank_agreementsactiondelete_bankagreements_put(self, bank_account_id, integration_settings, email_address, **kwargs):  # noqa: E501
        """bank_agreementsactiondelete_bankagreements_put  # noqa: E501

        delete-bankagreements Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bank_agreementsactiondelete_bankagreements_put(bank_account_id, integration_settings, email_address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object bank_account_id: (required)
        :param Object integration_settings: (required)
        :param Object email_address: (required)
        :return: list[BankAccount]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bank_agreementsactiondelete_bankagreements_put_with_http_info(bank_account_id, integration_settings, email_address, **kwargs)  # noqa: E501
        else:
            (data) = self.bank_agreementsactiondelete_bankagreements_put_with_http_info(bank_account_id, integration_settings, email_address, **kwargs)  # noqa: E501
            return data

    def bank_agreementsactiondelete_bankagreements_put_with_http_info(self, bank_account_id, integration_settings, email_address, **kwargs):  # noqa: E501
        """bank_agreementsactiondelete_bankagreements_put  # noqa: E501

        delete-bankagreements Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bank_agreementsactiondelete_bankagreements_put_with_http_info(bank_account_id, integration_settings, email_address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object bank_account_id: (required)
        :param Object integration_settings: (required)
        :param Object email_address: (required)
        :return: list[BankAccount]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bank_account_id', 'integration_settings', 'email_address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bank_agreementsactiondelete_bankagreements_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bank_account_id' is set
        if ('bank_account_id' not in params or
                params['bank_account_id'] is None):
            raise ValueError("Missing the required parameter `bank_account_id` when calling `bank_agreementsactiondelete_bankagreements_put`")  # noqa: E501
        # verify the required parameter 'integration_settings' is set
        if ('integration_settings' not in params or
                params['integration_settings'] is None):
            raise ValueError("Missing the required parameter `integration_settings` when calling `bank_agreementsactiondelete_bankagreements_put`")  # noqa: E501
        # verify the required parameter 'email_address' is set
        if ('email_address' not in params or
                params['email_address'] is None):
            raise ValueError("Missing the required parameter `email_address` when calling `bank_agreementsactiondelete_bankagreements_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bank_account_id' in params:
            path_params['bankAccountID'] = params['bank_account_id']  # noqa: E501
        if 'integration_settings' in params:
            path_params['integrationSettings'] = params['integration_settings']  # noqa: E501
        if 'email_address' in params:
            path_params['emailAddress'] = params['email_address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bank-agreements?action=delete-bankagreements', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[BankAccount]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bank_agreementsactionget_agreement_templates_get(self, password, **kwargs):  # noqa: E501
        """bank_agreementsactionget_agreement_templates_get  # noqa: E501

        get-agreement-templates Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bank_agreementsactionget_agreement_templates_get(password, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object password: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bank_agreementsactionget_agreement_templates_get_with_http_info(password, **kwargs)  # noqa: E501
        else:
            (data) = self.bank_agreementsactionget_agreement_templates_get_with_http_info(password, **kwargs)  # noqa: E501
            return data

    def bank_agreementsactionget_agreement_templates_get_with_http_info(self, password, **kwargs):  # noqa: E501
        """bank_agreementsactionget_agreement_templates_get  # noqa: E501

        get-agreement-templates Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bank_agreementsactionget_agreement_templates_get_with_http_info(password, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object password: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['password']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bank_agreementsactionget_agreement_templates_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'password' is set
        if ('password' not in params or
                params['password'] is None):
            raise ValueError("Missing the required parameter `password` when calling `bank_agreementsactionget_agreement_templates_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'password' in params:
            path_params['password'] = params['password']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bank-agreements?action=get-agreement-templates', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bank_agreementsactionget_direct_bank_agreement_get(self, service_provider, **kwargs):  # noqa: E501
        """bank_agreementsactionget_direct_bank_agreement_get  # noqa: E501

        get-direct-bank-agreement Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bank_agreementsactionget_direct_bank_agreement_get(service_provider, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object service_provider: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bank_agreementsactionget_direct_bank_agreement_get_with_http_info(service_provider, **kwargs)  # noqa: E501
        else:
            (data) = self.bank_agreementsactionget_direct_bank_agreement_get_with_http_info(service_provider, **kwargs)  # noqa: E501
            return data

    def bank_agreementsactionget_direct_bank_agreement_get_with_http_info(self, service_provider, **kwargs):  # noqa: E501
        """bank_agreementsactionget_direct_bank_agreement_get  # noqa: E501

        get-direct-bank-agreement Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bank_agreementsactionget_direct_bank_agreement_get_with_http_info(service_provider, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object service_provider: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_provider']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bank_agreementsactionget_direct_bank_agreement_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_provider' is set
        if ('service_provider' not in params or
                params['service_provider'] is None):
            raise ValueError("Missing the required parameter `service_provider` when calling `bank_agreementsactionget_direct_bank_agreement_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_provider' in params:
            path_params['serviceProvider'] = params['service_provider']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bank-agreements?action=get-direct-bank-agreement', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bank_agreementsactionorder_bank_integration_change_post(self, **kwargs):  # noqa: E501
        """bank_agreementsactionorder_bank_integration_change_post  # noqa: E501

        order-bank-integration-change Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bank_agreementsactionorder_bank_integration_change_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bank_agreementsactionorder_bank_integration_change_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.bank_agreementsactionorder_bank_integration_change_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def bank_agreementsactionorder_bank_integration_change_post_with_http_info(self, **kwargs):  # noqa: E501
        """bank_agreementsactionorder_bank_integration_change_post  # noqa: E501

        order-bank-integration-change Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bank_agreementsactionorder_bank_integration_change_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bank_agreementsactionorder_bank_integration_change_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bank-agreements?action=order-bank-integration-change', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bank_agreementsactionupdate_service_put(self, **kwargs):  # noqa: E501
        """bank_agreementsactionupdate_service_put  # noqa: E501

        update-service Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bank_agreementsactionupdate_service_put(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateServiceStatusDTO body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bank_agreementsactionupdate_service_put_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.bank_agreementsactionupdate_service_put_with_http_info(**kwargs)  # noqa: E501
            return data

    def bank_agreementsactionupdate_service_put_with_http_info(self, **kwargs):  # noqa: E501
        """bank_agreementsactionupdate_service_put  # noqa: E501

        update-service Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bank_agreementsactionupdate_service_put_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateServiceStatusDTO body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bank_agreementsactionupdate_service_put" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bank-agreements?action=update-service', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bank_agreementsactionupdate_serviceid_put(self, **kwargs):  # noqa: E501
        """bank_agreementsactionupdate_serviceid_put  # noqa: E501

        update-serviceid Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bank_agreementsactionupdate_serviceid_put(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateServiceIDDTO body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bank_agreementsactionupdate_serviceid_put_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.bank_agreementsactionupdate_serviceid_put_with_http_info(**kwargs)  # noqa: E501
            return data

    def bank_agreementsactionupdate_serviceid_put_with_http_info(self, **kwargs):  # noqa: E501
        """bank_agreementsactionupdate_serviceid_put  # noqa: E501

        update-serviceid Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bank_agreementsactionupdate_serviceid_put_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateServiceIDDTO body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bank_agreementsactionupdate_serviceid_put" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bank-agreements?action=update-serviceid', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bank_agreementsactionvalidate_password_post(self, **kwargs):  # noqa: E501
        """bank_agreementsactionvalidate_password_post  # noqa: E501

        validate-password Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bank_agreementsactionvalidate_password_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body:
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bank_agreementsactionvalidate_password_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.bank_agreementsactionvalidate_password_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def bank_agreementsactionvalidate_password_post_with_http_info(self, **kwargs):  # noqa: E501
        """bank_agreementsactionvalidate_password_post  # noqa: E501

        validate-password Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bank_agreementsactionvalidate_password_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body:
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bank_agreementsactionvalidate_password_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bank-agreements?action=validate-password', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
