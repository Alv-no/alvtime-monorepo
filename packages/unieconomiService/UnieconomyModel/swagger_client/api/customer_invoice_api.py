# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class CustomerInvoiceApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def invoices_get(self, **kwargs):  # noqa: E501
        """invoices_get  # noqa: E501

        Query CustomerInvoice  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[CustomerInvoice]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invoices_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.invoices_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def invoices_get_with_http_info(self, **kwargs):  # noqa: E501
        """invoices_get  # noqa: E501

        Query CustomerInvoice  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[CustomerInvoice]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoices_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/invoices', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[CustomerInvoice]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invoices_id_delete(self, id, **kwargs):  # noqa: E501
        """invoices_id_delete  # noqa: E501

        Delete CustomerInvoice  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_id_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: CustomerInvoice
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invoices_id_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.invoices_id_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def invoices_id_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """invoices_id_delete  # noqa: E501

        Delete CustomerInvoice  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_id_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: CustomerInvoice
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoices_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `invoices_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/invoices/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CustomerInvoice',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invoices_id_get(self, id, **kwargs):  # noqa: E501
        """invoices_id_get  # noqa: E501

        Get CustomerInvoice  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_id_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: CustomerInvoice
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invoices_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.invoices_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def invoices_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """invoices_id_get  # noqa: E501

        Get CustomerInvoice  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_id_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: CustomerInvoice
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoices_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `invoices_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/invoices/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CustomerInvoice',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invoices_id_put(self, body, id, **kwargs):  # noqa: E501
        """invoices_id_put  # noqa: E501

        Update CustomerInvoice  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_id_put(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CustomerInvoice body: (required)
        :param int id: (required)
        :return: CustomerInvoice
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invoices_id_put_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.invoices_id_put_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def invoices_id_put_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """invoices_id_put  # noqa: E501

        Update CustomerInvoice  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_id_put_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CustomerInvoice body: (required)
        :param int id: (required)
        :return: CustomerInvoice
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoices_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `invoices_id_put`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `invoices_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/invoices/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CustomerInvoice',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invoices_idactionaccept_decline_aprila_offer_post(self, id2, id, aprila_order_id, accept_offer, **kwargs):  # noqa: E501
        """invoices_idactionaccept_decline_aprila_offer_post  # noqa: E501

        accept-decline-aprila-offer Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_idactionaccept_decline_aprila_offer_post(id2, id, aprila_order_id, accept_offer, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id2: (required)
        :param Object id: (required)
        :param Object aprila_order_id: (required)
        :param Object accept_offer: (required)
        :param OrderOffer body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invoices_idactionaccept_decline_aprila_offer_post_with_http_info(id2, id, aprila_order_id, accept_offer, **kwargs)  # noqa: E501
        else:
            (data) = self.invoices_idactionaccept_decline_aprila_offer_post_with_http_info(id2, id, aprila_order_id, accept_offer, **kwargs)  # noqa: E501
            return data

    def invoices_idactionaccept_decline_aprila_offer_post_with_http_info(self, id2, id, aprila_order_id, accept_offer, **kwargs):  # noqa: E501
        """invoices_idactionaccept_decline_aprila_offer_post  # noqa: E501

        accept-decline-aprila-offer Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_idactionaccept_decline_aprila_offer_post_with_http_info(id2, id, aprila_order_id, accept_offer, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id2: (required)
        :param Object id: (required)
        :param Object aprila_order_id: (required)
        :param Object accept_offer: (required)
        :param OrderOffer body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id2', 'id', 'aprila_order_id', 'accept_offer', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoices_idactionaccept_decline_aprila_offer_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id2' is set
        if ('id2' not in params or
                params['id2'] is None):
            raise ValueError("Missing the required parameter `id2` when calling `invoices_idactionaccept_decline_aprila_offer_post`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `invoices_idactionaccept_decline_aprila_offer_post`")  # noqa: E501
        # verify the required parameter 'aprila_order_id' is set
        if ('aprila_order_id' not in params or
                params['aprila_order_id'] is None):
            raise ValueError("Missing the required parameter `aprila_order_id` when calling `invoices_idactionaccept_decline_aprila_offer_post`")  # noqa: E501
        # verify the required parameter 'accept_offer' is set
        if ('accept_offer' not in params or
                params['accept_offer'] is None):
            raise ValueError("Missing the required parameter `accept_offer` when calling `invoices_idactionaccept_decline_aprila_offer_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'aprila_order_id' in params:
            path_params['aprilaOrderId'] = params['aprila_order_id']  # noqa: E501
        if 'accept_offer' in params:
            path_params['acceptOffer'] = params['accept_offer']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/invoices/{id}?action=accept-decline-aprila-offer', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invoices_idactioncalculate_vat_summary_get(self, id, **kwargs):  # noqa: E501
        """invoices_idactioncalculate_vat_summary_get  # noqa: E501

        calculate-vat-summary Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_idactioncalculate_vat_summary_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: list[VatCalculationSummary]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invoices_idactioncalculate_vat_summary_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.invoices_idactioncalculate_vat_summary_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def invoices_idactioncalculate_vat_summary_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """invoices_idactioncalculate_vat_summary_get  # noqa: E501

        calculate-vat-summary Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_idactioncalculate_vat_summary_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: list[VatCalculationSummary]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoices_idactioncalculate_vat_summary_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `invoices_idactioncalculate_vat_summary_get`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `invoices_idactioncalculate_vat_summary_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/invoices/{id}?action=calculate-vat-summary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[VatCalculationSummary]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invoices_idactioncreate_credit_draft_invoice_put(self, id, **kwargs):  # noqa: E501
        """invoices_idactioncreate_credit_draft_invoice_put  # noqa: E501

        create-credit-draft-invoice Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_idactioncreate_credit_draft_invoice_put(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: CustomerInvoice
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invoices_idactioncreate_credit_draft_invoice_put_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.invoices_idactioncreate_credit_draft_invoice_put_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def invoices_idactioncreate_credit_draft_invoice_put_with_http_info(self, id, **kwargs):  # noqa: E501
        """invoices_idactioncreate_credit_draft_invoice_put  # noqa: E501

        create-credit-draft-invoice Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_idactioncreate_credit_draft_invoice_put_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: CustomerInvoice
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoices_idactioncreate_credit_draft_invoice_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `invoices_idactioncreate_credit_draft_invoice_put`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `invoices_idactioncreate_credit_draft_invoice_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/invoices/{id}?action=create-credit-draft-invoice', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CustomerInvoice',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invoices_idactioncreate_invoice_journalentrydraft_put(self, id, **kwargs):  # noqa: E501
        """invoices_idactioncreate_invoice_journalentrydraft_put  # noqa: E501

        create-invoice-journalentrydraft Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_idactioncreate_invoice_journalentrydraft_put(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: JournalEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invoices_idactioncreate_invoice_journalentrydraft_put_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.invoices_idactioncreate_invoice_journalentrydraft_put_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def invoices_idactioncreate_invoice_journalentrydraft_put_with_http_info(self, id, **kwargs):  # noqa: E501
        """invoices_idactioncreate_invoice_journalentrydraft_put  # noqa: E501

        create-invoice-journalentrydraft Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_idactioncreate_invoice_journalentrydraft_put_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: JournalEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoices_idactioncreate_invoice_journalentrydraft_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `invoices_idactioncreate_invoice_journalentrydraft_put`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `invoices_idactioncreate_invoice_journalentrydraft_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/invoices/{id}?action=create-invoice-journalentrydraft', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JournalEntry',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invoices_idactionfulfill_aprila_offer_post(self, id, **kwargs):  # noqa: E501
        """invoices_idactionfulfill_aprila_offer_post  # noqa: E501

        fulfill-aprila-offer Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_idactionfulfill_aprila_offer_post(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invoices_idactionfulfill_aprila_offer_post_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.invoices_idactionfulfill_aprila_offer_post_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def invoices_idactionfulfill_aprila_offer_post_with_http_info(self, id, **kwargs):  # noqa: E501
        """invoices_idactionfulfill_aprila_offer_post  # noqa: E501

        fulfill-aprila-offer Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_idactionfulfill_aprila_offer_post_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoices_idactionfulfill_aprila_offer_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `invoices_idactionfulfill_aprila_offer_post`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `invoices_idactionfulfill_aprila_offer_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/invoices/{id}?action=fulfill-aprila-offer', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invoices_idactionget_aprila_offer_get(self, id, **kwargs):  # noqa: E501
        """invoices_idactionget_aprila_offer_get  # noqa: E501

        get-aprila-offer Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_idactionget_aprila_offer_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invoices_idactionget_aprila_offer_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.invoices_idactionget_aprila_offer_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def invoices_idactionget_aprila_offer_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """invoices_idactionget_aprila_offer_get  # noqa: E501

        get-aprila-offer Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_idactionget_aprila_offer_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoices_idactionget_aprila_offer_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `invoices_idactionget_aprila_offer_get`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `invoices_idactionget_aprila_offer_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/invoices/{id}?action=get-aprila-offer', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invoices_idactionget_payments_get(self, id, **kwargs):  # noqa: E501
        """invoices_idactionget_payments_get  # noqa: E501

        get-payments Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_idactionget_payments_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: list[InvoicePayment]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invoices_idactionget_payments_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.invoices_idactionget_payments_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def invoices_idactionget_payments_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """invoices_idactionget_payments_get  # noqa: E501

        get-payments Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_idactionget_payments_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: list[InvoicePayment]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoices_idactionget_payments_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `invoices_idactionget_payments_get`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `invoices_idactionget_payments_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/invoices/{id}?action=get-payments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[InvoicePayment]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invoices_idactioninvoice_post(self, id, **kwargs):  # noqa: E501
        """invoices_idactioninvoice_post  # noqa: E501

        invoice Transition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_idactioninvoice_post(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invoices_idactioninvoice_post_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.invoices_idactioninvoice_post_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def invoices_idactioninvoice_post_with_http_info(self, id, **kwargs):  # noqa: E501
        """invoices_idactioninvoice_post  # noqa: E501

        invoice Transition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_idactioninvoice_post_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoices_idactioninvoice_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `invoices_idactioninvoice_post`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `invoices_idactioninvoice_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/invoices/{id}?action=invoice', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invoices_idactionnext_get(self, id, **kwargs):  # noqa: E501
        """invoices_idactionnext_get  # noqa: E501

        next Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_idactionnext_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: CustomerInvoice
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invoices_idactionnext_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.invoices_idactionnext_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def invoices_idactionnext_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """invoices_idactionnext_get  # noqa: E501

        next Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_idactionnext_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: CustomerInvoice
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoices_idactionnext_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `invoices_idactionnext_get`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `invoices_idactionnext_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/invoices/{id}?action=next', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CustomerInvoice',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invoices_idactionpay_invoice_put(self, id2, id, **kwargs):  # noqa: E501
        """invoices_idactionpay_invoice_put  # noqa: E501

        payInvoice Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_idactionpay_invoice_put(id2, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id2: (required)
        :param Object id: (required)
        :param InvoicePaymentData body:
        :return: JournalEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invoices_idactionpay_invoice_put_with_http_info(id2, id, **kwargs)  # noqa: E501
        else:
            (data) = self.invoices_idactionpay_invoice_put_with_http_info(id2, id, **kwargs)  # noqa: E501
            return data

    def invoices_idactionpay_invoice_put_with_http_info(self, id2, id, **kwargs):  # noqa: E501
        """invoices_idactionpay_invoice_put  # noqa: E501

        payInvoice Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_idactionpay_invoice_put_with_http_info(id2, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id2: (required)
        :param Object id: (required)
        :param InvoicePaymentData body:
        :return: JournalEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id2', 'id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoices_idactionpay_invoice_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id2' is set
        if ('id2' not in params or
                params['id2'] is None):
            raise ValueError("Missing the required parameter `id2` when calling `invoices_idactionpay_invoice_put`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `invoices_idactionpay_invoice_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/invoices/{id}?action=payInvoice', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JournalEntry',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invoices_idactionpay_invoice_with_number_series_id_put(self, id2, id, number_series_id, **kwargs):  # noqa: E501
        """invoices_idactionpay_invoice_with_number_series_id_put  # noqa: E501

        pay-invoice-with-number-series-id Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_idactionpay_invoice_with_number_series_id_put(id2, id, number_series_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id2: (required)
        :param Object id: (required)
        :param Object number_series_id: (required)
        :param InvoicePaymentData body:
        :return: JournalEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invoices_idactionpay_invoice_with_number_series_id_put_with_http_info(id2, id, number_series_id, **kwargs)  # noqa: E501
        else:
            (data) = self.invoices_idactionpay_invoice_with_number_series_id_put_with_http_info(id2, id, number_series_id, **kwargs)  # noqa: E501
            return data

    def invoices_idactionpay_invoice_with_number_series_id_put_with_http_info(self, id2, id, number_series_id, **kwargs):  # noqa: E501
        """invoices_idactionpay_invoice_with_number_series_id_put  # noqa: E501

        pay-invoice-with-number-series-id Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_idactionpay_invoice_with_number_series_id_put_with_http_info(id2, id, number_series_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id2: (required)
        :param Object id: (required)
        :param Object number_series_id: (required)
        :param InvoicePaymentData body:
        :return: JournalEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id2', 'id', 'number_series_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoices_idactionpay_invoice_with_number_series_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id2' is set
        if ('id2' not in params or
                params['id2'] is None):
            raise ValueError("Missing the required parameter `id2` when calling `invoices_idactionpay_invoice_with_number_series_id_put`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `invoices_idactionpay_invoice_with_number_series_id_put`")  # noqa: E501
        # verify the required parameter 'number_series_id' is set
        if ('number_series_id' not in params or
                params['number_series_id'] is None):
            raise ValueError("Missing the required parameter `number_series_id` when calling `invoices_idactionpay_invoice_with_number_series_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'number_series_id' in params:
            path_params['numberSeriesID'] = params['number_series_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/invoices/{id}?action=pay-invoice-with-number-series-id', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JournalEntry',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invoices_idactionpay_post(self, id, **kwargs):  # noqa: E501
        """invoices_idactionpay_post  # noqa: E501

        pay Transition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_idactionpay_post(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invoices_idactionpay_post_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.invoices_idactionpay_post_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def invoices_idactionpay_post_with_http_info(self, id, **kwargs):  # noqa: E501
        """invoices_idactionpay_post  # noqa: E501

        pay Transition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_idactionpay_post_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoices_idactionpay_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `invoices_idactionpay_post`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `invoices_idactionpay_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/invoices/{id}?action=pay', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invoices_idactionprevious_get(self, id, **kwargs):  # noqa: E501
        """invoices_idactionprevious_get  # noqa: E501

        previous Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_idactionprevious_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: CustomerInvoice
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invoices_idactionprevious_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.invoices_idactionprevious_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def invoices_idactionprevious_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """invoices_idactionprevious_get  # noqa: E501

        previous Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_idactionprevious_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: CustomerInvoice
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoices_idactionprevious_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `invoices_idactionprevious_get`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `invoices_idactionprevious_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/invoices/{id}?action=previous', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CustomerInvoice',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invoices_idactionset_customer_invoice_printstatus_put(self, id, print_status, **kwargs):  # noqa: E501
        """invoices_idactionset_customer_invoice_printstatus_put  # noqa: E501

        set-customer-invoice-printstatus Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_idactionset_customer_invoice_printstatus_put(id, print_status, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :param Object print_status: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invoices_idactionset_customer_invoice_printstatus_put_with_http_info(id, print_status, **kwargs)  # noqa: E501
        else:
            (data) = self.invoices_idactionset_customer_invoice_printstatus_put_with_http_info(id, print_status, **kwargs)  # noqa: E501
            return data

    def invoices_idactionset_customer_invoice_printstatus_put_with_http_info(self, id, print_status, **kwargs):  # noqa: E501
        """invoices_idactionset_customer_invoice_printstatus_put  # noqa: E501

        set-customer-invoice-printstatus Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_idactionset_customer_invoice_printstatus_put_with_http_info(id, print_status, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :param Object print_status: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id', 'print_status']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoices_idactionset_customer_invoice_printstatus_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `invoices_idactionset_customer_invoice_printstatus_put`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `invoices_idactionset_customer_invoice_printstatus_put`")  # noqa: E501
        # verify the required parameter 'print_status' is set
        if ('print_status' not in params or
                params['print_status'] is None):
            raise ValueError("Missing the required parameter `print_status` when calling `invoices_idactionset_customer_invoice_printstatus_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id' in params:
            path_params['ID'] = params['id']  # noqa: E501
        if 'print_status' in params:
            path_params['printStatus'] = params['print_status']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/invoices/{id}?action=set-customer-invoice-printstatus', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invoices_idactiontoggle_reminder_stop_put(self, id, **kwargs):  # noqa: E501
        """invoices_idactiontoggle_reminder_stop_put  # noqa: E501

        toggle-reminder-stop Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_idactiontoggle_reminder_stop_put(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invoices_idactiontoggle_reminder_stop_put_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.invoices_idactiontoggle_reminder_stop_put_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def invoices_idactiontoggle_reminder_stop_put_with_http_info(self, id, **kwargs):  # noqa: E501
        """invoices_idactiontoggle_reminder_stop_put  # noqa: E501

        toggle-reminder-stop Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_idactiontoggle_reminder_stop_put_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoices_idactiontoggle_reminder_stop_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `invoices_idactiontoggle_reminder_stop_put`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `invoices_idactiontoggle_reminder_stop_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/invoices/{id}?action=toggle-reminder-stop', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invoices_idactionupdate_external_status_put(self, id2, id, **kwargs):  # noqa: E501
        """invoices_idactionupdate_external_status_put  # noqa: E501

        update-external-status Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_idactionupdate_external_status_put(id2, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id2: (required)
        :param Object id: (required)
        :param int body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invoices_idactionupdate_external_status_put_with_http_info(id2, id, **kwargs)  # noqa: E501
        else:
            (data) = self.invoices_idactionupdate_external_status_put_with_http_info(id2, id, **kwargs)  # noqa: E501
            return data

    def invoices_idactionupdate_external_status_put_with_http_info(self, id2, id, **kwargs):  # noqa: E501
        """invoices_idactionupdate_external_status_put  # noqa: E501

        update-external-status Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_idactionupdate_external_status_put_with_http_info(id2, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id2: (required)
        :param Object id: (required)
        :param int body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id2', 'id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoices_idactionupdate_external_status_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id2' is set
        if ('id2' not in params or
                params['id2'] is None):
            raise ValueError("Missing the required parameter `id2` when calling `invoices_idactionupdate_external_status_put`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `invoices_idactionupdate_external_status_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/invoices/{id}?action=update-external-status', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invoices_idactionvalidate_vipps_user_get(self, id, **kwargs):  # noqa: E501
        """invoices_idactionvalidate_vipps_user_get  # noqa: E501

        validate-vipps-user Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_idactionvalidate_vipps_user_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invoices_idactionvalidate_vipps_user_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.invoices_idactionvalidate_vipps_user_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def invoices_idactionvalidate_vipps_user_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """invoices_idactionvalidate_vipps_user_get  # noqa: E501

        validate-vipps-user Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_idactionvalidate_vipps_user_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoices_idactionvalidate_vipps_user_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `invoices_idactionvalidate_vipps_user_get`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `invoices_idactionvalidate_vipps_user_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/invoices/{id}?action=validate-vipps-user', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invoices_post(self, body, **kwargs):  # noqa: E501
        """invoices_post  # noqa: E501

        Create CustomerInvoice  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CustomerInvoice body: (required)
        :return: CustomerInvoice
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invoices_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.invoices_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def invoices_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """invoices_post  # noqa: E501

        Create CustomerInvoice  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoices_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CustomerInvoice body: (required)
        :return: CustomerInvoice
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoices_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `invoices_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/invoices', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CustomerInvoice',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invoicesactioncalculate_invoice_summary_post(self, **kwargs):  # noqa: E501
        """invoicesactioncalculate_invoice_summary_post  # noqa: E501

        calculate-invoice-summary Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoicesactioncalculate_invoice_summary_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[CustomerInvoiceItem] body:
        :return: TradeHeaderCalculationSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invoicesactioncalculate_invoice_summary_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.invoicesactioncalculate_invoice_summary_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def invoicesactioncalculate_invoice_summary_post_with_http_info(self, **kwargs):  # noqa: E501
        """invoicesactioncalculate_invoice_summary_post  # noqa: E501

        calculate-invoice-summary Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoicesactioncalculate_invoice_summary_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[CustomerInvoiceItem] body:
        :return: TradeHeaderCalculationSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoicesactioncalculate_invoice_summary_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/invoices?action=calculate-invoice-summary', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TradeHeaderCalculationSummary',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invoicesactioncalculate_vat_summary_get(self, invoice_number, **kwargs):  # noqa: E501
        """invoicesactioncalculate_vat_summary_get  # noqa: E501

        calculate-vat-summary Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoicesactioncalculate_vat_summary_get(invoice_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object invoice_number: (required)
        :return: list[VatCalculationSummary]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invoicesactioncalculate_vat_summary_get_with_http_info(invoice_number, **kwargs)  # noqa: E501
        else:
            (data) = self.invoicesactioncalculate_vat_summary_get_with_http_info(invoice_number, **kwargs)  # noqa: E501
            return data

    def invoicesactioncalculate_vat_summary_get_with_http_info(self, invoice_number, **kwargs):  # noqa: E501
        """invoicesactioncalculate_vat_summary_get  # noqa: E501

        calculate-vat-summary Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoicesactioncalculate_vat_summary_get_with_http_info(invoice_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object invoice_number: (required)
        :return: list[VatCalculationSummary]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invoice_number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoicesactioncalculate_vat_summary_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invoice_number' is set
        if ('invoice_number' not in params or
                params['invoice_number'] is None):
            raise ValueError("Missing the required parameter `invoice_number` when calling `invoicesactioncalculate_vat_summary_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'invoice_number' in params:
            path_params['InvoiceNumber'] = params['invoice_number']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/invoices?action=calculate-vat-summary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[VatCalculationSummary]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invoicesactionget_barnepass_data_get(self, year, **kwargs):  # noqa: E501
        """invoicesactionget_barnepass_data_get  # noqa: E501

        get-barnepass-data Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoicesactionget_barnepass_data_get(year, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object year: (required)
        :return: list[BarnepassOppgave]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invoicesactionget_barnepass_data_get_with_http_info(year, **kwargs)  # noqa: E501
        else:
            (data) = self.invoicesactionget_barnepass_data_get_with_http_info(year, **kwargs)  # noqa: E501
            return data

    def invoicesactionget_barnepass_data_get_with_http_info(self, year, **kwargs):  # noqa: E501
        """invoicesactionget_barnepass_data_get  # noqa: E501

        get-barnepass-data Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoicesactionget_barnepass_data_get_with_http_info(year, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object year: (required)
        :return: list[BarnepassOppgave]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['year']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoicesactionget_barnepass_data_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'year' is set
        if ('year' not in params or
                params['year'] is None):
            raise ValueError("Missing the required parameter `year` when calling `invoicesactionget_barnepass_data_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'year' in params:
            path_params['year'] = params['year']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/invoices?action=get-barnepass-data', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[BarnepassOppgave]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invoicesactionget_customer_get(self, org_number, name, **kwargs):  # noqa: E501
        """invoicesactionget_customer_get  # noqa: E501

        get-customer Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoicesactionget_customer_get(org_number, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object org_number: (required)
        :param Object name: (required)
        :return: Customer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invoicesactionget_customer_get_with_http_info(org_number, name, **kwargs)  # noqa: E501
        else:
            (data) = self.invoicesactionget_customer_get_with_http_info(org_number, name, **kwargs)  # noqa: E501
            return data

    def invoicesactionget_customer_get_with_http_info(self, org_number, name, **kwargs):  # noqa: E501
        """invoicesactionget_customer_get  # noqa: E501

        get-customer Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoicesactionget_customer_get_with_http_info(org_number, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object org_number: (required)
        :param Object name: (required)
        :return: Customer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org_number', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoicesactionget_customer_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org_number' is set
        if ('org_number' not in params or
                params['org_number'] is None):
            raise ValueError("Missing the required parameter `org_number` when calling `invoicesactionget_customer_get`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `invoicesactionget_customer_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_number' in params:
            path_params['orgNumber'] = params['org_number']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/invoices?action=get-customer', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Customer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invoicesactionget_customer_invoice_summary_get(self, odata_filter, **kwargs):  # noqa: E501
        """invoicesactionget_customer_invoice_summary_get  # noqa: E501

        get-customer-invoice-summary Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoicesactionget_customer_invoice_summary_get(odata_filter, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object odata_filter: (required)
        :return: InvoiceSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invoicesactionget_customer_invoice_summary_get_with_http_info(odata_filter, **kwargs)  # noqa: E501
        else:
            (data) = self.invoicesactionget_customer_invoice_summary_get_with_http_info(odata_filter, **kwargs)  # noqa: E501
            return data

    def invoicesactionget_customer_invoice_summary_get_with_http_info(self, odata_filter, **kwargs):  # noqa: E501
        """invoicesactionget_customer_invoice_summary_get  # noqa: E501

        get-customer-invoice-summary Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoicesactionget_customer_invoice_summary_get_with_http_info(odata_filter, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object odata_filter: (required)
        :return: InvoiceSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['odata_filter']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoicesactionget_customer_invoice_summary_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'odata_filter' is set
        if ('odata_filter' not in params or
                params['odata_filter'] is None):
            raise ValueError("Missing the required parameter `odata_filter` when calling `invoicesactionget_customer_invoice_summary_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'odata_filter' in params:
            path_params['odataFilter'] = params['odata_filter']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/invoices?action=get-customer-invoice-summary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InvoiceSummary',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invoicesactionget_customers_get(self, customers_nr_and_name, **kwargs):  # noqa: E501
        """invoicesactionget_customers_get  # noqa: E501

        get-customers Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoicesactionget_customers_get(customers_nr_and_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object customers_nr_and_name: (required)
        :return: list[Customer]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invoicesactionget_customers_get_with_http_info(customers_nr_and_name, **kwargs)  # noqa: E501
        else:
            (data) = self.invoicesactionget_customers_get_with_http_info(customers_nr_and_name, **kwargs)  # noqa: E501
            return data

    def invoicesactionget_customers_get_with_http_info(self, customers_nr_and_name, **kwargs):  # noqa: E501
        """invoicesactionget_customers_get  # noqa: E501

        get-customers Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoicesactionget_customers_get_with_http_info(customers_nr_and_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object customers_nr_and_name: (required)
        :return: list[Customer]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customers_nr_and_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoicesactionget_customers_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'customers_nr_and_name' is set
        if ('customers_nr_and_name' not in params or
                params['customers_nr_and_name'] is None):
            raise ValueError("Missing the required parameter `customers_nr_and_name` when calling `invoicesactionget_customers_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'customers_nr_and_name' in params:
            path_params['customersNrAndName'] = params['customers_nr_and_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/invoices?action=get-customers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Customer]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invoicesactionmatch_invoices_manual_put(self, payment_id, **kwargs):  # noqa: E501
        """invoicesactionmatch_invoices_manual_put  # noqa: E501

        match-invoices-manual Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoicesactionmatch_invoices_manual_put(payment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object payment_id: (required)
        :param str body:
        :return: JournalEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invoicesactionmatch_invoices_manual_put_with_http_info(payment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.invoicesactionmatch_invoices_manual_put_with_http_info(payment_id, **kwargs)  # noqa: E501
            return data

    def invoicesactionmatch_invoices_manual_put_with_http_info(self, payment_id, **kwargs):  # noqa: E501
        """invoicesactionmatch_invoices_manual_put  # noqa: E501

        match-invoices-manual Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoicesactionmatch_invoices_manual_put_with_http_info(payment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object payment_id: (required)
        :param str body:
        :return: JournalEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['payment_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoicesactionmatch_invoices_manual_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'payment_id' is set
        if ('payment_id' not in params or
                params['payment_id'] is None):
            raise ValueError("Missing the required parameter `payment_id` when calling `invoicesactionmatch_invoices_manual_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'payment_id' in params:
            path_params['paymentID'] = params['payment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/invoices?action=match-invoices-manual', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JournalEntry',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invoicesactionregular_post(self, **kwargs):  # noqa: E501
        """invoicesactionregular_post  # noqa: E501

        regular Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoicesactionregular_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CustomerInvoice body:
        :return: CustomerInvoice
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invoicesactionregular_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.invoicesactionregular_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def invoicesactionregular_post_with_http_info(self, **kwargs):  # noqa: E501
        """invoicesactionregular_post  # noqa: E501

        regular Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoicesactionregular_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CustomerInvoice body:
        :return: CustomerInvoice
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoicesactionregular_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/invoices?action=regular', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CustomerInvoice',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
