# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class PaymentBatchApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def paymentbatches_get(self, **kwargs):  # noqa: E501
        """paymentbatches_get  # noqa: E501

        Query PaymentBatch  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paymentbatches_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[PaymentBatch]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.paymentbatches_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.paymentbatches_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def paymentbatches_get_with_http_info(self, **kwargs):  # noqa: E501
        """paymentbatches_get  # noqa: E501

        Query PaymentBatch  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paymentbatches_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[PaymentBatch]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method paymentbatches_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/paymentbatches', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PaymentBatch]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def paymentbatches_id_delete(self, id, **kwargs):  # noqa: E501
        """paymentbatches_id_delete  # noqa: E501

        Delete PaymentBatch  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paymentbatches_id_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: PaymentBatch
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.paymentbatches_id_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.paymentbatches_id_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def paymentbatches_id_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """paymentbatches_id_delete  # noqa: E501

        Delete PaymentBatch  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paymentbatches_id_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: PaymentBatch
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method paymentbatches_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `paymentbatches_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/paymentbatches/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaymentBatch',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def paymentbatches_id_get(self, id, **kwargs):  # noqa: E501
        """paymentbatches_id_get  # noqa: E501

        Get PaymentBatch  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paymentbatches_id_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: PaymentBatch
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.paymentbatches_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.paymentbatches_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def paymentbatches_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """paymentbatches_id_get  # noqa: E501

        Get PaymentBatch  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paymentbatches_id_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: PaymentBatch
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method paymentbatches_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `paymentbatches_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/paymentbatches/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaymentBatch',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def paymentbatches_id_put(self, body, id, **kwargs):  # noqa: E501
        """paymentbatches_id_put  # noqa: E501

        Update PaymentBatch  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paymentbatches_id_put(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PaymentBatch body: (required)
        :param int id: (required)
        :return: PaymentBatch
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.paymentbatches_id_put_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.paymentbatches_id_put_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def paymentbatches_id_put_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """paymentbatches_id_put  # noqa: E501

        Update PaymentBatch  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paymentbatches_id_put_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PaymentBatch body: (required)
        :param int id: (required)
        :return: PaymentBatch
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method paymentbatches_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `paymentbatches_id_put`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `paymentbatches_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/paymentbatches/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaymentBatch',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def paymentbatches_idactioncomplete_customer_paymentbatch_post(self, id, id, **kwargs):  # noqa: E501
        """paymentbatches_idactioncomplete_customer_paymentbatch_post  # noqa: E501

        complete-customer-paymentbatch Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paymentbatches_idactioncomplete_customer_paymentbatch_post(id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.paymentbatches_idactioncomplete_customer_paymentbatch_post_with_http_info(id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.paymentbatches_idactioncomplete_customer_paymentbatch_post_with_http_info(id, id, **kwargs)  # noqa: E501
            return data

    def paymentbatches_idactioncomplete_customer_paymentbatch_post_with_http_info(self, id, id, **kwargs):  # noqa: E501
        """paymentbatches_idactioncomplete_customer_paymentbatch_post  # noqa: E501

        complete-customer-paymentbatch Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paymentbatches_idactioncomplete_customer_paymentbatch_post_with_http_info(id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method paymentbatches_idactioncomplete_customer_paymentbatch_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `paymentbatches_idactioncomplete_customer_paymentbatch_post`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `paymentbatches_idactioncomplete_customer_paymentbatch_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/paymentbatches/{id}?action=complete-customer-paymentbatch', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def paymentbatches_post(self, body, **kwargs):  # noqa: E501
        """paymentbatches_post  # noqa: E501

        Create PaymentBatch  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paymentbatches_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PaymentBatch body: (required)
        :return: PaymentBatch
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.paymentbatches_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.paymentbatches_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def paymentbatches_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """paymentbatches_post  # noqa: E501

        Create PaymentBatch  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paymentbatches_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PaymentBatch body: (required)
        :return: PaymentBatch
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method paymentbatches_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `paymentbatches_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/paymentbatches', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaymentBatch',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def paymentbatchesactioncomplete_customer_payment_registration_put(self, id, **kwargs):  # noqa: E501
        """paymentbatchesactioncomplete_customer_payment_registration_put  # noqa: E501

        complete-customer-payment-registration Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paymentbatchesactioncomplete_customer_payment_registration_put(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object id: (required)
        :return: list[PaymentBatch]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.paymentbatchesactioncomplete_customer_payment_registration_put_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.paymentbatchesactioncomplete_customer_payment_registration_put_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def paymentbatchesactioncomplete_customer_payment_registration_put_with_http_info(self, id, **kwargs):  # noqa: E501
        """paymentbatchesactioncomplete_customer_payment_registration_put  # noqa: E501

        complete-customer-payment-registration Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paymentbatchesactioncomplete_customer_payment_registration_put_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object id: (required)
        :return: list[PaymentBatch]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method paymentbatchesactioncomplete_customer_payment_registration_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `paymentbatchesactioncomplete_customer_payment_registration_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['ID'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/paymentbatches?action=complete-customer-payment-registration', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PaymentBatch]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def paymentbatchesactioncomplete_registered_payments_put(self, id, **kwargs):  # noqa: E501
        """paymentbatchesactioncomplete_registered_payments_put  # noqa: E501

        complete-registered-payments Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paymentbatchesactioncomplete_registered_payments_put(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.paymentbatchesactioncomplete_registered_payments_put_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.paymentbatchesactioncomplete_registered_payments_put_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def paymentbatchesactioncomplete_registered_payments_put_with_http_info(self, id, **kwargs):  # noqa: E501
        """paymentbatchesactioncomplete_registered_payments_put  # noqa: E501

        complete-registered-payments Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paymentbatchesactioncomplete_registered_payments_put_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method paymentbatchesactioncomplete_registered_payments_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `paymentbatchesactioncomplete_registered_payments_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['ID'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/paymentbatches?action=complete-registered-payments', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def paymentbatchesactioncreate_and_send_all_to_payment_put(self, **kwargs):  # noqa: E501
        """paymentbatchesactioncreate_and_send_all_to_payment_put  # noqa: E501

        create-and-send-all-to-payment Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paymentbatchesactioncreate_and_send_all_to_payment_put(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreatePaymentBatchDTO body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.paymentbatchesactioncreate_and_send_all_to_payment_put_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.paymentbatchesactioncreate_and_send_all_to_payment_put_with_http_info(**kwargs)  # noqa: E501
            return data

    def paymentbatchesactioncreate_and_send_all_to_payment_put_with_http_info(self, **kwargs):  # noqa: E501
        """paymentbatchesactioncreate_and_send_all_to_payment_put  # noqa: E501

        create-and-send-all-to-payment Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paymentbatchesactioncreate_and_send_all_to_payment_put_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreatePaymentBatchDTO body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method paymentbatchesactioncreate_and_send_all_to_payment_put" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/paymentbatches?action=create-and-send-all-to-payment', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def paymentbatchesactioncreate_and_send_to_payment_put(self, **kwargs):  # noqa: E501
        """paymentbatchesactioncreate_and_send_to_payment_put  # noqa: E501

        create-and-send-to-payment Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paymentbatchesactioncreate_and_send_to_payment_put(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreatePaymentBatchDTO body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.paymentbatchesactioncreate_and_send_to_payment_put_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.paymentbatchesactioncreate_and_send_to_payment_put_with_http_info(**kwargs)  # noqa: E501
            return data

    def paymentbatchesactioncreate_and_send_to_payment_put_with_http_info(self, **kwargs):  # noqa: E501
        """paymentbatchesactioncreate_and_send_to_payment_put  # noqa: E501

        create-and-send-to-payment Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paymentbatchesactioncreate_and_send_to_payment_put_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreatePaymentBatchDTO body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method paymentbatchesactioncreate_and_send_to_payment_put" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/paymentbatches?action=create-and-send-to-payment', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def paymentbatchesactiongenerate_avtalegiro_batch_for_invoice_i_ds_and_payment_i_ds_put(self, is_manual, is_mergeable, **kwargs):  # noqa: E501
        """paymentbatchesactiongenerate_avtalegiro_batch_for_invoice_i_ds_and_payment_i_ds_put  # noqa: E501

        generate-avtalegiro-batch-for-invoiceIDs-and-paymentIDs Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paymentbatchesactiongenerate_avtalegiro_batch_for_invoice_i_ds_and_payment_i_ds_put(is_manual, is_mergeable, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object is_manual: (required)
        :param Object is_mergeable: (required)
        :param CreateAvtaleGiroPaymentBatchDTO body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.paymentbatchesactiongenerate_avtalegiro_batch_for_invoice_i_ds_and_payment_i_ds_put_with_http_info(is_manual, is_mergeable, **kwargs)  # noqa: E501
        else:
            (data) = self.paymentbatchesactiongenerate_avtalegiro_batch_for_invoice_i_ds_and_payment_i_ds_put_with_http_info(is_manual, is_mergeable, **kwargs)  # noqa: E501
            return data

    def paymentbatchesactiongenerate_avtalegiro_batch_for_invoice_i_ds_and_payment_i_ds_put_with_http_info(self, is_manual, is_mergeable, **kwargs):  # noqa: E501
        """paymentbatchesactiongenerate_avtalegiro_batch_for_invoice_i_ds_and_payment_i_ds_put  # noqa: E501

        generate-avtalegiro-batch-for-invoiceIDs-and-paymentIDs Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paymentbatchesactiongenerate_avtalegiro_batch_for_invoice_i_ds_and_payment_i_ds_put_with_http_info(is_manual, is_mergeable, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object is_manual: (required)
        :param Object is_mergeable: (required)
        :param CreateAvtaleGiroPaymentBatchDTO body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['is_manual', 'is_mergeable', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method paymentbatchesactiongenerate_avtalegiro_batch_for_invoice_i_ds_and_payment_i_ds_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'is_manual' is set
        if ('is_manual' not in params or
                params['is_manual'] is None):
            raise ValueError("Missing the required parameter `is_manual` when calling `paymentbatchesactiongenerate_avtalegiro_batch_for_invoice_i_ds_and_payment_i_ds_put`")  # noqa: E501
        # verify the required parameter 'is_mergeable' is set
        if ('is_mergeable' not in params or
                params['is_mergeable'] is None):
            raise ValueError("Missing the required parameter `is_mergeable` when calling `paymentbatchesactiongenerate_avtalegiro_batch_for_invoice_i_ds_and_payment_i_ds_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'is_manual' in params:
            path_params['isManual'] = params['is_manual']  # noqa: E501
        if 'is_mergeable' in params:
            path_params['isMergeable'] = params['is_mergeable']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/paymentbatches?action=generate-avtalegiro-batch-for-invoiceIDs-and-paymentIDs', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def paymentbatchesactiongenerate_avtalegiro_batch_for_invoice_i_ds_put(self, is_manual, is_mergeable, **kwargs):  # noqa: E501
        """paymentbatchesactiongenerate_avtalegiro_batch_for_invoice_i_ds_put  # noqa: E501

        generate-avtalegiro-batch-for-invoiceIDs Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paymentbatchesactiongenerate_avtalegiro_batch_for_invoice_i_ds_put(is_manual, is_mergeable, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object is_manual: (required)
        :param Object is_mergeable: (required)
        :param int body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.paymentbatchesactiongenerate_avtalegiro_batch_for_invoice_i_ds_put_with_http_info(is_manual, is_mergeable, **kwargs)  # noqa: E501
        else:
            (data) = self.paymentbatchesactiongenerate_avtalegiro_batch_for_invoice_i_ds_put_with_http_info(is_manual, is_mergeable, **kwargs)  # noqa: E501
            return data

    def paymentbatchesactiongenerate_avtalegiro_batch_for_invoice_i_ds_put_with_http_info(self, is_manual, is_mergeable, **kwargs):  # noqa: E501
        """paymentbatchesactiongenerate_avtalegiro_batch_for_invoice_i_ds_put  # noqa: E501

        generate-avtalegiro-batch-for-invoiceIDs Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paymentbatchesactiongenerate_avtalegiro_batch_for_invoice_i_ds_put_with_http_info(is_manual, is_mergeable, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object is_manual: (required)
        :param Object is_mergeable: (required)
        :param int body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['is_manual', 'is_mergeable', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method paymentbatchesactiongenerate_avtalegiro_batch_for_invoice_i_ds_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'is_manual' is set
        if ('is_manual' not in params or
                params['is_manual'] is None):
            raise ValueError("Missing the required parameter `is_manual` when calling `paymentbatchesactiongenerate_avtalegiro_batch_for_invoice_i_ds_put`")  # noqa: E501
        # verify the required parameter 'is_mergeable' is set
        if ('is_mergeable' not in params or
                params['is_mergeable'] is None):
            raise ValueError("Missing the required parameter `is_mergeable` when calling `paymentbatchesactiongenerate_avtalegiro_batch_for_invoice_i_ds_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'is_manual' in params:
            path_params['isManual'] = params['is_manual']  # noqa: E501
        if 'is_mergeable' in params:
            path_params['isMergeable'] = params['is_mergeable']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/paymentbatches?action=generate-avtalegiro-batch-for-invoiceIDs', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def paymentbatchesactiongenerate_avtalegiro_batch_for_invoice_numbers_put(self, is_manual, **kwargs):  # noqa: E501
        """paymentbatchesactiongenerate_avtalegiro_batch_for_invoice_numbers_put  # noqa: E501

        generate-avtalegiro-batch-for-invoice-numbers Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paymentbatchesactiongenerate_avtalegiro_batch_for_invoice_numbers_put(is_manual, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object is_manual: (required)
        :param str body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.paymentbatchesactiongenerate_avtalegiro_batch_for_invoice_numbers_put_with_http_info(is_manual, **kwargs)  # noqa: E501
        else:
            (data) = self.paymentbatchesactiongenerate_avtalegiro_batch_for_invoice_numbers_put_with_http_info(is_manual, **kwargs)  # noqa: E501
            return data

    def paymentbatchesactiongenerate_avtalegiro_batch_for_invoice_numbers_put_with_http_info(self, is_manual, **kwargs):  # noqa: E501
        """paymentbatchesactiongenerate_avtalegiro_batch_for_invoice_numbers_put  # noqa: E501

        generate-avtalegiro-batch-for-invoice-numbers Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paymentbatchesactiongenerate_avtalegiro_batch_for_invoice_numbers_put_with_http_info(is_manual, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object is_manual: (required)
        :param str body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['is_manual', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method paymentbatchesactiongenerate_avtalegiro_batch_for_invoice_numbers_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'is_manual' is set
        if ('is_manual' not in params or
                params['is_manual'] is None):
            raise ValueError("Missing the required parameter `is_manual` when calling `paymentbatchesactiongenerate_avtalegiro_batch_for_invoice_numbers_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'is_manual' in params:
            path_params['isManual'] = params['is_manual']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/paymentbatches?action=generate-avtalegiro-batch-for-invoice-numbers', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def paymentbatchesactiongenerate_avtalegiro_batch_for_payments_put(self, is_manual, is_mergeable, **kwargs):  # noqa: E501
        """paymentbatchesactiongenerate_avtalegiro_batch_for_payments_put  # noqa: E501

        generate-avtalegiro-batch-for-payments Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paymentbatchesactiongenerate_avtalegiro_batch_for_payments_put(is_manual, is_mergeable, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object is_manual: (required)
        :param Object is_mergeable: (required)
        :param int body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.paymentbatchesactiongenerate_avtalegiro_batch_for_payments_put_with_http_info(is_manual, is_mergeable, **kwargs)  # noqa: E501
        else:
            (data) = self.paymentbatchesactiongenerate_avtalegiro_batch_for_payments_put_with_http_info(is_manual, is_mergeable, **kwargs)  # noqa: E501
            return data

    def paymentbatchesactiongenerate_avtalegiro_batch_for_payments_put_with_http_info(self, is_manual, is_mergeable, **kwargs):  # noqa: E501
        """paymentbatchesactiongenerate_avtalegiro_batch_for_payments_put  # noqa: E501

        generate-avtalegiro-batch-for-payments Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paymentbatchesactiongenerate_avtalegiro_batch_for_payments_put_with_http_info(is_manual, is_mergeable, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object is_manual: (required)
        :param Object is_mergeable: (required)
        :param int body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['is_manual', 'is_mergeable', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method paymentbatchesactiongenerate_avtalegiro_batch_for_payments_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'is_manual' is set
        if ('is_manual' not in params or
                params['is_manual'] is None):
            raise ValueError("Missing the required parameter `is_manual` when calling `paymentbatchesactiongenerate_avtalegiro_batch_for_payments_put`")  # noqa: E501
        # verify the required parameter 'is_mergeable' is set
        if ('is_mergeable' not in params or
                params['is_mergeable'] is None):
            raise ValueError("Missing the required parameter `is_mergeable` when calling `paymentbatchesactiongenerate_avtalegiro_batch_for_payments_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'is_manual' in params:
            path_params['isManual'] = params['is_manual']  # noqa: E501
        if 'is_mergeable' in params:
            path_params['isMergeable'] = params['is_mergeable']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/paymentbatches?action=generate-avtalegiro-batch-for-payments', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def paymentbatchesactiongenerate_camt054_c_string_put(self, **kwargs):  # noqa: E501
        """paymentbatchesactiongenerate_camt054_c_string_put  # noqa: E501

        generate-camt054C-string Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paymentbatchesactiongenerate_camt054_c_string_put(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.paymentbatchesactiongenerate_camt054_c_string_put_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.paymentbatchesactiongenerate_camt054_c_string_put_with_http_info(**kwargs)  # noqa: E501
            return data

    def paymentbatchesactiongenerate_camt054_c_string_put_with_http_info(self, **kwargs):  # noqa: E501
        """paymentbatchesactiongenerate_camt054_c_string_put  # noqa: E501

        generate-camt054C-string Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paymentbatchesactiongenerate_camt054_c_string_put_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method paymentbatchesactiongenerate_camt054_c_string_put" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/paymentbatches?action=generate-camt054C-string', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def paymentbatchesactiongenerate_ocr_giro_string_put(self, from_bank_account_number, custom_eol_char, **kwargs):  # noqa: E501
        """paymentbatchesactiongenerate_ocr_giro_string_put  # noqa: E501

        generate-ocr-giro-string Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paymentbatchesactiongenerate_ocr_giro_string_put(from_bank_account_number, custom_eol_char, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object from_bank_account_number: (required)
        :param Object custom_eol_char: (required)
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.paymentbatchesactiongenerate_ocr_giro_string_put_with_http_info(from_bank_account_number, custom_eol_char, **kwargs)  # noqa: E501
        else:
            (data) = self.paymentbatchesactiongenerate_ocr_giro_string_put_with_http_info(from_bank_account_number, custom_eol_char, **kwargs)  # noqa: E501
            return data

    def paymentbatchesactiongenerate_ocr_giro_string_put_with_http_info(self, from_bank_account_number, custom_eol_char, **kwargs):  # noqa: E501
        """paymentbatchesactiongenerate_ocr_giro_string_put  # noqa: E501

        generate-ocr-giro-string Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paymentbatchesactiongenerate_ocr_giro_string_put_with_http_info(from_bank_account_number, custom_eol_char, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object from_bank_account_number: (required)
        :param Object custom_eol_char: (required)
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['from_bank_account_number', 'custom_eol_char', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method paymentbatchesactiongenerate_ocr_giro_string_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'from_bank_account_number' is set
        if ('from_bank_account_number' not in params or
                params['from_bank_account_number'] is None):
            raise ValueError("Missing the required parameter `from_bank_account_number` when calling `paymentbatchesactiongenerate_ocr_giro_string_put`")  # noqa: E501
        # verify the required parameter 'custom_eol_char' is set
        if ('custom_eol_char' not in params or
                params['custom_eol_char'] is None):
            raise ValueError("Missing the required parameter `custom_eol_char` when calling `paymentbatchesactiongenerate_ocr_giro_string_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'from_bank_account_number' in params:
            path_params['fromBankAccountNumber'] = params['from_bank_account_number']  # noqa: E501
        if 'custom_eol_char' in params:
            path_params['customEOLChar'] = params['custom_eol_char']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/paymentbatches?action=generate-ocr-giro-string', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def paymentbatchesactiongenerate_pain002_file_put(self, status, **kwargs):  # noqa: E501
        """paymentbatchesactiongenerate_pain002_file_put  # noqa: E501

        generate-pain002-file Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paymentbatchesactiongenerate_pain002_file_put(status, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object status: (required)
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.paymentbatchesactiongenerate_pain002_file_put_with_http_info(status, **kwargs)  # noqa: E501
        else:
            (data) = self.paymentbatchesactiongenerate_pain002_file_put_with_http_info(status, **kwargs)  # noqa: E501
            return data

    def paymentbatchesactiongenerate_pain002_file_put_with_http_info(self, status, **kwargs):  # noqa: E501
        """paymentbatchesactiongenerate_pain002_file_put  # noqa: E501

        generate-pain002-file Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paymentbatchesactiongenerate_pain002_file_put_with_http_info(status, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object status: (required)
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['status', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method paymentbatchesactiongenerate_pain002_file_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'status' is set
        if ('status' not in params or
                params['status'] is None):
            raise ValueError("Missing the required parameter `status` when calling `paymentbatchesactiongenerate_pain002_file_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'status' in params:
            path_params['status'] = params['status']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/paymentbatches?action=generate-pain002-file', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def paymentbatchesactiongenerate_payment_file_put(self, id, **kwargs):  # noqa: E501
        """paymentbatchesactiongenerate_payment_file_put  # noqa: E501

        generate-payment-file Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paymentbatchesactiongenerate_payment_file_put(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.paymentbatchesactiongenerate_payment_file_put_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.paymentbatchesactiongenerate_payment_file_put_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def paymentbatchesactiongenerate_payment_file_put_with_http_info(self, id, **kwargs):  # noqa: E501
        """paymentbatchesactiongenerate_payment_file_put  # noqa: E501

        generate-payment-file Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paymentbatchesactiongenerate_payment_file_put_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method paymentbatchesactiongenerate_payment_file_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `paymentbatchesactiongenerate_payment_file_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['ID'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/paymentbatches?action=generate-payment-file', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def paymentbatchesactiongenerate_receipt_file_put(self, **kwargs):  # noqa: E501
        """paymentbatchesactiongenerate_receipt_file_put  # noqa: E501

        generate-receipt-file Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paymentbatchesactiongenerate_receipt_file_put(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.paymentbatchesactiongenerate_receipt_file_put_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.paymentbatchesactiongenerate_receipt_file_put_with_http_info(**kwargs)  # noqa: E501
            return data

    def paymentbatchesactiongenerate_receipt_file_put_with_http_info(self, **kwargs):  # noqa: E501
        """paymentbatchesactiongenerate_receipt_file_put  # noqa: E501

        generate-receipt-file Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paymentbatchesactiongenerate_receipt_file_put_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method paymentbatchesactiongenerate_receipt_file_put" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/paymentbatches?action=generate-receipt-file', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def paymentbatchesactionget_file_statuses_from_file_ids_put(self, **kwargs):  # noqa: E501
        """paymentbatchesactionget_file_statuses_from_file_ids_put  # noqa: E501

        get-file-statuses-from-file-ids Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paymentbatchesactionget_file_statuses_from_file_ids_put(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int body:
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.paymentbatchesactionget_file_statuses_from_file_ids_put_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.paymentbatchesactionget_file_statuses_from_file_ids_put_with_http_info(**kwargs)  # noqa: E501
            return data

    def paymentbatchesactionget_file_statuses_from_file_ids_put_with_http_info(self, **kwargs):  # noqa: E501
        """paymentbatchesactionget_file_statuses_from_file_ids_put  # noqa: E501

        get-file-statuses-from-file-ids Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paymentbatchesactionget_file_statuses_from_file_ids_put_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int body:
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method paymentbatchesactionget_file_statuses_from_file_ids_put" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/paymentbatches?action=get-file-statuses-from-file-ids', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def paymentbatchesactionget_statuses_from_file_ids_put(self, **kwargs):  # noqa: E501
        """paymentbatchesactionget_statuses_from_file_ids_put  # noqa: E501

        get-statuses-from-file-ids Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paymentbatchesactionget_statuses_from_file_ids_put(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int body:
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.paymentbatchesactionget_statuses_from_file_ids_put_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.paymentbatchesactionget_statuses_from_file_ids_put_with_http_info(**kwargs)  # noqa: E501
            return data

    def paymentbatchesactionget_statuses_from_file_ids_put_with_http_info(self, **kwargs):  # noqa: E501
        """paymentbatchesactionget_statuses_from_file_ids_put  # noqa: E501

        get-statuses-from-file-ids Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paymentbatchesactionget_statuses_from_file_ids_put_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int body:
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method paymentbatchesactionget_statuses_from_file_ids_put" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/paymentbatches?action=get-statuses-from-file-ids', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def paymentbatchesactionprocess_avtalegiro_receipt_file_content_put(self, filename, **kwargs):  # noqa: E501
        """paymentbatchesactionprocess_avtalegiro_receipt_file_content_put  # noqa: E501

        process-avtalegiro-receipt-file-content Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paymentbatchesactionprocess_avtalegiro_receipt_file_content_put(filename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object filename: (required)
        :param str body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.paymentbatchesactionprocess_avtalegiro_receipt_file_content_put_with_http_info(filename, **kwargs)  # noqa: E501
        else:
            (data) = self.paymentbatchesactionprocess_avtalegiro_receipt_file_content_put_with_http_info(filename, **kwargs)  # noqa: E501
            return data

    def paymentbatchesactionprocess_avtalegiro_receipt_file_content_put_with_http_info(self, filename, **kwargs):  # noqa: E501
        """paymentbatchesactionprocess_avtalegiro_receipt_file_content_put  # noqa: E501

        process-avtalegiro-receipt-file-content Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paymentbatchesactionprocess_avtalegiro_receipt_file_content_put_with_http_info(filename, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object filename: (required)
        :param str body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filename', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method paymentbatchesactionprocess_avtalegiro_receipt_file_content_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'filename' is set
        if ('filename' not in params or
                params['filename'] is None):
            raise ValueError("Missing the required parameter `filename` when calling `paymentbatchesactionprocess_avtalegiro_receipt_file_content_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'filename' in params:
            path_params['filename'] = params['filename']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/paymentbatches?action=process-avtalegiro-receipt-file-content', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def paymentbatchesactionprocess_avtalegiro_receipt_file_put(self, file_id, **kwargs):  # noqa: E501
        """paymentbatchesactionprocess_avtalegiro_receipt_file_put  # noqa: E501

        process-avtalegiro-receipt-file Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paymentbatchesactionprocess_avtalegiro_receipt_file_put(file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object file_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.paymentbatchesactionprocess_avtalegiro_receipt_file_put_with_http_info(file_id, **kwargs)  # noqa: E501
        else:
            (data) = self.paymentbatchesactionprocess_avtalegiro_receipt_file_put_with_http_info(file_id, **kwargs)  # noqa: E501
            return data

    def paymentbatchesactionprocess_avtalegiro_receipt_file_put_with_http_info(self, file_id, **kwargs):  # noqa: E501
        """paymentbatchesactionprocess_avtalegiro_receipt_file_put  # noqa: E501

        process-avtalegiro-receipt-file Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paymentbatchesactionprocess_avtalegiro_receipt_file_put_with_http_info(file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object file_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method paymentbatchesactionprocess_avtalegiro_receipt_file_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'file_id' is set
        if ('file_id' not in params or
                params['file_id'] is None):
            raise ValueError("Missing the required parameter `file_id` when calling `paymentbatchesactionprocess_avtalegiro_receipt_file_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'file_id' in params:
            path_params['fileID'] = params['file_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/paymentbatches?action=process-avtalegiro-receipt-file', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def paymentbatchesactionregister_and_complete_customer_payment_put(self, file_id, **kwargs):  # noqa: E501
        """paymentbatchesactionregister_and_complete_customer_payment_put  # noqa: E501

        register-and-complete-customer-payment Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paymentbatchesactionregister_and_complete_customer_payment_put(file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object file_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.paymentbatchesactionregister_and_complete_customer_payment_put_with_http_info(file_id, **kwargs)  # noqa: E501
        else:
            (data) = self.paymentbatchesactionregister_and_complete_customer_payment_put_with_http_info(file_id, **kwargs)  # noqa: E501
            return data

    def paymentbatchesactionregister_and_complete_customer_payment_put_with_http_info(self, file_id, **kwargs):  # noqa: E501
        """paymentbatchesactionregister_and_complete_customer_payment_put  # noqa: E501

        register-and-complete-customer-payment Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paymentbatchesactionregister_and_complete_customer_payment_put_with_http_info(file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object file_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method paymentbatchesactionregister_and_complete_customer_payment_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'file_id' is set
        if ('file_id' not in params or
                params['file_id'] is None):
            raise ValueError("Missing the required parameter `file_id` when calling `paymentbatchesactionregister_and_complete_customer_payment_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'file_id' in params:
            path_params['fileID'] = params['file_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/paymentbatches?action=register-and-complete-customer-payment', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def paymentbatchesactionregister_customer_payment_file_put(self, file_id, **kwargs):  # noqa: E501
        """paymentbatchesactionregister_customer_payment_file_put  # noqa: E501

        register-customer-payment-file Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paymentbatchesactionregister_customer_payment_file_put(file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object file_id: (required)
        :return: list[PaymentBatch]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.paymentbatchesactionregister_customer_payment_file_put_with_http_info(file_id, **kwargs)  # noqa: E501
        else:
            (data) = self.paymentbatchesactionregister_customer_payment_file_put_with_http_info(file_id, **kwargs)  # noqa: E501
            return data

    def paymentbatchesactionregister_customer_payment_file_put_with_http_info(self, file_id, **kwargs):  # noqa: E501
        """paymentbatchesactionregister_customer_payment_file_put  # noqa: E501

        register-customer-payment-file Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paymentbatchesactionregister_customer_payment_file_put_with_http_info(file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object file_id: (required)
        :return: list[PaymentBatch]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method paymentbatchesactionregister_customer_payment_file_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'file_id' is set
        if ('file_id' not in params or
                params['file_id'] is None):
            raise ValueError("Missing the required parameter `file_id` when calling `paymentbatchesactionregister_customer_payment_file_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'file_id' in params:
            path_params['fileID'] = params['file_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/paymentbatches?action=register-customer-payment-file', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PaymentBatch]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def paymentbatchesactionregister_payment_string_post(self, **kwargs):  # noqa: E501
        """paymentbatchesactionregister_payment_string_post  # noqa: E501

        register-payment-string Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paymentbatchesactionregister_payment_string_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body:
        :return: list[PaymentBatch]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.paymentbatchesactionregister_payment_string_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.paymentbatchesactionregister_payment_string_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def paymentbatchesactionregister_payment_string_post_with_http_info(self, **kwargs):  # noqa: E501
        """paymentbatchesactionregister_payment_string_post  # noqa: E501

        register-payment-string Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paymentbatchesactionregister_payment_string_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body:
        :return: list[PaymentBatch]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method paymentbatchesactionregister_payment_string_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/paymentbatches?action=register-payment-string', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PaymentBatch]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def paymentbatchesactionregister_receipt_file_camt054_put(self, file_id, **kwargs):  # noqa: E501
        """paymentbatchesactionregister_receipt_file_camt054_put  # noqa: E501

        register-receipt-file-camt054 Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paymentbatchesactionregister_receipt_file_camt054_put(file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object file_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.paymentbatchesactionregister_receipt_file_camt054_put_with_http_info(file_id, **kwargs)  # noqa: E501
        else:
            (data) = self.paymentbatchesactionregister_receipt_file_camt054_put_with_http_info(file_id, **kwargs)  # noqa: E501
            return data

    def paymentbatchesactionregister_receipt_file_camt054_put_with_http_info(self, file_id, **kwargs):  # noqa: E501
        """paymentbatchesactionregister_receipt_file_camt054_put  # noqa: E501

        register-receipt-file-camt054 Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paymentbatchesactionregister_receipt_file_camt054_put_with_http_info(file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object file_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method paymentbatchesactionregister_receipt_file_camt054_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'file_id' is set
        if ('file_id' not in params or
                params['file_id'] is None):
            raise ValueError("Missing the required parameter `file_id` when calling `paymentbatchesactionregister_receipt_file_camt054_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'file_id' in params:
            path_params['fileID'] = params['file_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/paymentbatches?action=register-receipt-file-camt054', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def paymentbatchesactionregister_receipt_file_pain002_put(self, file_id, **kwargs):  # noqa: E501
        """paymentbatchesactionregister_receipt_file_pain002_put  # noqa: E501

        register-receipt-file-pain002 Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paymentbatchesactionregister_receipt_file_pain002_put(file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object file_id: (required)
        :return: PaymentBatch
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.paymentbatchesactionregister_receipt_file_pain002_put_with_http_info(file_id, **kwargs)  # noqa: E501
        else:
            (data) = self.paymentbatchesactionregister_receipt_file_pain002_put_with_http_info(file_id, **kwargs)  # noqa: E501
            return data

    def paymentbatchesactionregister_receipt_file_pain002_put_with_http_info(self, file_id, **kwargs):  # noqa: E501
        """paymentbatchesactionregister_receipt_file_pain002_put  # noqa: E501

        register-receipt-file-pain002 Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paymentbatchesactionregister_receipt_file_pain002_put_with_http_info(file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object file_id: (required)
        :return: PaymentBatch
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method paymentbatchesactionregister_receipt_file_pain002_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'file_id' is set
        if ('file_id' not in params or
                params['file_id'] is None):
            raise ValueError("Missing the required parameter `file_id` when calling `paymentbatchesactionregister_receipt_file_pain002_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'file_id' in params:
            path_params['fileID'] = params['file_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/paymentbatches?action=register-receipt-file-pain002', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaymentBatch',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def paymentbatchesactionregister_receipt_file_put(self, file_id, **kwargs):  # noqa: E501
        """paymentbatchesactionregister_receipt_file_put  # noqa: E501

        register-receipt-file Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paymentbatchesactionregister_receipt_file_put(file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object file_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.paymentbatchesactionregister_receipt_file_put_with_http_info(file_id, **kwargs)  # noqa: E501
        else:
            (data) = self.paymentbatchesactionregister_receipt_file_put_with_http_info(file_id, **kwargs)  # noqa: E501
            return data

    def paymentbatchesactionregister_receipt_file_put_with_http_info(self, file_id, **kwargs):  # noqa: E501
        """paymentbatchesactionregister_receipt_file_put  # noqa: E501

        register-receipt-file Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paymentbatchesactionregister_receipt_file_put_with_http_info(file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object file_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method paymentbatchesactionregister_receipt_file_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'file_id' is set
        if ('file_id' not in params or
                params['file_id'] is None):
            raise ValueError("Missing the required parameter `file_id` when calling `paymentbatchesactionregister_receipt_file_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'file_id' in params:
            path_params['fileID'] = params['file_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/paymentbatches?action=register-receipt-file', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def paymentbatchesactionrevert_payment_batch_put(self, id, recreate_payments, **kwargs):  # noqa: E501
        """paymentbatchesactionrevert_payment_batch_put  # noqa: E501

        revert-payment-batch Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paymentbatchesactionrevert_payment_batch_put(id, recreate_payments, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object id: (required)
        :param Object recreate_payments: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.paymentbatchesactionrevert_payment_batch_put_with_http_info(id, recreate_payments, **kwargs)  # noqa: E501
        else:
            (data) = self.paymentbatchesactionrevert_payment_batch_put_with_http_info(id, recreate_payments, **kwargs)  # noqa: E501
            return data

    def paymentbatchesactionrevert_payment_batch_put_with_http_info(self, id, recreate_payments, **kwargs):  # noqa: E501
        """paymentbatchesactionrevert_payment_batch_put  # noqa: E501

        revert-payment-batch Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paymentbatchesactionrevert_payment_batch_put_with_http_info(id, recreate_payments, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object id: (required)
        :param Object recreate_payments: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'recreate_payments']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method paymentbatchesactionrevert_payment_batch_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `paymentbatchesactionrevert_payment_batch_put`")  # noqa: E501
        # verify the required parameter 'recreate_payments' is set
        if ('recreate_payments' not in params or
                params['recreate_payments'] is None):
            raise ValueError("Missing the required parameter `recreate_payments` when calling `paymentbatchesactionrevert_payment_batch_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['ID'] = params['id']  # noqa: E501
        if 'recreate_payments' in params:
            path_params['recreatePayments'] = params['recreate_payments']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/paymentbatches?action=revert-payment-batch', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def paymentbatchesactionsend_batch_to_payment_put(self, batch_id, **kwargs):  # noqa: E501
        """paymentbatchesactionsend_batch_to_payment_put  # noqa: E501

        send-batch-to-payment Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paymentbatchesactionsend_batch_to_payment_put(batch_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object batch_id: (required)
        :param CreatePaymentBatchDTO body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.paymentbatchesactionsend_batch_to_payment_put_with_http_info(batch_id, **kwargs)  # noqa: E501
        else:
            (data) = self.paymentbatchesactionsend_batch_to_payment_put_with_http_info(batch_id, **kwargs)  # noqa: E501
            return data

    def paymentbatchesactionsend_batch_to_payment_put_with_http_info(self, batch_id, **kwargs):  # noqa: E501
        """paymentbatchesactionsend_batch_to_payment_put  # noqa: E501

        send-batch-to-payment Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paymentbatchesactionsend_batch_to_payment_put_with_http_info(batch_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object batch_id: (required)
        :param CreatePaymentBatchDTO body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['batch_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method paymentbatchesactionsend_batch_to_payment_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'batch_id' is set
        if ('batch_id' not in params or
                params['batch_id'] is None):
            raise ValueError("Missing the required parameter `batch_id` when calling `paymentbatchesactionsend_batch_to_payment_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'batch_id' in params:
            path_params['batchID'] = params['batch_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/paymentbatches?action=send-batch-to-payment', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def paymentbatchesactionupdate_payments_to_completed_put(self, **kwargs):  # noqa: E501
        """paymentbatchesactionupdate_payments_to_completed_put  # noqa: E501

        update-payments-to-completed Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paymentbatchesactionupdate_payments_to_completed_put(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int body:
        :return: list[Payment]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.paymentbatchesactionupdate_payments_to_completed_put_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.paymentbatchesactionupdate_payments_to_completed_put_with_http_info(**kwargs)  # noqa: E501
            return data

    def paymentbatchesactionupdate_payments_to_completed_put_with_http_info(self, **kwargs):  # noqa: E501
        """paymentbatchesactionupdate_payments_to_completed_put  # noqa: E501

        update-payments-to-completed Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paymentbatchesactionupdate_payments_to_completed_put_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int body:
        :return: list[Payment]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method paymentbatchesactionupdate_payments_to_completed_put" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/paymentbatches?action=update-payments-to-completed', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Payment]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def paymentbatchesactionupdate_payments_to_paid_and_journal_payments_put(self, **kwargs):  # noqa: E501
        """paymentbatchesactionupdate_payments_to_paid_and_journal_payments_put  # noqa: E501

        update-payments-to-paid-and-journal-payments Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paymentbatchesactionupdate_payments_to_paid_and_journal_payments_put(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int body:
        :return: list[Payment]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.paymentbatchesactionupdate_payments_to_paid_and_journal_payments_put_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.paymentbatchesactionupdate_payments_to_paid_and_journal_payments_put_with_http_info(**kwargs)  # noqa: E501
            return data

    def paymentbatchesactionupdate_payments_to_paid_and_journal_payments_put_with_http_info(self, **kwargs):  # noqa: E501
        """paymentbatchesactionupdate_payments_to_paid_and_journal_payments_put  # noqa: E501

        update-payments-to-paid-and-journal-payments Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paymentbatchesactionupdate_payments_to_paid_and_journal_payments_put_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int body:
        :return: list[Payment]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method paymentbatchesactionupdate_payments_to_paid_and_journal_payments_put" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/paymentbatches?action=update-payments-to-paid-and-journal-payments', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Payment]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
