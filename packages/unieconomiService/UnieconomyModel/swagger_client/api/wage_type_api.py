# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class WageTypeApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def wagetypes_get(self, **kwargs):  # noqa: E501
        """wagetypes_get  # noqa: E501

        Query WageType  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wagetypes_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[WageType]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.wagetypes_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.wagetypes_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def wagetypes_get_with_http_info(self, **kwargs):  # noqa: E501
        """wagetypes_get  # noqa: E501

        Query WageType  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wagetypes_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[WageType]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method wagetypes_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/wagetypes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[WageType]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def wagetypes_id_delete(self, id, **kwargs):  # noqa: E501
        """wagetypes_id_delete  # noqa: E501

        Delete WageType  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wagetypes_id_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: WageType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.wagetypes_id_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.wagetypes_id_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def wagetypes_id_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """wagetypes_id_delete  # noqa: E501

        Delete WageType  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wagetypes_id_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: WageType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method wagetypes_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `wagetypes_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/wagetypes/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WageType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def wagetypes_id_get(self, id, **kwargs):  # noqa: E501
        """wagetypes_id_get  # noqa: E501

        Get WageType  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wagetypes_id_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: WageType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.wagetypes_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.wagetypes_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def wagetypes_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """wagetypes_id_get  # noqa: E501

        Get WageType  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wagetypes_id_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: WageType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method wagetypes_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `wagetypes_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/wagetypes/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WageType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def wagetypes_id_put(self, body, id, **kwargs):  # noqa: E501
        """wagetypes_id_put  # noqa: E501

        Update WageType  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wagetypes_id_put(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WageType body: (required)
        :param int id: (required)
        :return: WageType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.wagetypes_id_put_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.wagetypes_id_put_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def wagetypes_id_put_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """wagetypes_id_put  # noqa: E501

        Update WageType  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wagetypes_id_put_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WageType body: (required)
        :param int id: (required)
        :return: WageType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method wagetypes_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `wagetypes_id_put`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `wagetypes_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/wagetypes/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WageType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def wagetypes_idactionsync_supplements_put(self, id, id, **kwargs):  # noqa: E501
        """wagetypes_idactionsync_supplements_put  # noqa: E501

        sync-supplements Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wagetypes_idactionsync_supplements_put(id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.wagetypes_idactionsync_supplements_put_with_http_info(id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.wagetypes_idactionsync_supplements_put_with_http_info(id, id, **kwargs)  # noqa: E501
            return data

    def wagetypes_idactionsync_supplements_put_with_http_info(self, id, id, **kwargs):  # noqa: E501
        """wagetypes_idactionsync_supplements_put  # noqa: E501

        sync-supplements Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wagetypes_idactionsync_supplements_put_with_http_info(id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method wagetypes_idactionsync_supplements_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `wagetypes_idactionsync_supplements_put`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `wagetypes_idactionsync_supplements_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/wagetypes/{id}?action=sync-supplements', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def wagetypes_idactionused_in_payrollrun_get(self, id, **kwargs):  # noqa: E501
        """wagetypes_idactionused_in_payrollrun_get  # noqa: E501

        used-in-payrollrun Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wagetypes_idactionused_in_payrollrun_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.wagetypes_idactionused_in_payrollrun_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.wagetypes_idactionused_in_payrollrun_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def wagetypes_idactionused_in_payrollrun_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """wagetypes_idactionused_in_payrollrun_get  # noqa: E501

        used-in-payrollrun Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wagetypes_idactionused_in_payrollrun_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method wagetypes_idactionused_in_payrollrun_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `wagetypes_idactionused_in_payrollrun_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/wagetypes/{id}?action=used-in-payrollrun', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def wagetypes_post(self, body, **kwargs):  # noqa: E501
        """wagetypes_post  # noqa: E501

        Create WageType  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wagetypes_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WageType body: (required)
        :return: WageType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.wagetypes_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.wagetypes_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def wagetypes_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """wagetypes_post  # noqa: E501

        Create WageType  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wagetypes_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WageType body: (required)
        :return: WageType
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method wagetypes_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `wagetypes_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/wagetypes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WageType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def wagetypesactioncreate_and_update_standard_wagetypes_put(self, **kwargs):  # noqa: E501
        """wagetypesactioncreate_and_update_standard_wagetypes_put  # noqa: E501

        create-and-update-standard-wagetypes Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wagetypesactioncreate_and_update_standard_wagetypes_put(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.wagetypesactioncreate_and_update_standard_wagetypes_put_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.wagetypesactioncreate_and_update_standard_wagetypes_put_with_http_info(**kwargs)  # noqa: E501
            return data

    def wagetypesactioncreate_and_update_standard_wagetypes_put_with_http_info(self, **kwargs):  # noqa: E501
        """wagetypesactioncreate_and_update_standard_wagetypes_put  # noqa: E501

        create-and-update-standard-wagetypes Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wagetypesactioncreate_and_update_standard_wagetypes_put_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method wagetypesactioncreate_and_update_standard_wagetypes_put" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/wagetypes?action=create-and-update-standard-wagetypes', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def wagetypesactioncreate_wagetypes_for_year_put(self, **kwargs):  # noqa: E501
        """wagetypesactioncreate_wagetypes_for_year_put  # noqa: E501

        create-wagetypes-for-year Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wagetypesactioncreate_wagetypes_for_year_put(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.wagetypesactioncreate_wagetypes_for_year_put_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.wagetypesactioncreate_wagetypes_for_year_put_with_http_info(**kwargs)  # noqa: E501
            return data

    def wagetypesactioncreate_wagetypes_for_year_put_with_http_info(self, **kwargs):  # noqa: E501
        """wagetypesactioncreate_wagetypes_for_year_put  # noqa: E501

        create-wagetypes-for-year Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wagetypesactioncreate_wagetypes_for_year_put_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method wagetypesactioncreate_wagetypes_for_year_put" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/wagetypes?action=create-wagetypes-for-year', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def wagetypesactionget_rate_get(self, wagetype_id, employment_id, employee_id, **kwargs):  # noqa: E501
        """wagetypesactionget_rate_get  # noqa: E501

        get-rate Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wagetypesactionget_rate_get(wagetype_id, employment_id, employee_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object wagetype_id: (required)
        :param Object employment_id: (required)
        :param Object employee_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.wagetypesactionget_rate_get_with_http_info(wagetype_id, employment_id, employee_id, **kwargs)  # noqa: E501
        else:
            (data) = self.wagetypesactionget_rate_get_with_http_info(wagetype_id, employment_id, employee_id, **kwargs)  # noqa: E501
            return data

    def wagetypesactionget_rate_get_with_http_info(self, wagetype_id, employment_id, employee_id, **kwargs):  # noqa: E501
        """wagetypesactionget_rate_get  # noqa: E501

        get-rate Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wagetypesactionget_rate_get_with_http_info(wagetype_id, employment_id, employee_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object wagetype_id: (required)
        :param Object employment_id: (required)
        :param Object employee_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['wagetype_id', 'employment_id', 'employee_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method wagetypesactionget_rate_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'wagetype_id' is set
        if ('wagetype_id' not in params or
                params['wagetype_id'] is None):
            raise ValueError("Missing the required parameter `wagetype_id` when calling `wagetypesactionget_rate_get`")  # noqa: E501
        # verify the required parameter 'employment_id' is set
        if ('employment_id' not in params or
                params['employment_id'] is None):
            raise ValueError("Missing the required parameter `employment_id` when calling `wagetypesactionget_rate_get`")  # noqa: E501
        # verify the required parameter 'employee_id' is set
        if ('employee_id' not in params or
                params['employee_id'] is None):
            raise ValueError("Missing the required parameter `employee_id` when calling `wagetypesactionget_rate_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'wagetype_id' in params:
            path_params['wagetypeID'] = params['wagetype_id']  # noqa: E501
        if 'employment_id' in params:
            path_params['employmentID'] = params['employment_id']  # noqa: E501
        if 'employee_id' in params:
            path_params['employeeID'] = params['employee_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/wagetypes?action=get-rate', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def wagetypesactionsynchronize_put(self, **kwargs):  # noqa: E501
        """wagetypesactionsynchronize_put  # noqa: E501

        synchronize Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wagetypesactionsynchronize_put(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.wagetypesactionsynchronize_put_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.wagetypesactionsynchronize_put_with_http_info(**kwargs)  # noqa: E501
            return data

    def wagetypesactionsynchronize_put_with_http_info(self, **kwargs):  # noqa: E501
        """wagetypesactionsynchronize_put  # noqa: E501

        synchronize Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wagetypesactionsynchronize_put_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method wagetypesactionsynchronize_put" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/wagetypes?action=synchronize', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def wagetypesactionvalidamelding_get(self, type, fordel, beskrivelse, **kwargs):  # noqa: E501
        """wagetypesactionvalidamelding_get  # noqa: E501

        validamelding Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wagetypesactionvalidamelding_get(type, fordel, beskrivelse, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object type: (required)
        :param Object fordel: (required)
        :param Object beskrivelse: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.wagetypesactionvalidamelding_get_with_http_info(type, fordel, beskrivelse, **kwargs)  # noqa: E501
        else:
            (data) = self.wagetypesactionvalidamelding_get_with_http_info(type, fordel, beskrivelse, **kwargs)  # noqa: E501
            return data

    def wagetypesactionvalidamelding_get_with_http_info(self, type, fordel, beskrivelse, **kwargs):  # noqa: E501
        """wagetypesactionvalidamelding_get  # noqa: E501

        validamelding Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wagetypesactionvalidamelding_get_with_http_info(type, fordel, beskrivelse, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object type: (required)
        :param Object fordel: (required)
        :param Object beskrivelse: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['type', 'fordel', 'beskrivelse']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method wagetypesactionvalidamelding_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `wagetypesactionvalidamelding_get`")  # noqa: E501
        # verify the required parameter 'fordel' is set
        if ('fordel' not in params or
                params['fordel'] is None):
            raise ValueError("Missing the required parameter `fordel` when calling `wagetypesactionvalidamelding_get`")  # noqa: E501
        # verify the required parameter 'beskrivelse' is set
        if ('beskrivelse' not in params or
                params['beskrivelse'] is None):
            raise ValueError("Missing the required parameter `beskrivelse` when calling `wagetypesactionvalidamelding_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'fordel' in params:
            path_params['fordel'] = params['fordel']  # noqa: E501
        if 'beskrivelse' in params:
            path_params['beskrivelse'] = params['beskrivelse']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/wagetypes?action=validamelding', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
