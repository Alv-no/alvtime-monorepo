# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class SalaryTransactionSumsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def salarysums_get(self, **kwargs):  # noqa: E501
        """salarysums_get  # noqa: E501

        Query SalaryTransactionSums  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.salarysums_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[SalaryTransactionSums]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.salarysums_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.salarysums_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def salarysums_get_with_http_info(self, **kwargs):  # noqa: E501
        """salarysums_get  # noqa: E501

        Query SalaryTransactionSums  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.salarysums_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[SalaryTransactionSums]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method salarysums_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/salarysums', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SalaryTransactionSums]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def salarysums_id_get(self, id, **kwargs):  # noqa: E501
        """salarysums_id_get  # noqa: E501

        Get SalaryTransactionSums  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.salarysums_id_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: SalaryTransactionSums
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.salarysums_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.salarysums_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def salarysums_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """salarysums_id_get  # noqa: E501

        Get SalaryTransactionSums  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.salarysums_id_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: SalaryTransactionSums
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method salarysums_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `salarysums_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/salarysums/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SalaryTransactionSums',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def salarysums_idactionyearly_sums_on_payrollrun_get(self, id, emp_no, emp_id, **kwargs):  # noqa: E501
        """salarysums_idactionyearly_sums_on_payrollrun_get  # noqa: E501

        yearly-sums-on-payrollrun Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.salarysums_idactionyearly_sums_on_payrollrun_get(id, emp_no, emp_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :param Object emp_no: (required)
        :param Object emp_id: (required)
        :return: SalaryTransactionSums
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.salarysums_idactionyearly_sums_on_payrollrun_get_with_http_info(id, emp_no, emp_id, **kwargs)  # noqa: E501
        else:
            (data) = self.salarysums_idactionyearly_sums_on_payrollrun_get_with_http_info(id, emp_no, emp_id, **kwargs)  # noqa: E501
            return data

    def salarysums_idactionyearly_sums_on_payrollrun_get_with_http_info(self, id, emp_no, emp_id, **kwargs):  # noqa: E501
        """salarysums_idactionyearly_sums_on_payrollrun_get  # noqa: E501

        yearly-sums-on-payrollrun Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.salarysums_idactionyearly_sums_on_payrollrun_get_with_http_info(id, emp_no, emp_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :param Object emp_no: (required)
        :param Object emp_id: (required)
        :return: SalaryTransactionSums
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id', 'emp_no', 'emp_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method salarysums_idactionyearly_sums_on_payrollrun_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `salarysums_idactionyearly_sums_on_payrollrun_get`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `salarysums_idactionyearly_sums_on_payrollrun_get`")  # noqa: E501
        # verify the required parameter 'emp_no' is set
        if ('emp_no' not in params or
                params['emp_no'] is None):
            raise ValueError("Missing the required parameter `emp_no` when calling `salarysums_idactionyearly_sums_on_payrollrun_get`")  # noqa: E501
        # verify the required parameter 'emp_id' is set
        if ('emp_id' not in params or
                params['emp_id'] is None):
            raise ValueError("Missing the required parameter `emp_id` when calling `salarysums_idactionyearly_sums_on_payrollrun_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'emp_no' in params:
            path_params['empNo'] = params['emp_no']  # noqa: E501
        if 'emp_id' in params:
            path_params['empID'] = params['emp_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/salarysums/{id}?action=yearly-sums-on-payrollrun', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SalaryTransactionSums',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def salarysumsactionget_sums_get(self, id, **kwargs):  # noqa: E501
        """salarysumsactionget_sums_get  # noqa: E501

        get-sums Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.salarysumsactionget_sums_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object id: (required)
        :return: SalaryTransactionSums
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.salarysumsactionget_sums_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.salarysumsactionget_sums_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def salarysumsactionget_sums_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """salarysumsactionget_sums_get  # noqa: E501

        get-sums Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.salarysumsactionget_sums_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object id: (required)
        :return: SalaryTransactionSums
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method salarysumsactionget_sums_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `salarysumsactionget_sums_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/salarysums?action=get-sums', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SalaryTransactionSums',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def salarysumsactiongetall_get(self, **kwargs):  # noqa: E501
        """salarysumsactiongetall_get  # noqa: E501

        getall Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.salarysumsactiongetall_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.salarysumsactiongetall_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.salarysumsactiongetall_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def salarysumsactiongetall_get_with_http_info(self, **kwargs):  # noqa: E501
        """salarysumsactiongetall_get  # noqa: E501

        getall Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.salarysumsactiongetall_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method salarysumsactiongetall_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/salarysums?action=getall', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def salarysumsactionsum_aga_lines_get(self, from_period, to_period, year, **kwargs):  # noqa: E501
        """salarysumsactionsum_aga_lines_get  # noqa: E501

        sum-aga-lines Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.salarysumsactionsum_aga_lines_get(from_period, to_period, year, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object from_period: (required)
        :param Object to_period: (required)
        :param Object year: (required)
        :return: TaxAndAgaSums
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.salarysumsactionsum_aga_lines_get_with_http_info(from_period, to_period, year, **kwargs)  # noqa: E501
        else:
            (data) = self.salarysumsactionsum_aga_lines_get_with_http_info(from_period, to_period, year, **kwargs)  # noqa: E501
            return data

    def salarysumsactionsum_aga_lines_get_with_http_info(self, from_period, to_period, year, **kwargs):  # noqa: E501
        """salarysumsactionsum_aga_lines_get  # noqa: E501

        sum-aga-lines Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.salarysumsactionsum_aga_lines_get_with_http_info(from_period, to_period, year, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object from_period: (required)
        :param Object to_period: (required)
        :param Object year: (required)
        :return: TaxAndAgaSums
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['from_period', 'to_period', 'year']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method salarysumsactionsum_aga_lines_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'from_period' is set
        if ('from_period' not in params or
                params['from_period'] is None):
            raise ValueError("Missing the required parameter `from_period` when calling `salarysumsactionsum_aga_lines_get`")  # noqa: E501
        # verify the required parameter 'to_period' is set
        if ('to_period' not in params or
                params['to_period'] is None):
            raise ValueError("Missing the required parameter `to_period` when calling `salarysumsactionsum_aga_lines_get`")  # noqa: E501
        # verify the required parameter 'year' is set
        if ('year' not in params or
                params['year'] is None):
            raise ValueError("Missing the required parameter `year` when calling `salarysumsactionsum_aga_lines_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'from_period' in params:
            path_params['fromPeriod'] = params['from_period']  # noqa: E501
        if 'to_period' in params:
            path_params['toPeriod'] = params['to_period']  # noqa: E501
        if 'year' in params:
            path_params['year'] = params['year']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/salarysums?action=sum-aga-lines', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaxAndAgaSums',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def salarysumsactionsums_in_period_get(self, from_period, to_period, year, **kwargs):  # noqa: E501
        """salarysumsactionsums_in_period_get  # noqa: E501

        sums-in-period Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.salarysumsactionsums_in_period_get(from_period, to_period, year, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object from_period: (required)
        :param Object to_period: (required)
        :param Object year: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.salarysumsactionsums_in_period_get_with_http_info(from_period, to_period, year, **kwargs)  # noqa: E501
        else:
            (data) = self.salarysumsactionsums_in_period_get_with_http_info(from_period, to_period, year, **kwargs)  # noqa: E501
            return data

    def salarysumsactionsums_in_period_get_with_http_info(self, from_period, to_period, year, **kwargs):  # noqa: E501
        """salarysumsactionsums_in_period_get  # noqa: E501

        sums-in-period Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.salarysumsactionsums_in_period_get_with_http_info(from_period, to_period, year, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object from_period: (required)
        :param Object to_period: (required)
        :param Object year: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['from_period', 'to_period', 'year']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method salarysumsactionsums_in_period_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'from_period' is set
        if ('from_period' not in params or
                params['from_period'] is None):
            raise ValueError("Missing the required parameter `from_period` when calling `salarysumsactionsums_in_period_get`")  # noqa: E501
        # verify the required parameter 'to_period' is set
        if ('to_period' not in params or
                params['to_period'] is None):
            raise ValueError("Missing the required parameter `to_period` when calling `salarysumsactionsums_in_period_get`")  # noqa: E501
        # verify the required parameter 'year' is set
        if ('year' not in params or
                params['year'] is None):
            raise ValueError("Missing the required parameter `year` when calling `salarysumsactionsums_in_period_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'from_period' in params:
            path_params['fromPeriod'] = params['from_period']  # noqa: E501
        if 'to_period' in params:
            path_params['toPeriod'] = params['to_period']  # noqa: E501
        if 'year' in params:
            path_params['year'] = params['year']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/salarysums?action=sums-in-period', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
