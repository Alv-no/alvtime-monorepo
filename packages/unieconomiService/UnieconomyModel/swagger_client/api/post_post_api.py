# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class PostPostApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def postposts_get(self, **kwargs):  # noqa: E501
        """postposts_get  # noqa: E501

        Query PostPost  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.postposts_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[PostPost]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.postposts_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.postposts_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def postposts_get_with_http_info(self, **kwargs):  # noqa: E501
        """postposts_get  # noqa: E501

        Query PostPost  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.postposts_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[PostPost]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method postposts_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/postposts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PostPost]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def postposts_id_delete(self, id, **kwargs):  # noqa: E501
        """postposts_id_delete  # noqa: E501

        Delete PostPost  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.postposts_id_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: PostPost
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.postposts_id_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.postposts_id_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def postposts_id_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """postposts_id_delete  # noqa: E501

        Delete PostPost  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.postposts_id_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: PostPost
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method postposts_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `postposts_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/postposts/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostPost',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def postposts_id_get(self, id, **kwargs):  # noqa: E501
        """postposts_id_get  # noqa: E501

        Get PostPost  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.postposts_id_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: PostPost
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.postposts_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.postposts_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def postposts_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """postposts_id_get  # noqa: E501

        Get PostPost  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.postposts_id_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: PostPost
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method postposts_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `postposts_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/postposts/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostPost',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def postposts_id_put(self, body, id, **kwargs):  # noqa: E501
        """postposts_id_put  # noqa: E501

        Update PostPost  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.postposts_id_put(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostPost body: (required)
        :param int id: (required)
        :return: PostPost
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.postposts_id_put_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.postposts_id_put_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def postposts_id_put_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """postposts_id_put  # noqa: E501

        Update PostPost  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.postposts_id_put_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostPost body: (required)
        :param int id: (required)
        :return: PostPost
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method postposts_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `postposts_id_put`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `postposts_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/postposts/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostPost',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def postposts_post(self, body, **kwargs):  # noqa: E501
        """postposts_post  # noqa: E501

        Create PostPost  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.postposts_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostPost body: (required)
        :return: PostPost
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.postposts_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.postposts_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def postposts_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """postposts_post  # noqa: E501

        Create PostPost  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.postposts_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostPost body: (required)
        :return: PostPost
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method postposts_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `postposts_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/postposts', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostPost',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def postpostsactionget_suggestions_get(self, methods, customer_id, supplier_id, account_id, **kwargs):  # noqa: E501
        """postpostsactionget_suggestions_get  # noqa: E501

        get-suggestions Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.postpostsactionget_suggestions_get(methods, customer_id, supplier_id, account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object methods: (required)
        :param Object customer_id: (required)
        :param Object supplier_id: (required)
        :param Object account_id: (required)
        :return: MarkingResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.postpostsactionget_suggestions_get_with_http_info(methods, customer_id, supplier_id, account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.postpostsactionget_suggestions_get_with_http_info(methods, customer_id, supplier_id, account_id, **kwargs)  # noqa: E501
            return data

    def postpostsactionget_suggestions_get_with_http_info(self, methods, customer_id, supplier_id, account_id, **kwargs):  # noqa: E501
        """postpostsactionget_suggestions_get  # noqa: E501

        get-suggestions Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.postpostsactionget_suggestions_get_with_http_info(methods, customer_id, supplier_id, account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object methods: (required)
        :param Object customer_id: (required)
        :param Object supplier_id: (required)
        :param Object account_id: (required)
        :return: MarkingResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['methods', 'customer_id', 'supplier_id', 'account_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method postpostsactionget_suggestions_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'methods' is set
        if ('methods' not in params or
                params['methods'] is None):
            raise ValueError("Missing the required parameter `methods` when calling `postpostsactionget_suggestions_get`")  # noqa: E501
        # verify the required parameter 'customer_id' is set
        if ('customer_id' not in params or
                params['customer_id'] is None):
            raise ValueError("Missing the required parameter `customer_id` when calling `postpostsactionget_suggestions_get`")  # noqa: E501
        # verify the required parameter 'supplier_id' is set
        if ('supplier_id' not in params or
                params['supplier_id'] is None):
            raise ValueError("Missing the required parameter `supplier_id` when calling `postpostsactionget_suggestions_get`")  # noqa: E501
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `postpostsactionget_suggestions_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'methods' in params:
            path_params['methods'] = params['methods']  # noqa: E501
        if 'customer_id' in params:
            path_params['customerID'] = params['customer_id']  # noqa: E501
        if 'supplier_id' in params:
            path_params['supplierID'] = params['supplier_id']  # noqa: E501
        if 'account_id' in params:
            path_params['accountID'] = params['account_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/postposts?action=get-suggestions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MarkingResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def postpostsactionmarkposts_post(self, **kwargs):  # noqa: E501
        """postpostsactionmarkposts_post  # noqa: E501

        markposts Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.postpostsactionmarkposts_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[JournalEntryLineCouple] body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.postpostsactionmarkposts_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.postpostsactionmarkposts_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def postpostsactionmarkposts_post_with_http_info(self, **kwargs):  # noqa: E501
        """postpostsactionmarkposts_post  # noqa: E501

        markposts Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.postpostsactionmarkposts_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[JournalEntryLineCouple] body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method postpostsactionmarkposts_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/postposts?action=markposts', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def postpostsactionreset_journalentryline_postpost_status_to_open_put(self, line, **kwargs):  # noqa: E501
        """postpostsactionreset_journalentryline_postpost_status_to_open_put  # noqa: E501

        reset-journalentryline-postpost-status-to-open Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.postpostsactionreset_journalentryline_postpost_status_to_open_put(line, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object line: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.postpostsactionreset_journalentryline_postpost_status_to_open_put_with_http_info(line, **kwargs)  # noqa: E501
        else:
            (data) = self.postpostsactionreset_journalentryline_postpost_status_to_open_put_with_http_info(line, **kwargs)  # noqa: E501
            return data

    def postpostsactionreset_journalentryline_postpost_status_to_open_put_with_http_info(self, line, **kwargs):  # noqa: E501
        """postpostsactionreset_journalentryline_postpost_status_to_open_put  # noqa: E501

        reset-journalentryline-postpost-status-to-open Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.postpostsactionreset_journalentryline_postpost_status_to_open_put_with_http_info(line, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object line: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['line']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method postpostsactionreset_journalentryline_postpost_status_to_open_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'line' is set
        if ('line' not in params or
                params['line'] is None):
            raise ValueError("Missing the required parameter `line` when calling `postpostsactionreset_journalentryline_postpost_status_to_open_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'line' in params:
            path_params['line'] = params['line']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/postposts?action=reset-journalentryline-postpost-status-to-open', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def postpostsactionreset_journalentrylines_postpost_status_to_open_put(self, sub_account_id, sub_account_type, **kwargs):  # noqa: E501
        """postpostsactionreset_journalentrylines_postpost_status_to_open_put  # noqa: E501

        reset-journalentrylines-postpost-status-to-open Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.postpostsactionreset_journalentrylines_postpost_status_to_open_put(sub_account_id, sub_account_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object sub_account_id: (required)
        :param Object sub_account_type: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.postpostsactionreset_journalentrylines_postpost_status_to_open_put_with_http_info(sub_account_id, sub_account_type, **kwargs)  # noqa: E501
        else:
            (data) = self.postpostsactionreset_journalentrylines_postpost_status_to_open_put_with_http_info(sub_account_id, sub_account_type, **kwargs)  # noqa: E501
            return data

    def postpostsactionreset_journalentrylines_postpost_status_to_open_put_with_http_info(self, sub_account_id, sub_account_type, **kwargs):  # noqa: E501
        """postpostsactionreset_journalentrylines_postpost_status_to_open_put  # noqa: E501

        reset-journalentrylines-postpost-status-to-open Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.postpostsactionreset_journalentrylines_postpost_status_to_open_put_with_http_info(sub_account_id, sub_account_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object sub_account_id: (required)
        :param Object sub_account_type: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sub_account_id', 'sub_account_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method postpostsactionreset_journalentrylines_postpost_status_to_open_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sub_account_id' is set
        if ('sub_account_id' not in params or
                params['sub_account_id'] is None):
            raise ValueError("Missing the required parameter `sub_account_id` when calling `postpostsactionreset_journalentrylines_postpost_status_to_open_put`")  # noqa: E501
        # verify the required parameter 'sub_account_type' is set
        if ('sub_account_type' not in params or
                params['sub_account_type'] is None):
            raise ValueError("Missing the required parameter `sub_account_type` when calling `postpostsactionreset_journalentrylines_postpost_status_to_open_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sub_account_id' in params:
            path_params['subAccountID'] = params['sub_account_id']  # noqa: E501
        if 'sub_account_type' in params:
            path_params['subAccountType'] = params['sub_account_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/postposts?action=reset-journalentrylines-postpost-status-to-open', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def postpostsactionrevert_postpost_post(self, **kwargs):  # noqa: E501
        """postpostsactionrevert_postpost_post  # noqa: E501

        revert-postpost Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.postpostsactionrevert_postpost_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.postpostsactionrevert_postpost_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.postpostsactionrevert_postpost_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def postpostsactionrevert_postpost_post_with_http_info(self, **kwargs):  # noqa: E501
        """postpostsactionrevert_postpost_post  # noqa: E501

        revert-postpost Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.postpostsactionrevert_postpost_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method postpostsactionrevert_postpost_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/postposts?action=revert-postpost', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
