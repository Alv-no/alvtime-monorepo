# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class FileApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def files_entitytype_entityid_get(self, **kwargs):  # noqa: E501
        """files_entitytype_entityid_get  # noqa: E501

        Query File  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.files_entitytype_entityid_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[File]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.files_entitytype_entityid_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.files_entitytype_entityid_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def files_entitytype_entityid_get_with_http_info(self, **kwargs):  # noqa: E501
        """files_entitytype_entityid_get  # noqa: E501

        Query File  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.files_entitytype_entityid_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[File]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method files_entitytype_entityid_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/files/{entitytype}/{entityid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[File]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def files_entitytype_entityid_id_delete(self, id, **kwargs):  # noqa: E501
        """files_entitytype_entityid_id_delete  # noqa: E501

        Delete File  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.files_entitytype_entityid_id_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: File
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.files_entitytype_entityid_id_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.files_entitytype_entityid_id_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def files_entitytype_entityid_id_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """files_entitytype_entityid_id_delete  # noqa: E501

        Delete File  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.files_entitytype_entityid_id_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: File
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method files_entitytype_entityid_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `files_entitytype_entityid_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/files/{entitytype}/{entityid}/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='File',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def files_entitytype_entityid_id_get(self, id, **kwargs):  # noqa: E501
        """files_entitytype_entityid_id_get  # noqa: E501

        Get File  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.files_entitytype_entityid_id_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: File
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.files_entitytype_entityid_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.files_entitytype_entityid_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def files_entitytype_entityid_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """files_entitytype_entityid_id_get  # noqa: E501

        Get File  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.files_entitytype_entityid_id_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: File
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method files_entitytype_entityid_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `files_entitytype_entityid_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/files/{entitytype}/{entityid}/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='File',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def files_entitytype_entityid_idactiondownload_get(self, id, **kwargs):  # noqa: E501
        """files_entitytype_entityid_idactiondownload_get  # noqa: E501

        download Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.files_entitytype_entityid_idactiondownload_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.files_entitytype_entityid_idactiondownload_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.files_entitytype_entityid_idactiondownload_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def files_entitytype_entityid_idactiondownload_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """files_entitytype_entityid_idactiondownload_get  # noqa: E501

        download Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.files_entitytype_entityid_idactiondownload_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method files_entitytype_entityid_idactiondownload_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `files_entitytype_entityid_idactiondownload_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/files/{entitytype}/{entityid}/{id}?action=download', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def files_entitytype_entityid_idactionfinalize_post(self, id, id, **kwargs):  # noqa: E501
        """files_entitytype_entityid_idactionfinalize_post  # noqa: E501

        finalize Transition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.files_entitytype_entityid_idactionfinalize_post(id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.files_entitytype_entityid_idactionfinalize_post_with_http_info(id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.files_entitytype_entityid_idactionfinalize_post_with_http_info(id, id, **kwargs)  # noqa: E501
            return data

    def files_entitytype_entityid_idactionfinalize_post_with_http_info(self, id, id, **kwargs):  # noqa: E501
        """files_entitytype_entityid_idactionfinalize_post  # noqa: E501

        finalize Transition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.files_entitytype_entityid_idactionfinalize_post_with_http_info(id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method files_entitytype_entityid_idactionfinalize_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `files_entitytype_entityid_idactionfinalize_post`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `files_entitytype_entityid_idactionfinalize_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/files/{entitytype}/{entityid}/{id}?action=finalize', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def files_entitytype_entityid_idactionocranalyse_get(self, id, **kwargs):  # noqa: E501
        """files_entitytype_entityid_idactionocranalyse_get  # noqa: E501

        ocranalyse Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.files_entitytype_entityid_idactionocranalyse_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.files_entitytype_entityid_idactionocranalyse_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.files_entitytype_entityid_idactionocranalyse_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def files_entitytype_entityid_idactionocranalyse_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """files_entitytype_entityid_idactionocranalyse_get  # noqa: E501

        ocranalyse Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.files_entitytype_entityid_idactionocranalyse_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method files_entitytype_entityid_idactionocranalyse_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `files_entitytype_entityid_idactionocranalyse_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/files/{entitytype}/{entityid}/{id}?action=ocranalyse', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def files_entitytype_entityid_post(self, body, **kwargs):  # noqa: E501
        """files_entitytype_entityid_post  # noqa: E501

        Create File  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.files_entitytype_entityid_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param File body: (required)
        :return: File
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.files_entitytype_entityid_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.files_entitytype_entityid_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def files_entitytype_entityid_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """files_entitytype_entityid_post  # noqa: E501

        Create File  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.files_entitytype_entityid_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param File body: (required)
        :return: File
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method files_entitytype_entityid_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `files_entitytype_entityid_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/files/{entitytype}/{entityid}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='File',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def files_entitytype_entityidactiondelete_by_filetag_delete(self, file_tag_name, **kwargs):  # noqa: E501
        """files_entitytype_entityidactiondelete_by_filetag_delete  # noqa: E501

        delete-by-filetag Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.files_entitytype_entityidactiondelete_by_filetag_delete(file_tag_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object file_tag_name: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.files_entitytype_entityidactiondelete_by_filetag_delete_with_http_info(file_tag_name, **kwargs)  # noqa: E501
        else:
            (data) = self.files_entitytype_entityidactiondelete_by_filetag_delete_with_http_info(file_tag_name, **kwargs)  # noqa: E501
            return data

    def files_entitytype_entityidactiondelete_by_filetag_delete_with_http_info(self, file_tag_name, **kwargs):  # noqa: E501
        """files_entitytype_entityidactiondelete_by_filetag_delete  # noqa: E501

        delete-by-filetag Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.files_entitytype_entityidactiondelete_by_filetag_delete_with_http_info(file_tag_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object file_tag_name: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file_tag_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method files_entitytype_entityidactiondelete_by_filetag_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'file_tag_name' is set
        if ('file_tag_name' not in params or
                params['file_tag_name'] is None):
            raise ValueError("Missing the required parameter `file_tag_name` when calling `files_entitytype_entityidactiondelete_by_filetag_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'file_tag_name' in params:
            path_params['fileTagName'] = params['file_tag_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/files/{entitytype}/{entityid}?action=delete-by-filetag', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def files_get(self, **kwargs):  # noqa: E501
        """files_get  # noqa: E501

        Query File  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.files_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[File]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.files_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.files_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def files_get_with_http_info(self, **kwargs):  # noqa: E501
        """files_get  # noqa: E501

        Query File  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.files_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[File]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method files_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/files', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[File]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def files_id_delete(self, id, **kwargs):  # noqa: E501
        """files_id_delete  # noqa: E501

        Delete File  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.files_id_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: File
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.files_id_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.files_id_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def files_id_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """files_id_delete  # noqa: E501

        Delete File  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.files_id_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: File
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method files_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `files_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/files/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='File',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def files_id_get(self, id, **kwargs):  # noqa: E501
        """files_id_get  # noqa: E501

        Get File  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.files_id_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: File
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.files_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.files_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def files_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """files_id_get  # noqa: E501

        Get File  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.files_id_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: File
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method files_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `files_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/files/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='File',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def files_id_put(self, body, id, **kwargs):  # noqa: E501
        """files_id_put  # noqa: E501

        Update File  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.files_id_put(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param File body: (required)
        :param int id: (required)
        :return: File
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.files_id_put_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.files_id_put_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def files_id_put_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """files_id_put  # noqa: E501

        Update File  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.files_id_put_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param File body: (required)
        :param int id: (required)
        :return: File
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method files_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `files_id_put`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `files_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/files/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='File',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def files_idactiondownload_get(self, id, **kwargs):  # noqa: E501
        """files_idactiondownload_get  # noqa: E501

        download Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.files_idactiondownload_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.files_idactiondownload_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.files_idactiondownload_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def files_idactiondownload_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """files_idactiondownload_get  # noqa: E501

        download Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.files_idactiondownload_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method files_idactiondownload_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `files_idactiondownload_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/files/{id}?action=download', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def files_idactionfinalize_post(self, id, id, **kwargs):  # noqa: E501
        """files_idactionfinalize_post  # noqa: E501

        finalize Transition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.files_idactionfinalize_post(id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.files_idactionfinalize_post_with_http_info(id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.files_idactionfinalize_post_with_http_info(id, id, **kwargs)  # noqa: E501
            return data

    def files_idactionfinalize_post_with_http_info(self, id, id, **kwargs):  # noqa: E501
        """files_idactionfinalize_post  # noqa: E501

        finalize Transition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.files_idactionfinalize_post_with_http_info(id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method files_idactionfinalize_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `files_idactionfinalize_post`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `files_idactionfinalize_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/files/{id}?action=finalize', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def files_idactionlink_post(self, id, entitytype, entityid, **kwargs):  # noqa: E501
        """files_idactionlink_post  # noqa: E501

        link Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.files_idactionlink_post(id, entitytype, entityid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object entitytype: (required)
        :param Object entityid: (required)
        :return: File
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.files_idactionlink_post_with_http_info(id, entitytype, entityid, **kwargs)  # noqa: E501
        else:
            (data) = self.files_idactionlink_post_with_http_info(id, entitytype, entityid, **kwargs)  # noqa: E501
            return data

    def files_idactionlink_post_with_http_info(self, id, entitytype, entityid, **kwargs):  # noqa: E501
        """files_idactionlink_post  # noqa: E501

        link Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.files_idactionlink_post_with_http_info(id, entitytype, entityid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object entitytype: (required)
        :param Object entityid: (required)
        :return: File
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'entitytype', 'entityid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method files_idactionlink_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `files_idactionlink_post`")  # noqa: E501
        # verify the required parameter 'entitytype' is set
        if ('entitytype' not in params or
                params['entitytype'] is None):
            raise ValueError("Missing the required parameter `entitytype` when calling `files_idactionlink_post`")  # noqa: E501
        # verify the required parameter 'entityid' is set
        if ('entityid' not in params or
                params['entityid'] is None):
            raise ValueError("Missing the required parameter `entityid` when calling `files_idactionlink_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'entitytype' in params:
            path_params['entitytype'] = params['entitytype']  # noqa: E501
        if 'entityid' in params:
            path_params['entityid'] = params['entityid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/files/{id}?action=link', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='File',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def files_idactionocranalyse_get(self, id, **kwargs):  # noqa: E501
        """files_idactionocranalyse_get  # noqa: E501

        ocranalyse Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.files_idactionocranalyse_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.files_idactionocranalyse_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.files_idactionocranalyse_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def files_idactionocranalyse_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """files_idactionocranalyse_get  # noqa: E501

        ocranalyse Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.files_idactionocranalyse_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method files_idactionocranalyse_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `files_idactionocranalyse_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/files/{id}?action=ocranalyse', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def files_idactionset_is_attachment_put(self, id, entitytype, entityid, is_attachment, **kwargs):  # noqa: E501
        """files_idactionset_is_attachment_put  # noqa: E501

        set-is-attachment Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.files_idactionset_is_attachment_put(id, entitytype, entityid, is_attachment, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object entitytype: (required)
        :param Object entityid: (required)
        :param Object is_attachment: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.files_idactionset_is_attachment_put_with_http_info(id, entitytype, entityid, is_attachment, **kwargs)  # noqa: E501
        else:
            (data) = self.files_idactionset_is_attachment_put_with_http_info(id, entitytype, entityid, is_attachment, **kwargs)  # noqa: E501
            return data

    def files_idactionset_is_attachment_put_with_http_info(self, id, entitytype, entityid, is_attachment, **kwargs):  # noqa: E501
        """files_idactionset_is_attachment_put  # noqa: E501

        set-is-attachment Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.files_idactionset_is_attachment_put_with_http_info(id, entitytype, entityid, is_attachment, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object entitytype: (required)
        :param Object entityid: (required)
        :param Object is_attachment: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'entitytype', 'entityid', 'is_attachment']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method files_idactionset_is_attachment_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `files_idactionset_is_attachment_put`")  # noqa: E501
        # verify the required parameter 'entitytype' is set
        if ('entitytype' not in params or
                params['entitytype'] is None):
            raise ValueError("Missing the required parameter `entitytype` when calling `files_idactionset_is_attachment_put`")  # noqa: E501
        # verify the required parameter 'entityid' is set
        if ('entityid' not in params or
                params['entityid'] is None):
            raise ValueError("Missing the required parameter `entityid` when calling `files_idactionset_is_attachment_put`")  # noqa: E501
        # verify the required parameter 'is_attachment' is set
        if ('is_attachment' not in params or
                params['is_attachment'] is None):
            raise ValueError("Missing the required parameter `is_attachment` when calling `files_idactionset_is_attachment_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'entitytype' in params:
            path_params['entitytype'] = params['entitytype']  # noqa: E501
        if 'entityid' in params:
            path_params['entityid'] = params['entityid']  # noqa: E501
        if 'is_attachment' in params:
            path_params['isAttachment'] = params['is_attachment']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/files/{id}?action=set-is-attachment', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def files_idactionunlink_post(self, id, entitytype, entityid, **kwargs):  # noqa: E501
        """files_idactionunlink_post  # noqa: E501

        unlink Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.files_idactionunlink_post(id, entitytype, entityid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object entitytype: (required)
        :param Object entityid: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.files_idactionunlink_post_with_http_info(id, entitytype, entityid, **kwargs)  # noqa: E501
        else:
            (data) = self.files_idactionunlink_post_with_http_info(id, entitytype, entityid, **kwargs)  # noqa: E501
            return data

    def files_idactionunlink_post_with_http_info(self, id, entitytype, entityid, **kwargs):  # noqa: E501
        """files_idactionunlink_post  # noqa: E501

        unlink Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.files_idactionunlink_post_with_http_info(id, entitytype, entityid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object entitytype: (required)
        :param Object entityid: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'entitytype', 'entityid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method files_idactionunlink_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `files_idactionunlink_post`")  # noqa: E501
        # verify the required parameter 'entitytype' is set
        if ('entitytype' not in params or
                params['entitytype'] is None):
            raise ValueError("Missing the required parameter `entitytype` when calling `files_idactionunlink_post`")  # noqa: E501
        # verify the required parameter 'entityid' is set
        if ('entityid' not in params or
                params['entityid'] is None):
            raise ValueError("Missing the required parameter `entityid` when calling `files_idactionunlink_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'entitytype' in params:
            path_params['entitytype'] = params['entitytype']  # noqa: E501
        if 'entityid' in params:
            path_params['entityid'] = params['entityid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/files/{id}?action=unlink', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def files_post(self, body, **kwargs):  # noqa: E501
        """files_post  # noqa: E501

        Create File  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.files_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param File body: (required)
        :return: File
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.files_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.files_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def files_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """files_post  # noqa: E501

        Create File  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.files_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param File body: (required)
        :return: File
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method files_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `files_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/files', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='File',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def filesactionsplit_file_multiple_post(self, old_file_id, new_file_ids, **kwargs):  # noqa: E501
        """filesactionsplit_file_multiple_post  # noqa: E501

        split-file-multiple Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.filesactionsplit_file_multiple_post(old_file_id, new_file_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object old_file_id: (required)
        :param Object new_file_ids: (required)
        :return: SplitFileMultipeResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.filesactionsplit_file_multiple_post_with_http_info(old_file_id, new_file_ids, **kwargs)  # noqa: E501
        else:
            (data) = self.filesactionsplit_file_multiple_post_with_http_info(old_file_id, new_file_ids, **kwargs)  # noqa: E501
            return data

    def filesactionsplit_file_multiple_post_with_http_info(self, old_file_id, new_file_ids, **kwargs):  # noqa: E501
        """filesactionsplit_file_multiple_post  # noqa: E501

        split-file-multiple Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.filesactionsplit_file_multiple_post_with_http_info(old_file_id, new_file_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object old_file_id: (required)
        :param Object new_file_ids: (required)
        :return: SplitFileMultipeResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['old_file_id', 'new_file_ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method filesactionsplit_file_multiple_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'old_file_id' is set
        if ('old_file_id' not in params or
                params['old_file_id'] is None):
            raise ValueError("Missing the required parameter `old_file_id` when calling `filesactionsplit_file_multiple_post`")  # noqa: E501
        # verify the required parameter 'new_file_ids' is set
        if ('new_file_ids' not in params or
                params['new_file_ids'] is None):
            raise ValueError("Missing the required parameter `new_file_ids` when calling `filesactionsplit_file_multiple_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'old_file_id' in params:
            path_params['oldFileID'] = params['old_file_id']  # noqa: E501
        if 'new_file_ids' in params:
            path_params['newFileIds'] = params['new_file_ids']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/files?action=split-file-multiple', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SplitFileMultipeResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def filesactionsplit_file_post(self, old_file_id, new_file_id1, new_file_id2, **kwargs):  # noqa: E501
        """filesactionsplit_file_post  # noqa: E501

        split-file Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.filesactionsplit_file_post(old_file_id, new_file_id1, new_file_id2, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object old_file_id: (required)
        :param Object new_file_id1: (required)
        :param Object new_file_id2: (required)
        :return: SplitFileResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.filesactionsplit_file_post_with_http_info(old_file_id, new_file_id1, new_file_id2, **kwargs)  # noqa: E501
        else:
            (data) = self.filesactionsplit_file_post_with_http_info(old_file_id, new_file_id1, new_file_id2, **kwargs)  # noqa: E501
            return data

    def filesactionsplit_file_post_with_http_info(self, old_file_id, new_file_id1, new_file_id2, **kwargs):  # noqa: E501
        """filesactionsplit_file_post  # noqa: E501

        split-file Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.filesactionsplit_file_post_with_http_info(old_file_id, new_file_id1, new_file_id2, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object old_file_id: (required)
        :param Object new_file_id1: (required)
        :param Object new_file_id2: (required)
        :return: SplitFileResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['old_file_id', 'new_file_id1', 'new_file_id2']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method filesactionsplit_file_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'old_file_id' is set
        if ('old_file_id' not in params or
                params['old_file_id'] is None):
            raise ValueError("Missing the required parameter `old_file_id` when calling `filesactionsplit_file_post`")  # noqa: E501
        # verify the required parameter 'new_file_id1' is set
        if ('new_file_id1' not in params or
                params['new_file_id1'] is None):
            raise ValueError("Missing the required parameter `new_file_id1` when calling `filesactionsplit_file_post`")  # noqa: E501
        # verify the required parameter 'new_file_id2' is set
        if ('new_file_id2' not in params or
                params['new_file_id2'] is None):
            raise ValueError("Missing the required parameter `new_file_id2` when calling `filesactionsplit_file_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'old_file_id' in params:
            path_params['oldFileID'] = params['old_file_id']  # noqa: E501
        if 'new_file_id1' in params:
            path_params['newFileID1'] = params['new_file_id1']  # noqa: E501
        if 'new_file_id2' in params:
            path_params['newFileID2'] = params['new_file_id2']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/files?action=split-file', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SplitFileResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def filetags_tagnames_status_get(self, **kwargs):  # noqa: E501
        """filetags_tagnames_status_get  # noqa: E501

        Query File  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.filetags_tagnames_status_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[File]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.filetags_tagnames_status_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.filetags_tagnames_status_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def filetags_tagnames_status_get_with_http_info(self, **kwargs):  # noqa: E501
        """filetags_tagnames_status_get  # noqa: E501

        Query File  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.filetags_tagnames_status_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[File]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method filetags_tagnames_status_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/filetags/{tagnames}/{status}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[File]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def filetags_tagnames_statusactionget_supplier_invoice_inbox_count_get(self, **kwargs):  # noqa: E501
        """filetags_tagnames_statusactionget_supplier_invoice_inbox_count_get  # noqa: E501

        get-supplierInvoice-inbox-count Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.filetags_tagnames_statusactionget_supplier_invoice_inbox_count_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.filetags_tagnames_statusactionget_supplier_invoice_inbox_count_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.filetags_tagnames_statusactionget_supplier_invoice_inbox_count_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def filetags_tagnames_statusactionget_supplier_invoice_inbox_count_get_with_http_info(self, **kwargs):  # noqa: E501
        """filetags_tagnames_statusactionget_supplier_invoice_inbox_count_get  # noqa: E501

        get-supplierInvoice-inbox-count Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.filetags_tagnames_statusactionget_supplier_invoice_inbox_count_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method filetags_tagnames_statusactionget_supplier_invoice_inbox_count_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/filetags/{tagnames}/{status}?action=get-supplierInvoice-inbox-count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def filetags_tagnames_statusactionget_supplier_invoice_inbox_get(self, top, skip, **kwargs):  # noqa: E501
        """filetags_tagnames_statusactionget_supplier_invoice_inbox_get  # noqa: E501

        get-supplierInvoice-inbox Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.filetags_tagnames_statusactionget_supplier_invoice_inbox_get(top, skip, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object top: (required)
        :param Object skip: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.filetags_tagnames_statusactionget_supplier_invoice_inbox_get_with_http_info(top, skip, **kwargs)  # noqa: E501
        else:
            (data) = self.filetags_tagnames_statusactionget_supplier_invoice_inbox_get_with_http_info(top, skip, **kwargs)  # noqa: E501
            return data

    def filetags_tagnames_statusactionget_supplier_invoice_inbox_get_with_http_info(self, top, skip, **kwargs):  # noqa: E501
        """filetags_tagnames_statusactionget_supplier_invoice_inbox_get  # noqa: E501

        get-supplierInvoice-inbox Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.filetags_tagnames_statusactionget_supplier_invoice_inbox_get_with_http_info(top, skip, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object top: (required)
        :param Object skip: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['top', 'skip']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method filetags_tagnames_statusactionget_supplier_invoice_inbox_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'top' is set
        if ('top' not in params or
                params['top'] is None):
            raise ValueError("Missing the required parameter `top` when calling `filetags_tagnames_statusactionget_supplier_invoice_inbox_get`")  # noqa: E501
        # verify the required parameter 'skip' is set
        if ('skip' not in params or
                params['skip'] is None):
            raise ValueError("Missing the required parameter `skip` when calling `filetags_tagnames_statusactionget_supplier_invoice_inbox_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'top' in params:
            path_params['top'] = params['top']  # noqa: E501
        if 'skip' in params:
            path_params['skip'] = params['skip']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/filetags/{tagnames}/{status}?action=get-supplierInvoice-inbox', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
