# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class PayrollRunApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def payrollrun_get(self, **kwargs):  # noqa: E501
        """payrollrun_get  # noqa: E501

        Query PayrollRun  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payrollrun_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[PayrollRun]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.payrollrun_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.payrollrun_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def payrollrun_get_with_http_info(self, **kwargs):  # noqa: E501
        """payrollrun_get  # noqa: E501

        Query PayrollRun  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payrollrun_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[PayrollRun]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method payrollrun_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/payrollrun', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PayrollRun]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def payrollrun_id_delete(self, id, **kwargs):  # noqa: E501
        """payrollrun_id_delete  # noqa: E501

        Delete PayrollRun  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payrollrun_id_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: PayrollRun
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.payrollrun_id_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.payrollrun_id_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def payrollrun_id_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """payrollrun_id_delete  # noqa: E501

        Delete PayrollRun  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payrollrun_id_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: PayrollRun
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method payrollrun_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `payrollrun_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/payrollrun/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PayrollRun',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def payrollrun_id_get(self, id, **kwargs):  # noqa: E501
        """payrollrun_id_get  # noqa: E501

        Get PayrollRun  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payrollrun_id_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: PayrollRun
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.payrollrun_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.payrollrun_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def payrollrun_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """payrollrun_id_get  # noqa: E501

        Get PayrollRun  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payrollrun_id_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: PayrollRun
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method payrollrun_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `payrollrun_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/payrollrun/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PayrollRun',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def payrollrun_id_put(self, body, id, **kwargs):  # noqa: E501
        """payrollrun_id_put  # noqa: E501

        Update PayrollRun  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payrollrun_id_put(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PayrollRun body: (required)
        :param int id: (required)
        :return: PayrollRun
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.payrollrun_id_put_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.payrollrun_id_put_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def payrollrun_id_put_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """payrollrun_id_put  # noqa: E501

        Update PayrollRun  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payrollrun_id_put_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PayrollRun body: (required)
        :param int id: (required)
        :return: PayrollRun
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method payrollrun_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `payrollrun_id_put`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `payrollrun_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/payrollrun/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PayrollRun',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def payrollrun_idactionbook_put(self, id, accounting_date, numberseries_id, booking_type, refresh, **kwargs):  # noqa: E501
        """payrollrun_idactionbook_put  # noqa: E501

        book Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payrollrun_idactionbook_put(id, accounting_date, numberseries_id, booking_type, refresh, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object accounting_date: (required)
        :param Object numberseries_id: (required)
        :param Object booking_type: (required)
        :param Object refresh: (required)
        :return: list[JournalEntryLine]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.payrollrun_idactionbook_put_with_http_info(id, accounting_date, numberseries_id, booking_type, refresh, **kwargs)  # noqa: E501
        else:
            (data) = self.payrollrun_idactionbook_put_with_http_info(id, accounting_date, numberseries_id, booking_type, refresh, **kwargs)  # noqa: E501
            return data

    def payrollrun_idactionbook_put_with_http_info(self, id, accounting_date, numberseries_id, booking_type, refresh, **kwargs):  # noqa: E501
        """payrollrun_idactionbook_put  # noqa: E501

        book Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payrollrun_idactionbook_put_with_http_info(id, accounting_date, numberseries_id, booking_type, refresh, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object accounting_date: (required)
        :param Object numberseries_id: (required)
        :param Object booking_type: (required)
        :param Object refresh: (required)
        :return: list[JournalEntryLine]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'accounting_date', 'numberseries_id', 'booking_type', 'refresh']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method payrollrun_idactionbook_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `payrollrun_idactionbook_put`")  # noqa: E501
        # verify the required parameter 'accounting_date' is set
        if ('accounting_date' not in params or
                params['accounting_date'] is None):
            raise ValueError("Missing the required parameter `accounting_date` when calling `payrollrun_idactionbook_put`")  # noqa: E501
        # verify the required parameter 'numberseries_id' is set
        if ('numberseries_id' not in params or
                params['numberseries_id'] is None):
            raise ValueError("Missing the required parameter `numberseries_id` when calling `payrollrun_idactionbook_put`")  # noqa: E501
        # verify the required parameter 'booking_type' is set
        if ('booking_type' not in params or
                params['booking_type'] is None):
            raise ValueError("Missing the required parameter `booking_type` when calling `payrollrun_idactionbook_put`")  # noqa: E501
        # verify the required parameter 'refresh' is set
        if ('refresh' not in params or
                params['refresh'] is None):
            raise ValueError("Missing the required parameter `refresh` when calling `payrollrun_idactionbook_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'accounting_date' in params:
            path_params['accountingDate'] = params['accounting_date']  # noqa: E501
        if 'numberseries_id' in params:
            path_params['numberseriesID'] = params['numberseries_id']  # noqa: E501
        if 'booking_type' in params:
            path_params['bookingType'] = params['booking_type']  # noqa: E501
        if 'refresh' in params:
            path_params['refresh'] = params['refresh']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/payrollrun/{id}?action=book', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[JournalEntryLine]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def payrollrun_idactioncalculate_put(self, id, **kwargs):  # noqa: E501
        """payrollrun_idactioncalculate_put  # noqa: E501

        calculate Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payrollrun_idactioncalculate_put(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.payrollrun_idactioncalculate_put_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.payrollrun_idactioncalculate_put_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def payrollrun_idactioncalculate_put_with_http_info(self, id, **kwargs):  # noqa: E501
        """payrollrun_idactioncalculate_put  # noqa: E501

        calculate Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payrollrun_idactioncalculate_put_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method payrollrun_idactioncalculate_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `payrollrun_idactioncalculate_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/payrollrun/{id}?action=calculate', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def payrollrun_idactioncalculatejob_put(self, id, **kwargs):  # noqa: E501
        """payrollrun_idactioncalculatejob_put  # noqa: E501

        calculatejob Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payrollrun_idactioncalculatejob_put(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.payrollrun_idactioncalculatejob_put_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.payrollrun_idactioncalculatejob_put_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def payrollrun_idactioncalculatejob_put_with_http_info(self, id, **kwargs):  # noqa: E501
        """payrollrun_idactioncalculatejob_put  # noqa: E501

        calculatejob Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payrollrun_idactioncalculatejob_put_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method payrollrun_idactioncalculatejob_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `payrollrun_idactioncalculatejob_put`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `payrollrun_idactioncalculatejob_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/payrollrun/{id}?action=calculatejob', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def payrollrun_idactioncalculateonemp_put(self, id, emp_id, **kwargs):  # noqa: E501
        """payrollrun_idactioncalculateonemp_put  # noqa: E501

        calculateonemp Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payrollrun_idactioncalculateonemp_put(id, emp_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object emp_id: (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.payrollrun_idactioncalculateonemp_put_with_http_info(id, emp_id, **kwargs)  # noqa: E501
        else:
            (data) = self.payrollrun_idactioncalculateonemp_put_with_http_info(id, emp_id, **kwargs)  # noqa: E501
            return data

    def payrollrun_idactioncalculateonemp_put_with_http_info(self, id, emp_id, **kwargs):  # noqa: E501
        """payrollrun_idactioncalculateonemp_put  # noqa: E501

        calculateonemp Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payrollrun_idactioncalculateonemp_put_with_http_info(id, emp_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object emp_id: (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'emp_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method payrollrun_idactioncalculateonemp_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `payrollrun_idactioncalculateonemp_put`")  # noqa: E501
        # verify the required parameter 'emp_id' is set
        if ('emp_id' not in params or
                params['emp_id'] is None):
            raise ValueError("Missing the required parameter `emp_id` when calling `payrollrun_idactioncalculateonemp_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'emp_id' in params:
            path_params['empID'] = params['emp_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/payrollrun/{id}?action=calculateonemp', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def payrollrun_idactioncontrol_put(self, id, **kwargs):  # noqa: E501
        """payrollrun_idactioncontrol_put  # noqa: E501

        control Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payrollrun_idactioncontrol_put(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.payrollrun_idactioncontrol_put_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.payrollrun_idactioncontrol_put_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def payrollrun_idactioncontrol_put_with_http_info(self, id, **kwargs):  # noqa: E501
        """payrollrun_idactioncontrol_put  # noqa: E501

        control Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payrollrun_idactioncontrol_put_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method payrollrun_idactioncontrol_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `payrollrun_idactioncontrol_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/payrollrun/{id}?action=control', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def payrollrun_idactionemail_paychecks_put(self, id, grouped, **kwargs):  # noqa: E501
        """payrollrun_idactionemail_paychecks_put  # noqa: E501

        email-paychecks Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payrollrun_idactionemail_paychecks_put(id, grouped, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object grouped: (required)
        :param PaycheckReportSetup body:
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.payrollrun_idactionemail_paychecks_put_with_http_info(id, grouped, **kwargs)  # noqa: E501
        else:
            (data) = self.payrollrun_idactionemail_paychecks_put_with_http_info(id, grouped, **kwargs)  # noqa: E501
            return data

    def payrollrun_idactionemail_paychecks_put_with_http_info(self, id, grouped, **kwargs):  # noqa: E501
        """payrollrun_idactionemail_paychecks_put  # noqa: E501

        email-paychecks Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payrollrun_idactionemail_paychecks_put_with_http_info(id, grouped, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object grouped: (required)
        :param PaycheckReportSetup body:
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'grouped', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method payrollrun_idactionemail_paychecks_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `payrollrun_idactionemail_paychecks_put`")  # noqa: E501
        # verify the required parameter 'grouped' is set
        if ('grouped' not in params or
                params['grouped'] is None):
            raise ValueError("Missing the required parameter `grouped` when calling `payrollrun_idactionemail_paychecks_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'grouped' in params:
            path_params['grouped'] = params['grouped']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/payrollrun/{id}?action=email-paychecks', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def payrollrun_idactionemployeesonrun_get(self, id, **kwargs):  # noqa: E501
        """payrollrun_idactionemployeesonrun_get  # noqa: E501

        employeesonrun Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payrollrun_idactionemployeesonrun_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.payrollrun_idactionemployeesonrun_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.payrollrun_idactionemployeesonrun_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def payrollrun_idactionemployeesonrun_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """payrollrun_idactionemployeesonrun_get  # noqa: E501

        employeesonrun Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payrollrun_idactionemployeesonrun_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method payrollrun_idactionemployeesonrun_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `payrollrun_idactionemployeesonrun_get`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `payrollrun_idactionemployeesonrun_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/payrollrun/{id}?action=employeesonrun', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def payrollrun_idactionlatest_get(self, id, **kwargs):  # noqa: E501
        """payrollrun_idactionlatest_get  # noqa: E501

        latest Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payrollrun_idactionlatest_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: PayrollRun
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.payrollrun_idactionlatest_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.payrollrun_idactionlatest_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def payrollrun_idactionlatest_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """payrollrun_idactionlatest_get  # noqa: E501

        latest Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payrollrun_idactionlatest_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: PayrollRun
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method payrollrun_idactionlatest_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `payrollrun_idactionlatest_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/payrollrun/{id}?action=latest', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PayrollRun',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def payrollrun_idactionlatestperiod_get(self, id, curr_year, **kwargs):  # noqa: E501
        """payrollrun_idactionlatestperiod_get  # noqa: E501

        latestperiod Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payrollrun_idactionlatestperiod_get(id, curr_year, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object curr_year: (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.payrollrun_idactionlatestperiod_get_with_http_info(id, curr_year, **kwargs)  # noqa: E501
        else:
            (data) = self.payrollrun_idactionlatestperiod_get_with_http_info(id, curr_year, **kwargs)  # noqa: E501
            return data

    def payrollrun_idactionlatestperiod_get_with_http_info(self, id, curr_year, **kwargs):  # noqa: E501
        """payrollrun_idactionlatestperiod_get  # noqa: E501

        latestperiod Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payrollrun_idactionlatestperiod_get_with_http_info(id, curr_year, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object curr_year: (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'curr_year']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method payrollrun_idactionlatestperiod_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `payrollrun_idactionlatestperiod_get`")  # noqa: E501
        # verify the required parameter 'curr_year' is set
        if ('curr_year' not in params or
                params['curr_year'] is None):
            raise ValueError("Missing the required parameter `curr_year` when calling `payrollrun_idactionlatestperiod_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'curr_year' in params:
            path_params['currYear'] = params['curr_year']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/payrollrun/{id}?action=latestperiod', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def payrollrun_idactionnext_get(self, id, run_id, expand, **kwargs):  # noqa: E501
        """payrollrun_idactionnext_get  # noqa: E501

        next Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payrollrun_idactionnext_get(id, run_id, expand, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object run_id: (required)
        :param Object expand: (required)
        :return: PayrollRun
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.payrollrun_idactionnext_get_with_http_info(id, run_id, expand, **kwargs)  # noqa: E501
        else:
            (data) = self.payrollrun_idactionnext_get_with_http_info(id, run_id, expand, **kwargs)  # noqa: E501
            return data

    def payrollrun_idactionnext_get_with_http_info(self, id, run_id, expand, **kwargs):  # noqa: E501
        """payrollrun_idactionnext_get  # noqa: E501

        next Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payrollrun_idactionnext_get_with_http_info(id, run_id, expand, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object run_id: (required)
        :param Object expand: (required)
        :return: PayrollRun
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'run_id', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method payrollrun_idactionnext_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `payrollrun_idactionnext_get`")  # noqa: E501
        # verify the required parameter 'run_id' is set
        if ('run_id' not in params or
                params['run_id'] is None):
            raise ValueError("Missing the required parameter `run_id` when calling `payrollrun_idactionnext_get`")  # noqa: E501
        # verify the required parameter 'expand' is set
        if ('expand' not in params or
                params['expand'] is None):
            raise ValueError("Missing the required parameter `expand` when calling `payrollrun_idactionnext_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'run_id' in params:
            path_params['RunID'] = params['run_id']  # noqa: E501
        if 'expand' in params:
            path_params['expand'] = params['expand']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/payrollrun/{id}?action=next', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PayrollRun',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def payrollrun_idactionpaymentlist_get(self, id, **kwargs):  # noqa: E501
        """payrollrun_idactionpaymentlist_get  # noqa: E501

        paymentlist Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payrollrun_idactionpaymentlist_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: SalaryTransactionPay
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.payrollrun_idactionpaymentlist_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.payrollrun_idactionpaymentlist_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def payrollrun_idactionpaymentlist_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """payrollrun_idactionpaymentlist_get  # noqa: E501

        paymentlist Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payrollrun_idactionpaymentlist_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: SalaryTransactionPay
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method payrollrun_idactionpaymentlist_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `payrollrun_idactionpaymentlist_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/payrollrun/{id}?action=paymentlist', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SalaryTransactionPay',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def payrollrun_idactionpayments_on_runs_get(self, id, **kwargs):  # noqa: E501
        """payrollrun_idactionpayments_on_runs_get  # noqa: E501

        payments-on-runs Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payrollrun_idactionpayments_on_runs_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.payrollrun_idactionpayments_on_runs_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.payrollrun_idactionpayments_on_runs_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def payrollrun_idactionpayments_on_runs_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """payrollrun_idactionpayments_on_runs_get  # noqa: E501

        payments-on-runs Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payrollrun_idactionpayments_on_runs_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method payrollrun_idactionpayments_on_runs_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `payrollrun_idactionpayments_on_runs_get`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `payrollrun_idactionpayments_on_runs_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/payrollrun/{id}?action=payments-on-runs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def payrollrun_idactionpostingsummary_get(self, id, booking_type, refresh, **kwargs):  # noqa: E501
        """payrollrun_idactionpostingsummary_get  # noqa: E501

        postingsummary Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payrollrun_idactionpostingsummary_get(id, booking_type, refresh, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object booking_type: (required)
        :param Object refresh: (required)
        :return: PostingSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.payrollrun_idactionpostingsummary_get_with_http_info(id, booking_type, refresh, **kwargs)  # noqa: E501
        else:
            (data) = self.payrollrun_idactionpostingsummary_get_with_http_info(id, booking_type, refresh, **kwargs)  # noqa: E501
            return data

    def payrollrun_idactionpostingsummary_get_with_http_info(self, id, booking_type, refresh, **kwargs):  # noqa: E501
        """payrollrun_idactionpostingsummary_get  # noqa: E501

        postingsummary Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payrollrun_idactionpostingsummary_get_with_http_info(id, booking_type, refresh, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object booking_type: (required)
        :param Object refresh: (required)
        :return: PostingSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'booking_type', 'refresh']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method payrollrun_idactionpostingsummary_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `payrollrun_idactionpostingsummary_get`")  # noqa: E501
        # verify the required parameter 'booking_type' is set
        if ('booking_type' not in params or
                params['booking_type'] is None):
            raise ValueError("Missing the required parameter `booking_type` when calling `payrollrun_idactionpostingsummary_get`")  # noqa: E501
        # verify the required parameter 'refresh' is set
        if ('refresh' not in params or
                params['refresh'] is None):
            raise ValueError("Missing the required parameter `refresh` when calling `payrollrun_idactionpostingsummary_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'booking_type' in params:
            path_params['bookingType'] = params['booking_type']  # noqa: E501
        if 'refresh' in params:
            path_params['refresh'] = params['refresh']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/payrollrun/{id}?action=postingsummary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostingSummary',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def payrollrun_idactionpostingsummary_lines_get(self, id, booking_type, refresh, **kwargs):  # noqa: E501
        """payrollrun_idactionpostingsummary_lines_get  # noqa: E501

        postingsummary-lines Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payrollrun_idactionpostingsummary_lines_get(id, booking_type, refresh, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object booking_type: (required)
        :param Object refresh: (required)
        :return: list[JournalEntryLine]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.payrollrun_idactionpostingsummary_lines_get_with_http_info(id, booking_type, refresh, **kwargs)  # noqa: E501
        else:
            (data) = self.payrollrun_idactionpostingsummary_lines_get_with_http_info(id, booking_type, refresh, **kwargs)  # noqa: E501
            return data

    def payrollrun_idactionpostingsummary_lines_get_with_http_info(self, id, booking_type, refresh, **kwargs):  # noqa: E501
        """payrollrun_idactionpostingsummary_lines_get  # noqa: E501

        postingsummary-lines Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payrollrun_idactionpostingsummary_lines_get_with_http_info(id, booking_type, refresh, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object booking_type: (required)
        :param Object refresh: (required)
        :return: list[JournalEntryLine]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'booking_type', 'refresh']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method payrollrun_idactionpostingsummary_lines_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `payrollrun_idactionpostingsummary_lines_get`")  # noqa: E501
        # verify the required parameter 'booking_type' is set
        if ('booking_type' not in params or
                params['booking_type'] is None):
            raise ValueError("Missing the required parameter `booking_type` when calling `payrollrun_idactionpostingsummary_lines_get`")  # noqa: E501
        # verify the required parameter 'refresh' is set
        if ('refresh' not in params or
                params['refresh'] is None):
            raise ValueError("Missing the required parameter `refresh` when calling `payrollrun_idactionpostingsummary_lines_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'booking_type' in params:
            path_params['bookingType'] = params['booking_type']  # noqa: E501
        if 'refresh' in params:
            path_params['refresh'] = params['refresh']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/payrollrun/{id}?action=postingsummary-lines', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[JournalEntryLine]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def payrollrun_idactionpostingsummarydraft_get(self, id, **kwargs):  # noqa: E501
        """payrollrun_idactionpostingsummarydraft_get  # noqa: E501

        postingsummarydraft Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payrollrun_idactionpostingsummarydraft_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: PostingSummaryDraft
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.payrollrun_idactionpostingsummarydraft_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.payrollrun_idactionpostingsummarydraft_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def payrollrun_idactionpostingsummarydraft_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """payrollrun_idactionpostingsummarydraft_get  # noqa: E501

        postingsummarydraft Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payrollrun_idactionpostingsummarydraft_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: PostingSummaryDraft
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method payrollrun_idactionpostingsummarydraft_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `payrollrun_idactionpostingsummarydraft_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/payrollrun/{id}?action=postingsummarydraft', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostingSummaryDraft',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def payrollrun_idactionprevious_get(self, id, run_id, expand, **kwargs):  # noqa: E501
        """payrollrun_idactionprevious_get  # noqa: E501

        previous Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payrollrun_idactionprevious_get(id, run_id, expand, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object run_id: (required)
        :param Object expand: (required)
        :return: PayrollRun
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.payrollrun_idactionprevious_get_with_http_info(id, run_id, expand, **kwargs)  # noqa: E501
        else:
            (data) = self.payrollrun_idactionprevious_get_with_http_info(id, run_id, expand, **kwargs)  # noqa: E501
            return data

    def payrollrun_idactionprevious_get_with_http_info(self, id, run_id, expand, **kwargs):  # noqa: E501
        """payrollrun_idactionprevious_get  # noqa: E501

        previous Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payrollrun_idactionprevious_get_with_http_info(id, run_id, expand, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object run_id: (required)
        :param Object expand: (required)
        :return: PayrollRun
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'run_id', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method payrollrun_idactionprevious_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `payrollrun_idactionprevious_get`")  # noqa: E501
        # verify the required parameter 'run_id' is set
        if ('run_id' not in params or
                params['run_id'] is None):
            raise ValueError("Missing the required parameter `run_id` when calling `payrollrun_idactionprevious_get`")  # noqa: E501
        # verify the required parameter 'expand' is set
        if ('expand' not in params or
                params['expand'] is None):
            raise ValueError("Missing the required parameter `expand` when calling `payrollrun_idactionprevious_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'run_id' in params:
            path_params['RunID'] = params['run_id']  # noqa: E501
        if 'expand' in params:
            path_params['expand'] = params['expand']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/payrollrun/{id}?action=previous', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PayrollRun',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def payrollrun_idactionrebuild_balances_put(self, id, **kwargs):  # noqa: E501
        """payrollrun_idactionrebuild_balances_put  # noqa: E501

        rebuildBalances Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payrollrun_idactionrebuild_balances_put(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.payrollrun_idactionrebuild_balances_put_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.payrollrun_idactionrebuild_balances_put_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def payrollrun_idactionrebuild_balances_put_with_http_info(self, id, **kwargs):  # noqa: E501
        """payrollrun_idactionrebuild_balances_put  # noqa: E501

        rebuildBalances Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payrollrun_idactionrebuild_balances_put_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method payrollrun_idactionrebuild_balances_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `payrollrun_idactionrebuild_balances_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/payrollrun/{id}?action=rebuildBalances', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def payrollrun_idactionrebuildpostings_put(self, id, booking_type, force_regeneration, **kwargs):  # noqa: E501
        """payrollrun_idactionrebuildpostings_put  # noqa: E501

        rebuildpostings Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payrollrun_idactionrebuildpostings_put(id, booking_type, force_regeneration, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object booking_type: (required)
        :param Object force_regeneration: (required)
        :return: PostingSummaryDraft
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.payrollrun_idactionrebuildpostings_put_with_http_info(id, booking_type, force_regeneration, **kwargs)  # noqa: E501
        else:
            (data) = self.payrollrun_idactionrebuildpostings_put_with_http_info(id, booking_type, force_regeneration, **kwargs)  # noqa: E501
            return data

    def payrollrun_idactionrebuildpostings_put_with_http_info(self, id, booking_type, force_regeneration, **kwargs):  # noqa: E501
        """payrollrun_idactionrebuildpostings_put  # noqa: E501

        rebuildpostings Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payrollrun_idactionrebuildpostings_put_with_http_info(id, booking_type, force_regeneration, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object booking_type: (required)
        :param Object force_regeneration: (required)
        :return: PostingSummaryDraft
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'booking_type', 'force_regeneration']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method payrollrun_idactionrebuildpostings_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `payrollrun_idactionrebuildpostings_put`")  # noqa: E501
        # verify the required parameter 'booking_type' is set
        if ('booking_type' not in params or
                params['booking_type'] is None):
            raise ValueError("Missing the required parameter `booking_type` when calling `payrollrun_idactionrebuildpostings_put`")  # noqa: E501
        # verify the required parameter 'force_regeneration' is set
        if ('force_regeneration' not in params or
                params['force_regeneration'] is None):
            raise ValueError("Missing the required parameter `force_regeneration` when calling `payrollrun_idactionrebuildpostings_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'booking_type' in params:
            path_params['bookingType'] = params['booking_type']  # noqa: E501
        if 'force_regeneration' in params:
            path_params['forceRegeneration'] = params['force_regeneration']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/payrollrun/{id}?action=rebuildpostings', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostingSummaryDraft',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def payrollrun_idactionrecalculatetax_put(self, id, **kwargs):  # noqa: E501
        """payrollrun_idactionrecalculatetax_put  # noqa: E501

        recalculatetax Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payrollrun_idactionrecalculatetax_put(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.payrollrun_idactionrecalculatetax_put_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.payrollrun_idactionrecalculatetax_put_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def payrollrun_idactionrecalculatetax_put_with_http_info(self, id, **kwargs):  # noqa: E501
        """payrollrun_idactionrecalculatetax_put  # noqa: E501

        recalculatetax Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payrollrun_idactionrecalculatetax_put_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method payrollrun_idactionrecalculatetax_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `payrollrun_idactionrecalculatetax_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/payrollrun/{id}?action=recalculatetax', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def payrollrun_idactionresetrun_put(self, id, **kwargs):  # noqa: E501
        """payrollrun_idactionresetrun_put  # noqa: E501

        resetrun Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payrollrun_idactionresetrun_put(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.payrollrun_idactionresetrun_put_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.payrollrun_idactionresetrun_put_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def payrollrun_idactionresetrun_put_with_http_info(self, id, **kwargs):  # noqa: E501
        """payrollrun_idactionresetrun_put  # noqa: E501

        resetrun Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payrollrun_idactionresetrun_put_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method payrollrun_idactionresetrun_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `payrollrun_idactionresetrun_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/payrollrun/{id}?action=resetrun', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def payrollrun_idactionsendpaymentlist_post(self, id, **kwargs):  # noqa: E501
        """payrollrun_idactionsendpaymentlist_post  # noqa: E501

        sendpaymentlist Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payrollrun_idactionsendpaymentlist_post(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.payrollrun_idactionsendpaymentlist_post_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.payrollrun_idactionsendpaymentlist_post_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def payrollrun_idactionsendpaymentlist_post_with_http_info(self, id, **kwargs):  # noqa: E501
        """payrollrun_idactionsendpaymentlist_post  # noqa: E501

        sendpaymentlist Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payrollrun_idactionsendpaymentlist_post_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method payrollrun_idactionsendpaymentlist_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `payrollrun_idactionsendpaymentlist_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/payrollrun/{id}?action=sendpaymentlist', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def payrollrun_idactionsetcategories_put(self, id2, id, **kwargs):  # noqa: E501
        """payrollrun_idactionsetcategories_put  # noqa: E501

        setcategories Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payrollrun_idactionsetcategories_put(id2, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id2: (required)
        :param Object id: (required)
        :param object body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.payrollrun_idactionsetcategories_put_with_http_info(id2, id, **kwargs)  # noqa: E501
        else:
            (data) = self.payrollrun_idactionsetcategories_put_with_http_info(id2, id, **kwargs)  # noqa: E501
            return data

    def payrollrun_idactionsetcategories_put_with_http_info(self, id2, id, **kwargs):  # noqa: E501
        """payrollrun_idactionsetcategories_put  # noqa: E501

        setcategories Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payrollrun_idactionsetcategories_put_with_http_info(id2, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id2: (required)
        :param Object id: (required)
        :param object body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id2', 'id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method payrollrun_idactionsetcategories_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id2' is set
        if ('id2' not in params or
                params['id2'] is None):
            raise ValueError("Missing the required parameter `id2` when calling `payrollrun_idactionsetcategories_put`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `payrollrun_idactionsetcategories_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/payrollrun/{id}?action=setcategories', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def payrollrun_idactiontime_to_salary_selection_get(self, id, to_date, **kwargs):  # noqa: E501
        """payrollrun_idactiontime_to_salary_selection_get  # noqa: E501

        time-to-salary-selection Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payrollrun_idactiontime_to_salary_selection_get(id, to_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :param Object to_date: (required)
        :return: list[WorkItemToSalary]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.payrollrun_idactiontime_to_salary_selection_get_with_http_info(id, to_date, **kwargs)  # noqa: E501
        else:
            (data) = self.payrollrun_idactiontime_to_salary_selection_get_with_http_info(id, to_date, **kwargs)  # noqa: E501
            return data

    def payrollrun_idactiontime_to_salary_selection_get_with_http_info(self, id, to_date, **kwargs):  # noqa: E501
        """payrollrun_idactiontime_to_salary_selection_get  # noqa: E501

        time-to-salary-selection Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payrollrun_idactiontime_to_salary_selection_get_with_http_info(id, to_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :param Object to_date: (required)
        :return: list[WorkItemToSalary]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id', 'to_date']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method payrollrun_idactiontime_to_salary_selection_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `payrollrun_idactiontime_to_salary_selection_get`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `payrollrun_idactiontime_to_salary_selection_get`")  # noqa: E501
        # verify the required parameter 'to_date' is set
        if ('to_date' not in params or
                params['to_date'] is None):
            raise ValueError("Missing the required parameter `to_date` when calling `payrollrun_idactiontime_to_salary_selection_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'to_date' in params:
            path_params['toDate'] = params['to_date']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/payrollrun/{id}?action=time-to-salary-selection', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[WorkItemToSalary]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def payrollrun_idactionvacationpay_closure_put(self, id, year, split_on_sixth, **kwargs):  # noqa: E501
        """payrollrun_idactionvacationpay_closure_put  # noqa: E501

        vacationpay-closure Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payrollrun_idactionvacationpay_closure_put(id, year, split_on_sixth, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object year: (required)
        :param Object split_on_sixth: (required)
        :param object body:
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.payrollrun_idactionvacationpay_closure_put_with_http_info(id, year, split_on_sixth, **kwargs)  # noqa: E501
        else:
            (data) = self.payrollrun_idactionvacationpay_closure_put_with_http_info(id, year, split_on_sixth, **kwargs)  # noqa: E501
            return data

    def payrollrun_idactionvacationpay_closure_put_with_http_info(self, id, year, split_on_sixth, **kwargs):  # noqa: E501
        """payrollrun_idactionvacationpay_closure_put  # noqa: E501

        vacationpay-closure Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payrollrun_idactionvacationpay_closure_put_with_http_info(id, year, split_on_sixth, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object year: (required)
        :param Object split_on_sixth: (required)
        :param object body:
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'year', 'split_on_sixth', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method payrollrun_idactionvacationpay_closure_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `payrollrun_idactionvacationpay_closure_put`")  # noqa: E501
        # verify the required parameter 'year' is set
        if ('year' not in params or
                params['year'] is None):
            raise ValueError("Missing the required parameter `year` when calling `payrollrun_idactionvacationpay_closure_put`")  # noqa: E501
        # verify the required parameter 'split_on_sixth' is set
        if ('split_on_sixth' not in params or
                params['split_on_sixth'] is None):
            raise ValueError("Missing the required parameter `split_on_sixth` when calling `payrollrun_idactionvacationpay_closure_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'year' in params:
            path_params['year'] = params['year']  # noqa: E501
        if 'split_on_sixth' in params:
            path_params['SplitOnSixth'] = params['split_on_sixth']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/payrollrun/{id}?action=vacationpay-closure', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def payrollrun_idactionvacationpay_from_emp_list_put(self, id, year, split_on_sixth, **kwargs):  # noqa: E501
        """payrollrun_idactionvacationpay_from_emp_list_put  # noqa: E501

        vacationpay-from-emp-list Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payrollrun_idactionvacationpay_from_emp_list_put(id, year, split_on_sixth, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object year: (required)
        :param Object split_on_sixth: (required)
        :param object body:
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.payrollrun_idactionvacationpay_from_emp_list_put_with_http_info(id, year, split_on_sixth, **kwargs)  # noqa: E501
        else:
            (data) = self.payrollrun_idactionvacationpay_from_emp_list_put_with_http_info(id, year, split_on_sixth, **kwargs)  # noqa: E501
            return data

    def payrollrun_idactionvacationpay_from_emp_list_put_with_http_info(self, id, year, split_on_sixth, **kwargs):  # noqa: E501
        """payrollrun_idactionvacationpay_from_emp_list_put  # noqa: E501

        vacationpay-from-emp-list Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payrollrun_idactionvacationpay_from_emp_list_put_with_http_info(id, year, split_on_sixth, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object year: (required)
        :param Object split_on_sixth: (required)
        :param object body:
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'year', 'split_on_sixth', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method payrollrun_idactionvacationpay_from_emp_list_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `payrollrun_idactionvacationpay_from_emp_list_put`")  # noqa: E501
        # verify the required parameter 'year' is set
        if ('year' not in params or
                params['year'] is None):
            raise ValueError("Missing the required parameter `year` when calling `payrollrun_idactionvacationpay_from_emp_list_put`")  # noqa: E501
        # verify the required parameter 'split_on_sixth' is set
        if ('split_on_sixth' not in params or
                params['split_on_sixth'] is None):
            raise ValueError("Missing the required parameter `split_on_sixth` when calling `payrollrun_idactionvacationpay_from_emp_list_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'year' in params:
            path_params['year'] = params['year']  # noqa: E501
        if 'split_on_sixth' in params:
            path_params['SplitOnSixth'] = params['split_on_sixth']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/payrollrun/{id}?action=vacationpay-from-emp-list', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def payrollrun_idactionvacationpay_from_vacationpayinfo_list_put(self, id, year, **kwargs):  # noqa: E501
        """payrollrun_idactionvacationpay_from_vacationpayinfo_list_put  # noqa: E501

        vacationpay-from-vacationpayinfo-list Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payrollrun_idactionvacationpay_from_vacationpayinfo_list_put(id, year, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object year: (required)
        :param object body:
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.payrollrun_idactionvacationpay_from_vacationpayinfo_list_put_with_http_info(id, year, **kwargs)  # noqa: E501
        else:
            (data) = self.payrollrun_idactionvacationpay_from_vacationpayinfo_list_put_with_http_info(id, year, **kwargs)  # noqa: E501
            return data

    def payrollrun_idactionvacationpay_from_vacationpayinfo_list_put_with_http_info(self, id, year, **kwargs):  # noqa: E501
        """payrollrun_idactionvacationpay_from_vacationpayinfo_list_put  # noqa: E501

        vacationpay-from-vacationpayinfo-list Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payrollrun_idactionvacationpay_from_vacationpayinfo_list_put_with_http_info(id, year, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object year: (required)
        :param object body:
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'year', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method payrollrun_idactionvacationpay_from_vacationpayinfo_list_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `payrollrun_idactionvacationpay_from_vacationpayinfo_list_put`")  # noqa: E501
        # verify the required parameter 'year' is set
        if ('year' not in params or
                params['year'] is None):
            raise ValueError("Missing the required parameter `year` when calling `payrollrun_idactionvacationpay_from_vacationpayinfo_list_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'year' in params:
            path_params['year'] = params['year']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/payrollrun/{id}?action=vacationpay-from-vacationpayinfo-list', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def payrollrun_idactionvacationpay_list_get(self, id, year, lastyear, filter, show_all, **kwargs):  # noqa: E501
        """payrollrun_idactionvacationpay_list_get  # noqa: E501

        vacationpay-list Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payrollrun_idactionvacationpay_list_get(id, year, lastyear, filter, show_all, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object year: (required)
        :param Object lastyear: (required)
        :param Object filter: (required)
        :param Object show_all: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.payrollrun_idactionvacationpay_list_get_with_http_info(id, year, lastyear, filter, show_all, **kwargs)  # noqa: E501
        else:
            (data) = self.payrollrun_idactionvacationpay_list_get_with_http_info(id, year, lastyear, filter, show_all, **kwargs)  # noqa: E501
            return data

    def payrollrun_idactionvacationpay_list_get_with_http_info(self, id, year, lastyear, filter, show_all, **kwargs):  # noqa: E501
        """payrollrun_idactionvacationpay_list_get  # noqa: E501

        vacationpay-list Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payrollrun_idactionvacationpay_list_get_with_http_info(id, year, lastyear, filter, show_all, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object year: (required)
        :param Object lastyear: (required)
        :param Object filter: (required)
        :param Object show_all: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'year', 'lastyear', 'filter', 'show_all']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method payrollrun_idactionvacationpay_list_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `payrollrun_idactionvacationpay_list_get`")  # noqa: E501
        # verify the required parameter 'year' is set
        if ('year' not in params or
                params['year'] is None):
            raise ValueError("Missing the required parameter `year` when calling `payrollrun_idactionvacationpay_list_get`")  # noqa: E501
        # verify the required parameter 'lastyear' is set
        if ('lastyear' not in params or
                params['lastyear'] is None):
            raise ValueError("Missing the required parameter `lastyear` when calling `payrollrun_idactionvacationpay_list_get`")  # noqa: E501
        # verify the required parameter 'filter' is set
        if ('filter' not in params or
                params['filter'] is None):
            raise ValueError("Missing the required parameter `filter` when calling `payrollrun_idactionvacationpay_list_get`")  # noqa: E501
        # verify the required parameter 'show_all' is set
        if ('show_all' not in params or
                params['show_all'] is None):
            raise ValueError("Missing the required parameter `show_all` when calling `payrollrun_idactionvacationpay_list_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'year' in params:
            path_params['year'] = params['year']  # noqa: E501
        if 'lastyear' in params:
            path_params['lastyear'] = params['lastyear']  # noqa: E501
        if 'filter' in params:
            path_params['filter'] = params['filter']  # noqa: E501
        if 'show_all' in params:
            path_params['showAll'] = params['show_all']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/payrollrun/{id}?action=vacationpay-list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def payrollrun_idactionwork_items_to_transes_put(self, id2, id, **kwargs):  # noqa: E501
        """payrollrun_idactionwork_items_to_transes_put  # noqa: E501

        work-items-to-transes Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payrollrun_idactionwork_items_to_transes_put(id2, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id2: (required)
        :param Object id: (required)
        :param int body:
        :return: list[SalaryTransaction]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.payrollrun_idactionwork_items_to_transes_put_with_http_info(id2, id, **kwargs)  # noqa: E501
        else:
            (data) = self.payrollrun_idactionwork_items_to_transes_put_with_http_info(id2, id, **kwargs)  # noqa: E501
            return data

    def payrollrun_idactionwork_items_to_transes_put_with_http_info(self, id2, id, **kwargs):  # noqa: E501
        """payrollrun_idactionwork_items_to_transes_put  # noqa: E501

        work-items-to-transes Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payrollrun_idactionwork_items_to_transes_put_with_http_info(id2, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id2: (required)
        :param Object id: (required)
        :param int body:
        :return: list[SalaryTransaction]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id2', 'id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method payrollrun_idactionwork_items_to_transes_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id2' is set
        if ('id2' not in params or
                params['id2'] is None):
            raise ValueError("Missing the required parameter `id2` when calling `payrollrun_idactionwork_items_to_transes_put`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `payrollrun_idactionwork_items_to_transes_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/payrollrun/{id}?action=work-items-to-transes', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SalaryTransaction]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def payrollrun_post(self, body, **kwargs):  # noqa: E501
        """payrollrun_post  # noqa: E501

        Create PayrollRun  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payrollrun_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PayrollRun body: (required)
        :return: PayrollRun
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.payrollrun_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.payrollrun_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def payrollrun_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """payrollrun_post  # noqa: E501

        Create PayrollRun  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payrollrun_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PayrollRun body: (required)
        :return: PayrollRun
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method payrollrun_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `payrollrun_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/payrollrun', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PayrollRun',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def payrollrunaction_payroll_job_post(self, **kwargs):  # noqa: E501
        """payrollrunaction_payroll_job_post  # noqa: E501

        PayrollJob Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payrollrunaction_payroll_job_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PayrollRun body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.payrollrunaction_payroll_job_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.payrollrunaction_payroll_job_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def payrollrunaction_payroll_job_post_with_http_info(self, **kwargs):  # noqa: E501
        """payrollrunaction_payroll_job_post  # noqa: E501

        PayrollJob Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payrollrunaction_payroll_job_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PayrollRun body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method payrollrunaction_payroll_job_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/payrollrun?action=PayrollJob', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def payrollrunactioncalculateonemp_put(self, emp_id, **kwargs):  # noqa: E501
        """payrollrunactioncalculateonemp_put  # noqa: E501

        calculateonemp Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payrollrunactioncalculateonemp_put(emp_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object emp_id: (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.payrollrunactioncalculateonemp_put_with_http_info(emp_id, **kwargs)  # noqa: E501
        else:
            (data) = self.payrollrunactioncalculateonemp_put_with_http_info(emp_id, **kwargs)  # noqa: E501
            return data

    def payrollrunactioncalculateonemp_put_with_http_info(self, emp_id, **kwargs):  # noqa: E501
        """payrollrunactioncalculateonemp_put  # noqa: E501

        calculateonemp Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payrollrunactioncalculateonemp_put_with_http_info(emp_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object emp_id: (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['emp_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method payrollrunactioncalculateonemp_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'emp_id' is set
        if ('emp_id' not in params or
                params['emp_id'] is None):
            raise ValueError("Missing the required parameter `emp_id` when calling `payrollrunactioncalculateonemp_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'emp_id' in params:
            path_params['empID'] = params['emp_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/payrollrun?action=calculateonemp', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def payrollrunactionotp_export_get(self, runs, month, year, as_xml, **kwargs):  # noqa: E501
        """payrollrunactionotp_export_get  # noqa: E501

        otp-export Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payrollrunactionotp_export_get(runs, month, year, as_xml, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object runs: (required)
        :param Object month: (required)
        :param Object year: (required)
        :param Object as_xml: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.payrollrunactionotp_export_get_with_http_info(runs, month, year, as_xml, **kwargs)  # noqa: E501
        else:
            (data) = self.payrollrunactionotp_export_get_with_http_info(runs, month, year, as_xml, **kwargs)  # noqa: E501
            return data

    def payrollrunactionotp_export_get_with_http_info(self, runs, month, year, as_xml, **kwargs):  # noqa: E501
        """payrollrunactionotp_export_get  # noqa: E501

        otp-export Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payrollrunactionotp_export_get_with_http_info(runs, month, year, as_xml, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object runs: (required)
        :param Object month: (required)
        :param Object year: (required)
        :param Object as_xml: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['runs', 'month', 'year', 'as_xml']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method payrollrunactionotp_export_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'runs' is set
        if ('runs' not in params or
                params['runs'] is None):
            raise ValueError("Missing the required parameter `runs` when calling `payrollrunactionotp_export_get`")  # noqa: E501
        # verify the required parameter 'month' is set
        if ('month' not in params or
                params['month'] is None):
            raise ValueError("Missing the required parameter `month` when calling `payrollrunactionotp_export_get`")  # noqa: E501
        # verify the required parameter 'year' is set
        if ('year' not in params or
                params['year'] is None):
            raise ValueError("Missing the required parameter `year` when calling `payrollrunactionotp_export_get`")  # noqa: E501
        # verify the required parameter 'as_xml' is set
        if ('as_xml' not in params or
                params['as_xml'] is None):
            raise ValueError("Missing the required parameter `as_xml` when calling `payrollrunactionotp_export_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'runs' in params:
            path_params['runs'] = params['runs']  # noqa: E501
        if 'month' in params:
            path_params['month'] = params['month']  # noqa: E501
        if 'year' in params:
            path_params['year'] = params['year']  # noqa: E501
        if 'as_xml' in params:
            path_params['asXml'] = params['as_xml']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/payrollrun?action=otp-export', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def payrollrunactionrebuild_put(self, **kwargs):  # noqa: E501
        """payrollrunactionrebuild_put  # noqa: E501

        rebuild Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payrollrunactionrebuild_put(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.payrollrunactionrebuild_put_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.payrollrunactionrebuild_put_with_http_info(**kwargs)  # noqa: E501
            return data

    def payrollrunactionrebuild_put_with_http_info(self, **kwargs):  # noqa: E501
        """payrollrunactionrebuild_put  # noqa: E501

        rebuild Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payrollrunactionrebuild_put_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method payrollrunactionrebuild_put" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/payrollrun?action=rebuild', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
