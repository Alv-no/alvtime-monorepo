# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class PaymentApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def payments_get(self, **kwargs):  # noqa: E501
        """payments_get  # noqa: E501

        Query Payment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payments_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Payment]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.payments_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.payments_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def payments_get_with_http_info(self, **kwargs):  # noqa: E501
        """payments_get  # noqa: E501

        Query Payment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payments_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Payment]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method payments_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/payments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Payment]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def payments_id_delete(self, id, **kwargs):  # noqa: E501
        """payments_id_delete  # noqa: E501

        Delete Payment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payments_id_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: Payment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.payments_id_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.payments_id_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def payments_id_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """payments_id_delete  # noqa: E501

        Delete Payment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payments_id_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: Payment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method payments_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `payments_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/payments/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Payment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def payments_id_get(self, id, **kwargs):  # noqa: E501
        """payments_id_get  # noqa: E501

        Get Payment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payments_id_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: Payment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.payments_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.payments_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def payments_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """payments_id_get  # noqa: E501

        Get Payment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payments_id_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: Payment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method payments_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `payments_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/payments/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Payment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def payments_id_put(self, body, id, **kwargs):  # noqa: E501
        """payments_id_put  # noqa: E501

        Update Payment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payments_id_put(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Payment body: (required)
        :param int id: (required)
        :return: Payment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.payments_id_put_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.payments_id_put_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def payments_id_put_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """payments_id_put  # noqa: E501

        Update Payment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payments_id_put_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Payment body: (required)
        :param int id: (required)
        :return: Payment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method payments_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `payments_id_put`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `payments_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/payments/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Payment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def payments_idactiondelete_and_credit_delete(self, id, **kwargs):  # noqa: E501
        """payments_idactiondelete_and_credit_delete  # noqa: E501

        delete-and-credit Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payments_idactiondelete_and_credit_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.payments_idactiondelete_and_credit_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.payments_idactiondelete_and_credit_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def payments_idactiondelete_and_credit_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """payments_idactiondelete_and_credit_delete  # noqa: E501

        delete-and-credit Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payments_idactiondelete_and_credit_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method payments_idactiondelete_and_credit_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `payments_idactiondelete_and_credit_delete`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `payments_idactiondelete_and_credit_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/payments/{id}?action=delete-and-credit', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def payments_idactionforce_delete_and_credit_delete(self, id, **kwargs):  # noqa: E501
        """payments_idactionforce_delete_and_credit_delete  # noqa: E501

        force-delete-and-credit Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payments_idactionforce_delete_and_credit_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.payments_idactionforce_delete_and_credit_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.payments_idactionforce_delete_and_credit_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def payments_idactionforce_delete_and_credit_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """payments_idactionforce_delete_and_credit_delete  # noqa: E501

        force-delete-and-credit Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payments_idactionforce_delete_and_credit_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method payments_idactionforce_delete_and_credit_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `payments_idactionforce_delete_and_credit_delete`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `payments_idactionforce_delete_and_credit_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/payments/{id}?action=force-delete-and-credit', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def payments_idactionforce_delete_delete(self, id, **kwargs):  # noqa: E501
        """payments_idactionforce_delete_delete  # noqa: E501

        force-delete Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payments_idactionforce_delete_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.payments_idactionforce_delete_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.payments_idactionforce_delete_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def payments_idactionforce_delete_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """payments_idactionforce_delete_delete  # noqa: E501

        force-delete Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payments_idactionforce_delete_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method payments_idactionforce_delete_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `payments_idactionforce_delete_delete`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `payments_idactionforce_delete_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/payments/{id}?action=force-delete', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def payments_post(self, body, **kwargs):  # noqa: E501
        """payments_post  # noqa: E501

        Create Payment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payments_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Payment body: (required)
        :return: Payment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.payments_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.payments_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def payments_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """payments_post  # noqa: E501

        Create Payment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.payments_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Payment body: (required)
        :return: Payment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method payments_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `payments_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/payments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Payment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def paymentsactionbatch_cancel_payment_claims_put(self, **kwargs):  # noqa: E501
        """paymentsactionbatch_cancel_payment_claims_put  # noqa: E501

        batch-cancel-payment-claims Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paymentsactionbatch_cancel_payment_claims_put(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.paymentsactionbatch_cancel_payment_claims_put_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.paymentsactionbatch_cancel_payment_claims_put_with_http_info(**kwargs)  # noqa: E501
            return data

    def paymentsactionbatch_cancel_payment_claims_put_with_http_info(self, **kwargs):  # noqa: E501
        """paymentsactionbatch_cancel_payment_claims_put  # noqa: E501

        batch-cancel-payment-claims Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paymentsactionbatch_cancel_payment_claims_put_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method paymentsactionbatch_cancel_payment_claims_put" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/payments?action=batch-cancel-payment-claims', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def paymentsactionbatch_delete_and_credit_put(self, credit, **kwargs):  # noqa: E501
        """paymentsactionbatch_delete_and_credit_put  # noqa: E501

        batch-delete-and-credit Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paymentsactionbatch_delete_and_credit_put(credit, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object credit: (required)
        :param int body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.paymentsactionbatch_delete_and_credit_put_with_http_info(credit, **kwargs)  # noqa: E501
        else:
            (data) = self.paymentsactionbatch_delete_and_credit_put_with_http_info(credit, **kwargs)  # noqa: E501
            return data

    def paymentsactionbatch_delete_and_credit_put_with_http_info(self, credit, **kwargs):  # noqa: E501
        """paymentsactionbatch_delete_and_credit_put  # noqa: E501

        batch-delete-and-credit Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paymentsactionbatch_delete_and_credit_put_with_http_info(credit, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object credit: (required)
        :param int body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['credit', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method paymentsactionbatch_delete_and_credit_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'credit' is set
        if ('credit' not in params or
                params['credit'] is None):
            raise ValueError("Missing the required parameter `credit` when calling `paymentsactionbatch_delete_and_credit_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'credit' in params:
            path_params['credit'] = params['credit']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/payments?action=batch-delete-and-credit', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def paymentsactioncreate_hash_for_payments_get(self, filter, expand, **kwargs):  # noqa: E501
        """paymentsactioncreate_hash_for_payments_get  # noqa: E501

        create-hash-for-payments Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paymentsactioncreate_hash_for_payments_get(filter, expand, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object filter: (required)
        :param Object expand: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.paymentsactioncreate_hash_for_payments_get_with_http_info(filter, expand, **kwargs)  # noqa: E501
        else:
            (data) = self.paymentsactioncreate_hash_for_payments_get_with_http_info(filter, expand, **kwargs)  # noqa: E501
            return data

    def paymentsactioncreate_hash_for_payments_get_with_http_info(self, filter, expand, **kwargs):  # noqa: E501
        """paymentsactioncreate_hash_for_payments_get  # noqa: E501

        create-hash-for-payments Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paymentsactioncreate_hash_for_payments_get_with_http_info(filter, expand, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object filter: (required)
        :param Object expand: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filter', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method paymentsactioncreate_hash_for_payments_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'filter' is set
        if ('filter' not in params or
                params['filter'] is None):
            raise ValueError("Missing the required parameter `filter` when calling `paymentsactioncreate_hash_for_payments_get`")  # noqa: E501
        # verify the required parameter 'expand' is set
        if ('expand' not in params or
                params['expand'] is None):
            raise ValueError("Missing the required parameter `expand` when calling `paymentsactioncreate_hash_for_payments_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'filter' in params:
            path_params['filter'] = params['filter']  # noqa: E501
        if 'expand' in params:
            path_params['expand'] = params['expand']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/payments?action=create-hash-for-payments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def paymentsactioncreate_payment_batch_for_all_payments_post(self, is_manual, hash, create_file, filter, expand, **kwargs):  # noqa: E501
        """paymentsactioncreate_payment_batch_for_all_payments_post  # noqa: E501

        create-payment-batch-for-all-payments Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paymentsactioncreate_payment_batch_for_all_payments_post(is_manual, hash, create_file, filter, expand, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object is_manual: (required)
        :param Object hash: (required)
        :param Object create_file: (required)
        :param Object filter: (required)
        :param Object expand: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.paymentsactioncreate_payment_batch_for_all_payments_post_with_http_info(is_manual, hash, create_file, filter, expand, **kwargs)  # noqa: E501
        else:
            (data) = self.paymentsactioncreate_payment_batch_for_all_payments_post_with_http_info(is_manual, hash, create_file, filter, expand, **kwargs)  # noqa: E501
            return data

    def paymentsactioncreate_payment_batch_for_all_payments_post_with_http_info(self, is_manual, hash, create_file, filter, expand, **kwargs):  # noqa: E501
        """paymentsactioncreate_payment_batch_for_all_payments_post  # noqa: E501

        create-payment-batch-for-all-payments Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paymentsactioncreate_payment_batch_for_all_payments_post_with_http_info(is_manual, hash, create_file, filter, expand, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object is_manual: (required)
        :param Object hash: (required)
        :param Object create_file: (required)
        :param Object filter: (required)
        :param Object expand: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['is_manual', 'hash', 'create_file', 'filter', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method paymentsactioncreate_payment_batch_for_all_payments_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'is_manual' is set
        if ('is_manual' not in params or
                params['is_manual'] is None):
            raise ValueError("Missing the required parameter `is_manual` when calling `paymentsactioncreate_payment_batch_for_all_payments_post`")  # noqa: E501
        # verify the required parameter 'hash' is set
        if ('hash' not in params or
                params['hash'] is None):
            raise ValueError("Missing the required parameter `hash` when calling `paymentsactioncreate_payment_batch_for_all_payments_post`")  # noqa: E501
        # verify the required parameter 'create_file' is set
        if ('create_file' not in params or
                params['create_file'] is None):
            raise ValueError("Missing the required parameter `create_file` when calling `paymentsactioncreate_payment_batch_for_all_payments_post`")  # noqa: E501
        # verify the required parameter 'filter' is set
        if ('filter' not in params or
                params['filter'] is None):
            raise ValueError("Missing the required parameter `filter` when calling `paymentsactioncreate_payment_batch_for_all_payments_post`")  # noqa: E501
        # verify the required parameter 'expand' is set
        if ('expand' not in params or
                params['expand'] is None):
            raise ValueError("Missing the required parameter `expand` when calling `paymentsactioncreate_payment_batch_for_all_payments_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'is_manual' in params:
            path_params['isManual'] = params['is_manual']  # noqa: E501
        if 'hash' in params:
            path_params['hash'] = params['hash']  # noqa: E501
        if 'create_file' in params:
            path_params['createFile'] = params['create_file']  # noqa: E501
        if 'filter' in params:
            path_params['filter'] = params['filter']  # noqa: E501
        if 'expand' in params:
            path_params['expand'] = params['expand']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/payments?action=create-payment-batch-for-all-payments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def paymentsactioncreate_payment_batch_post(self, is_manual, hash, create_payment_file, **kwargs):  # noqa: E501
        """paymentsactioncreate_payment_batch_post  # noqa: E501

        create-payment-batch Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paymentsactioncreate_payment_batch_post(is_manual, hash, create_payment_file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object is_manual: (required)
        :param Object hash: (required)
        :param Object create_payment_file: (required)
        :param int body:
        :return: PaymentBatch
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.paymentsactioncreate_payment_batch_post_with_http_info(is_manual, hash, create_payment_file, **kwargs)  # noqa: E501
        else:
            (data) = self.paymentsactioncreate_payment_batch_post_with_http_info(is_manual, hash, create_payment_file, **kwargs)  # noqa: E501
            return data

    def paymentsactioncreate_payment_batch_post_with_http_info(self, is_manual, hash, create_payment_file, **kwargs):  # noqa: E501
        """paymentsactioncreate_payment_batch_post  # noqa: E501

        create-payment-batch Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paymentsactioncreate_payment_batch_post_with_http_info(is_manual, hash, create_payment_file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object is_manual: (required)
        :param Object hash: (required)
        :param Object create_payment_file: (required)
        :param int body:
        :return: PaymentBatch
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['is_manual', 'hash', 'create_payment_file', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method paymentsactioncreate_payment_batch_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'is_manual' is set
        if ('is_manual' not in params or
                params['is_manual'] is None):
            raise ValueError("Missing the required parameter `is_manual` when calling `paymentsactioncreate_payment_batch_post`")  # noqa: E501
        # verify the required parameter 'hash' is set
        if ('hash' not in params or
                params['hash'] is None):
            raise ValueError("Missing the required parameter `hash` when calling `paymentsactioncreate_payment_batch_post`")  # noqa: E501
        # verify the required parameter 'create_payment_file' is set
        if ('create_payment_file' not in params or
                params['create_payment_file'] is None):
            raise ValueError("Missing the required parameter `create_payment_file` when calling `paymentsactioncreate_payment_batch_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'is_manual' in params:
            path_params['isManual'] = params['is_manual']  # noqa: E501
        if 'hash' in params:
            path_params['hash'] = params['hash']  # noqa: E501
        if 'create_payment_file' in params:
            path_params['createPaymentFile'] = params['create_payment_file']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/payments?action=create-payment-batch', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaymentBatch',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def paymentsactioncreate_payment_with_tracelink_post(self, journal_entry_id, **kwargs):  # noqa: E501
        """paymentsactioncreate_payment_with_tracelink_post  # noqa: E501

        create-payment-with-tracelink Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paymentsactioncreate_payment_with_tracelink_post(journal_entry_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object journal_entry_id: (required)
        :param Payment body:
        :return: Payment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.paymentsactioncreate_payment_with_tracelink_post_with_http_info(journal_entry_id, **kwargs)  # noqa: E501
        else:
            (data) = self.paymentsactioncreate_payment_with_tracelink_post_with_http_info(journal_entry_id, **kwargs)  # noqa: E501
            return data

    def paymentsactioncreate_payment_with_tracelink_post_with_http_info(self, journal_entry_id, **kwargs):  # noqa: E501
        """paymentsactioncreate_payment_with_tracelink_post  # noqa: E501

        create-payment-with-tracelink Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paymentsactioncreate_payment_with_tracelink_post_with_http_info(journal_entry_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object journal_entry_id: (required)
        :param Payment body:
        :return: Payment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['journal_entry_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method paymentsactioncreate_payment_with_tracelink_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'journal_entry_id' is set
        if ('journal_entry_id' not in params or
                params['journal_entry_id'] is None):
            raise ValueError("Missing the required parameter `journal_entry_id` when calling `paymentsactioncreate_payment_with_tracelink_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'journal_entry_id' in params:
            path_params['journalEntryID'] = params['journal_entry_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/payments?action=create-payment-with-tracelink', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Payment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def paymentsactionreset_payment_post(self, old_payment_id, **kwargs):  # noqa: E501
        """paymentsactionreset_payment_post  # noqa: E501

        reset-payment Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paymentsactionreset_payment_post(old_payment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object old_payment_id: (required)
        :param Payment body:
        :return: Payment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.paymentsactionreset_payment_post_with_http_info(old_payment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.paymentsactionreset_payment_post_with_http_info(old_payment_id, **kwargs)  # noqa: E501
            return data

    def paymentsactionreset_payment_post_with_http_info(self, old_payment_id, **kwargs):  # noqa: E501
        """paymentsactionreset_payment_post  # noqa: E501

        reset-payment Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paymentsactionreset_payment_post_with_http_info(old_payment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object old_payment_id: (required)
        :param Payment body:
        :return: Payment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['old_payment_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method paymentsactionreset_payment_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'old_payment_id' is set
        if ('old_payment_id' not in params or
                params['old_payment_id'] is None):
            raise ValueError("Missing the required parameter `old_payment_id` when calling `paymentsactionreset_payment_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'old_payment_id' in params:
            path_params['oldPaymentID'] = params['old_payment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/payments?action=reset-payment', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Payment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def paymentsactionupdate_payments_to_ignored_put(self, **kwargs):  # noqa: E501
        """paymentsactionupdate_payments_to_ignored_put  # noqa: E501

        update-payments-to-ignored Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paymentsactionupdate_payments_to_ignored_put(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int body:
        :return: list[Payment]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.paymentsactionupdate_payments_to_ignored_put_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.paymentsactionupdate_payments_to_ignored_put_with_http_info(**kwargs)  # noqa: E501
            return data

    def paymentsactionupdate_payments_to_ignored_put_with_http_info(self, **kwargs):  # noqa: E501
        """paymentsactionupdate_payments_to_ignored_put  # noqa: E501

        update-payments-to-ignored Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.paymentsactionupdate_payments_to_ignored_put_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int body:
        :return: list[Payment]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method paymentsactionupdate_payments_to_ignored_put" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/payments?action=update-payments-to-ignored', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Payment]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
