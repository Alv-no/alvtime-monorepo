# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class VatReportApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def vatreports_get(self, **kwargs):  # noqa: E501
        """vatreports_get  # noqa: E501

        Query VatReport  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vatreports_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[VatReport]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.vatreports_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.vatreports_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def vatreports_get_with_http_info(self, **kwargs):  # noqa: E501
        """vatreports_get  # noqa: E501

        Query VatReport  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vatreports_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[VatReport]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vatreports_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/vatreports', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[VatReport]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vatreports_id_delete(self, id, **kwargs):  # noqa: E501
        """vatreports_id_delete  # noqa: E501

        Delete VatReport  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vatreports_id_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: VatReport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.vatreports_id_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.vatreports_id_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def vatreports_id_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """vatreports_id_delete  # noqa: E501

        Delete VatReport  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vatreports_id_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: VatReport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vatreports_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `vatreports_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/vatreports/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VatReport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vatreports_id_get(self, id, **kwargs):  # noqa: E501
        """vatreports_id_get  # noqa: E501

        Get VatReport  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vatreports_id_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: VatReport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.vatreports_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.vatreports_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def vatreports_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """vatreports_id_get  # noqa: E501

        Get VatReport  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vatreports_id_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: VatReport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vatreports_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `vatreports_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/vatreports/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VatReport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vatreports_id_put(self, body, id, **kwargs):  # noqa: E501
        """vatreports_id_put  # noqa: E501

        Update VatReport  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vatreports_id_put(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VatReport body: (required)
        :param int id: (required)
        :return: VatReport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.vatreports_id_put_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.vatreports_id_put_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def vatreports_id_put_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """vatreports_id_put  # noqa: E501

        Update VatReport  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vatreports_id_put_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VatReport body: (required)
        :param int id: (required)
        :return: VatReport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vatreports_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `vatreports_id_put`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `vatreports_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/vatreports/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VatReport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vatreports_idactionadjust_post(self, id, **kwargs):  # noqa: E501
        """vatreports_idactionadjust_post  # noqa: E501

        adjust Transition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vatreports_idactionadjust_post(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.vatreports_idactionadjust_post_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.vatreports_idactionadjust_post_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def vatreports_idactionadjust_post_with_http_info(self, id, **kwargs):  # noqa: E501
        """vatreports_idactionadjust_post  # noqa: E501

        adjust Transition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vatreports_idactionadjust_post_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vatreports_idactionadjust_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `vatreports_idactionadjust_post`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `vatreports_idactionadjust_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/vatreports/{id}?action=adjust', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vatreports_idactionapprove_manually_post(self, id, **kwargs):  # noqa: E501
        """vatreports_idactionapprove_manually_post  # noqa: E501

        approveManually Transition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vatreports_idactionapprove_manually_post(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.vatreports_idactionapprove_manually_post_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.vatreports_idactionapprove_manually_post_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def vatreports_idactionapprove_manually_post_with_http_info(self, id, **kwargs):  # noqa: E501
        """vatreports_idactionapprove_manually_post  # noqa: E501

        approveManually Transition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vatreports_idactionapprove_manually_post_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vatreports_idactionapprove_manually_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `vatreports_idactionapprove_manually_post`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `vatreports_idactionapprove_manually_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/vatreports/{id}?action=approveManually', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vatreports_idactionapprove_post(self, id, **kwargs):  # noqa: E501
        """vatreports_idactionapprove_post  # noqa: E501

        approve Transition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vatreports_idactionapprove_post(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.vatreports_idactionapprove_post_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.vatreports_idactionapprove_post_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def vatreports_idactionapprove_post_with_http_info(self, id, **kwargs):  # noqa: E501
        """vatreports_idactionapprove_post  # noqa: E501

        approve Transition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vatreports_idactionapprove_post_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vatreports_idactionapprove_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `vatreports_idactionapprove_post`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `vatreports_idactionapprove_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/vatreports/{id}?action=approve', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vatreports_idactioncontrol_vatreport_get(self, id, period_id, **kwargs):  # noqa: E501
        """vatreports_idactioncontrol_vatreport_get  # noqa: E501

        control-vatreport Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vatreports_idactioncontrol_vatreport_get(id, period_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :param Object period_id: (required)
        :return: list[VatReportMessage]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.vatreports_idactioncontrol_vatreport_get_with_http_info(id, period_id, **kwargs)  # noqa: E501
        else:
            (data) = self.vatreports_idactioncontrol_vatreport_get_with_http_info(id, period_id, **kwargs)  # noqa: E501
            return data

    def vatreports_idactioncontrol_vatreport_get_with_http_info(self, id, period_id, **kwargs):  # noqa: E501
        """vatreports_idactioncontrol_vatreport_get  # noqa: E501

        control-vatreport Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vatreports_idactioncontrol_vatreport_get_with_http_info(id, period_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :param Object period_id: (required)
        :return: list[VatReportMessage]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id', 'period_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vatreports_idactioncontrol_vatreport_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `vatreports_idactioncontrol_vatreport_get`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `vatreports_idactioncontrol_vatreport_get`")  # noqa: E501
        # verify the required parameter 'period_id' is set
        if ('period_id' not in params or
                params['period_id'] is None):
            raise ValueError("Missing the required parameter `period_id` when calling `vatreports_idactioncontrol_vatreport_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'period_id' in params:
            path_params['periodID'] = params['period_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/vatreports/{id}?action=control-vatreport', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[VatReportMessage]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vatreports_idactionexecute_post(self, id, period_id, **kwargs):  # noqa: E501
        """vatreports_idactionexecute_post  # noqa: E501

        execute Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vatreports_idactionexecute_post(id, period_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :param Object period_id: (required)
        :return: VatReport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.vatreports_idactionexecute_post_with_http_info(id, period_id, **kwargs)  # noqa: E501
        else:
            (data) = self.vatreports_idactionexecute_post_with_http_info(id, period_id, **kwargs)  # noqa: E501
            return data

    def vatreports_idactionexecute_post_with_http_info(self, id, period_id, **kwargs):  # noqa: E501
        """vatreports_idactionexecute_post  # noqa: E501

        execute Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vatreports_idactionexecute_post_with_http_info(id, period_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :param Object period_id: (required)
        :return: VatReport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id', 'period_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vatreports_idactionexecute_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `vatreports_idactionexecute_post`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `vatreports_idactionexecute_post`")  # noqa: E501
        # verify the required parameter 'period_id' is set
        if ('period_id' not in params or
                params['period_id'] is None):
            raise ValueError("Missing the required parameter `period_id` when calling `vatreports_idactionexecute_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'period_id' in params:
            path_params['periodID'] = params['period_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/vatreports/{id}?action=execute', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VatReport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vatreports_idactionget_vat_report_summary_from_previous_periods_get(self, id, period_id, **kwargs):  # noqa: E501
        """vatreports_idactionget_vat_report_summary_from_previous_periods_get  # noqa: E501

        get-vat-report-summary-from-previous-periods Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vatreports_idactionget_vat_report_summary_from_previous_periods_get(id, period_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :param Object period_id: (required)
        :return: list[VatReportSummary]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.vatreports_idactionget_vat_report_summary_from_previous_periods_get_with_http_info(id, period_id, **kwargs)  # noqa: E501
        else:
            (data) = self.vatreports_idactionget_vat_report_summary_from_previous_periods_get_with_http_info(id, period_id, **kwargs)  # noqa: E501
            return data

    def vatreports_idactionget_vat_report_summary_from_previous_periods_get_with_http_info(self, id, period_id, **kwargs):  # noqa: E501
        """vatreports_idactionget_vat_report_summary_from_previous_periods_get  # noqa: E501

        get-vat-report-summary-from-previous-periods Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vatreports_idactionget_vat_report_summary_from_previous_periods_get_with_http_info(id, period_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :param Object period_id: (required)
        :return: list[VatReportSummary]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id', 'period_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vatreports_idactionget_vat_report_summary_from_previous_periods_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `vatreports_idactionget_vat_report_summary_from_previous_periods_get`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `vatreports_idactionget_vat_report_summary_from_previous_periods_get`")  # noqa: E501
        # verify the required parameter 'period_id' is set
        if ('period_id' not in params or
                params['period_id'] is None):
            raise ValueError("Missing the required parameter `period_id` when calling `vatreports_idactionget_vat_report_summary_from_previous_periods_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'period_id' in params:
            path_params['periodID'] = params['period_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/vatreports/{id}?action=get-vat-report-summary-from-previous-periods', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[VatReportSummary]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vatreports_idactionget_vat_report_summary_get(self, id, period_id, **kwargs):  # noqa: E501
        """vatreports_idactionget_vat_report_summary_get  # noqa: E501

        get-vat-report-summary Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vatreports_idactionget_vat_report_summary_get(id, period_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :param Object period_id: (required)
        :return: list[VatReportSummary]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.vatreports_idactionget_vat_report_summary_get_with_http_info(id, period_id, **kwargs)  # noqa: E501
        else:
            (data) = self.vatreports_idactionget_vat_report_summary_get_with_http_info(id, period_id, **kwargs)  # noqa: E501
            return data

    def vatreports_idactionget_vat_report_summary_get_with_http_info(self, id, period_id, **kwargs):  # noqa: E501
        """vatreports_idactionget_vat_report_summary_get  # noqa: E501

        get-vat-report-summary Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vatreports_idactionget_vat_report_summary_get_with_http_info(id, period_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :param Object period_id: (required)
        :return: list[VatReportSummary]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id', 'period_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vatreports_idactionget_vat_report_summary_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `vatreports_idactionget_vat_report_summary_get`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `vatreports_idactionget_vat_report_summary_get`")  # noqa: E501
        # verify the required parameter 'period_id' is set
        if ('period_id' not in params or
                params['period_id'] is None):
            raise ValueError("Missing the required parameter `period_id` when calling `vatreports_idactionget_vat_report_summary_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'period_id' in params:
            path_params['periodID'] = params['period_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/vatreports/{id}?action=get-vat-report-summary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[VatReportSummary]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vatreports_idactionget_vat_report_summary_per_post_get(self, id, period_id, **kwargs):  # noqa: E501
        """vatreports_idactionget_vat_report_summary_per_post_get  # noqa: E501

        get-vat-report-summary-per-post Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vatreports_idactionget_vat_report_summary_per_post_get(id, period_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :param Object period_id: (required)
        :return: list[VatReportSummaryPerPost]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.vatreports_idactionget_vat_report_summary_per_post_get_with_http_info(id, period_id, **kwargs)  # noqa: E501
        else:
            (data) = self.vatreports_idactionget_vat_report_summary_per_post_get_with_http_info(id, period_id, **kwargs)  # noqa: E501
            return data

    def vatreports_idactionget_vat_report_summary_per_post_get_with_http_info(self, id, period_id, **kwargs):  # noqa: E501
        """vatreports_idactionget_vat_report_summary_per_post_get  # noqa: E501

        get-vat-report-summary-per-post Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vatreports_idactionget_vat_report_summary_per_post_get_with_http_info(id, period_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :param Object period_id: (required)
        :return: list[VatReportSummaryPerPost]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id', 'period_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vatreports_idactionget_vat_report_summary_per_post_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `vatreports_idactionget_vat_report_summary_per_post_get`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `vatreports_idactionget_vat_report_summary_per_post_get`")  # noqa: E501
        # verify the required parameter 'period_id' is set
        if ('period_id' not in params or
                params['period_id'] is None):
            raise ValueError("Missing the required parameter `period_id` when calling `vatreports_idactionget_vat_report_summary_per_post_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'period_id' in params:
            path_params['periodID'] = params['period_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/vatreports/{id}?action=get-vat-report-summary-per-post', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[VatReportSummaryPerPost]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vatreports_idactionget_vat_report_summary_per_post_per_account_details_get(self, id, period_id, **kwargs):  # noqa: E501
        """vatreports_idactionget_vat_report_summary_per_post_per_account_details_get  # noqa: E501

        get-vat-report-summary-per-post-per-account-details Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vatreports_idactionget_vat_report_summary_per_post_per_account_details_get(id, period_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :param Object period_id: (required)
        :return: list[VatReportSummaryPerPostPerAccount]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.vatreports_idactionget_vat_report_summary_per_post_per_account_details_get_with_http_info(id, period_id, **kwargs)  # noqa: E501
        else:
            (data) = self.vatreports_idactionget_vat_report_summary_per_post_per_account_details_get_with_http_info(id, period_id, **kwargs)  # noqa: E501
            return data

    def vatreports_idactionget_vat_report_summary_per_post_per_account_details_get_with_http_info(self, id, period_id, **kwargs):  # noqa: E501
        """vatreports_idactionget_vat_report_summary_per_post_per_account_details_get  # noqa: E501

        get-vat-report-summary-per-post-per-account-details Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vatreports_idactionget_vat_report_summary_per_post_per_account_details_get_with_http_info(id, period_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :param Object period_id: (required)
        :return: list[VatReportSummaryPerPostPerAccount]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id', 'period_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vatreports_idactionget_vat_report_summary_per_post_per_account_details_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `vatreports_idactionget_vat_report_summary_per_post_per_account_details_get`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `vatreports_idactionget_vat_report_summary_per_post_per_account_details_get`")  # noqa: E501
        # verify the required parameter 'period_id' is set
        if ('period_id' not in params or
                params['period_id'] is None):
            raise ValueError("Missing the required parameter `period_id` when calling `vatreports_idactionget_vat_report_summary_per_post_per_account_details_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'period_id' in params:
            path_params['periodID'] = params['period_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/vatreports/{id}?action=get-vat-report-summary-per-post-per-account-details', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[VatReportSummaryPerPostPerAccount]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vatreports_idactionget_vat_report_summary_per_post_per_account_get(self, id, period_id, **kwargs):  # noqa: E501
        """vatreports_idactionget_vat_report_summary_per_post_per_account_get  # noqa: E501

        get-vat-report-summary-per-post-per-account Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vatreports_idactionget_vat_report_summary_per_post_per_account_get(id, period_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :param Object period_id: (required)
        :return: list[VatReportSummaryPerPostPerAccount]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.vatreports_idactionget_vat_report_summary_per_post_per_account_get_with_http_info(id, period_id, **kwargs)  # noqa: E501
        else:
            (data) = self.vatreports_idactionget_vat_report_summary_per_post_per_account_get_with_http_info(id, period_id, **kwargs)  # noqa: E501
            return data

    def vatreports_idactionget_vat_report_summary_per_post_per_account_get_with_http_info(self, id, period_id, **kwargs):  # noqa: E501
        """vatreports_idactionget_vat_report_summary_per_post_per_account_get  # noqa: E501

        get-vat-report-summary-per-post-per-account Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vatreports_idactionget_vat_report_summary_per_post_per_account_get_with_http_info(id, period_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :param Object period_id: (required)
        :return: list[VatReportSummaryPerPostPerAccount]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id', 'period_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vatreports_idactionget_vat_report_summary_per_post_per_account_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `vatreports_idactionget_vat_report_summary_per_post_per_account_get`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `vatreports_idactionget_vat_report_summary_per_post_per_account_get`")  # noqa: E501
        # verify the required parameter 'period_id' is set
        if ('period_id' not in params or
                params['period_id'] is None):
            raise ValueError("Missing the required parameter `period_id` when calling `vatreports_idactionget_vat_report_summary_per_post_per_account_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'period_id' in params:
            path_params['periodID'] = params['period_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/vatreports/{id}?action=get-vat-report-summary-per-post-per-account', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[VatReportSummaryPerPostPerAccount]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vatreports_idactionnext_get(self, id, periodid, **kwargs):  # noqa: E501
        """vatreports_idactionnext_get  # noqa: E501

        next Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vatreports_idactionnext_get(id, periodid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :param Object periodid: (required)
        :return: VatReport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.vatreports_idactionnext_get_with_http_info(id, periodid, **kwargs)  # noqa: E501
        else:
            (data) = self.vatreports_idactionnext_get_with_http_info(id, periodid, **kwargs)  # noqa: E501
            return data

    def vatreports_idactionnext_get_with_http_info(self, id, periodid, **kwargs):  # noqa: E501
        """vatreports_idactionnext_get  # noqa: E501

        next Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vatreports_idactionnext_get_with_http_info(id, periodid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :param Object periodid: (required)
        :return: VatReport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id', 'periodid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vatreports_idactionnext_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `vatreports_idactionnext_get`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `vatreports_idactionnext_get`")  # noqa: E501
        # verify the required parameter 'periodid' is set
        if ('periodid' not in params or
                params['periodid'] is None):
            raise ValueError("Missing the required parameter `periodid` when calling `vatreports_idactionnext_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'periodid' in params:
            path_params['periodid'] = params['periodid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/vatreports/{id}?action=next', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VatReport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vatreports_idactionpay_vat_post(self, id, vat_report_id, **kwargs):  # noqa: E501
        """vatreports_idactionpay_vat_post  # noqa: E501

        pay-vat Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vatreports_idactionpay_vat_post(id, vat_report_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object vat_report_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.vatreports_idactionpay_vat_post_with_http_info(id, vat_report_id, **kwargs)  # noqa: E501
        else:
            (data) = self.vatreports_idactionpay_vat_post_with_http_info(id, vat_report_id, **kwargs)  # noqa: E501
            return data

    def vatreports_idactionpay_vat_post_with_http_info(self, id, vat_report_id, **kwargs):  # noqa: E501
        """vatreports_idactionpay_vat_post  # noqa: E501

        pay-vat Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vatreports_idactionpay_vat_post_with_http_info(id, vat_report_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object vat_report_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'vat_report_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vatreports_idactionpay_vat_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `vatreports_idactionpay_vat_post`")  # noqa: E501
        # verify the required parameter 'vat_report_id' is set
        if ('vat_report_id' not in params or
                params['vat_report_id'] is None):
            raise ValueError("Missing the required parameter `vat_report_id` when calling `vatreports_idactionpay_vat_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'vat_report_id' in params:
            path_params['vatReportID'] = params['vat_report_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/vatreports/{id}?action=pay-vat', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vatreports_idactionprevious_get(self, id, periodid, **kwargs):  # noqa: E501
        """vatreports_idactionprevious_get  # noqa: E501

        previous Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vatreports_idactionprevious_get(id, periodid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :param Object periodid: (required)
        :return: VatReport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.vatreports_idactionprevious_get_with_http_info(id, periodid, **kwargs)  # noqa: E501
        else:
            (data) = self.vatreports_idactionprevious_get_with_http_info(id, periodid, **kwargs)  # noqa: E501
            return data

    def vatreports_idactionprevious_get_with_http_info(self, id, periodid, **kwargs):  # noqa: E501
        """vatreports_idactionprevious_get  # noqa: E501

        previous Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vatreports_idactionprevious_get_with_http_info(id, periodid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :param Object periodid: (required)
        :return: VatReport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id', 'periodid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vatreports_idactionprevious_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `vatreports_idactionprevious_get`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `vatreports_idactionprevious_get`")  # noqa: E501
        # verify the required parameter 'periodid' is set
        if ('periodid' not in params or
                params['periodid'] is None):
            raise ValueError("Missing the required parameter `periodid` when calling `vatreports_idactionprevious_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'periodid' in params:
            path_params['periodid'] = params['periodid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/vatreports/{id}?action=previous', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VatReport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vatreports_idactionreexecute_post(self, id, **kwargs):  # noqa: E501
        """vatreports_idactionreexecute_post  # noqa: E501

        reexecute Transition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vatreports_idactionreexecute_post(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.vatreports_idactionreexecute_post_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.vatreports_idactionreexecute_post_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def vatreports_idactionreexecute_post_with_http_info(self, id, **kwargs):  # noqa: E501
        """vatreports_idactionreexecute_post  # noqa: E501

        reexecute Transition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vatreports_idactionreexecute_post_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vatreports_idactionreexecute_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `vatreports_idactionreexecute_post`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `vatreports_idactionreexecute_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/vatreports/{id}?action=reexecute', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vatreports_idactionreject_post(self, id, **kwargs):  # noqa: E501
        """vatreports_idactionreject_post  # noqa: E501

        reject Transition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vatreports_idactionreject_post(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.vatreports_idactionreject_post_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.vatreports_idactionreject_post_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def vatreports_idactionreject_post_with_http_info(self, id, **kwargs):  # noqa: E501
        """vatreports_idactionreject_post  # noqa: E501

        reject Transition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vatreports_idactionreject_post_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vatreports_idactionreject_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `vatreports_idactionreject_post`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `vatreports_idactionreject_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/vatreports/{id}?action=reject', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vatreports_idactionset_to_approved_post(self, id, **kwargs):  # noqa: E501
        """vatreports_idactionset_to_approved_post  # noqa: E501

        setToApproved Transition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vatreports_idactionset_to_approved_post(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.vatreports_idactionset_to_approved_post_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.vatreports_idactionset_to_approved_post_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def vatreports_idactionset_to_approved_post_with_http_info(self, id, **kwargs):  # noqa: E501
        """vatreports_idactionset_to_approved_post  # noqa: E501

        setToApproved Transition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vatreports_idactionset_to_approved_post_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vatreports_idactionset_to_approved_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `vatreports_idactionset_to_approved_post`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `vatreports_idactionset_to_approved_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/vatreports/{id}?action=setToApproved', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vatreports_idactionsubmit_post(self, id, **kwargs):  # noqa: E501
        """vatreports_idactionsubmit_post  # noqa: E501

        submit Transition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vatreports_idactionsubmit_post(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.vatreports_idactionsubmit_post_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.vatreports_idactionsubmit_post_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def vatreports_idactionsubmit_post_with_http_info(self, id, **kwargs):  # noqa: E501
        """vatreports_idactionsubmit_post  # noqa: E501

        submit Transition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vatreports_idactionsubmit_post_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vatreports_idactionsubmit_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `vatreports_idactionsubmit_post`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `vatreports_idactionsubmit_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/vatreports/{id}?action=submit', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vatreports_idactionundo_execute_period_post(self, id, period_id, **kwargs):  # noqa: E501
        """vatreports_idactionundo_execute_period_post  # noqa: E501

        undo-execute-period Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vatreports_idactionundo_execute_period_post(id, period_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object period_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.vatreports_idactionundo_execute_period_post_with_http_info(id, period_id, **kwargs)  # noqa: E501
        else:
            (data) = self.vatreports_idactionundo_execute_period_post_with_http_info(id, period_id, **kwargs)  # noqa: E501
            return data

    def vatreports_idactionundo_execute_period_post_with_http_info(self, id, period_id, **kwargs):  # noqa: E501
        """vatreports_idactionundo_execute_period_post  # noqa: E501

        undo-execute-period Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vatreports_idactionundo_execute_period_post_with_http_info(id, period_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object period_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'period_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vatreports_idactionundo_execute_period_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `vatreports_idactionundo_execute_period_post`")  # noqa: E501
        # verify the required parameter 'period_id' is set
        if ('period_id' not in params or
                params['period_id'] is None):
            raise ValueError("Missing the required parameter `period_id` when calling `vatreports_idactionundo_execute_period_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'period_id' in params:
            path_params['periodID'] = params['period_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/vatreports/{id}?action=undo-execute-period', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vatreports_idactionundo_execute_post(self, id, vat_report_id, **kwargs):  # noqa: E501
        """vatreports_idactionundo_execute_post  # noqa: E501

        undo-execute Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vatreports_idactionundo_execute_post(id, vat_report_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object vat_report_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.vatreports_idactionundo_execute_post_with_http_info(id, vat_report_id, **kwargs)  # noqa: E501
        else:
            (data) = self.vatreports_idactionundo_execute_post_with_http_info(id, vat_report_id, **kwargs)  # noqa: E501
            return data

    def vatreports_idactionundo_execute_post_with_http_info(self, id, vat_report_id, **kwargs):  # noqa: E501
        """vatreports_idactionundo_execute_post  # noqa: E501

        undo-execute Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vatreports_idactionundo_execute_post_with_http_info(id, vat_report_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object vat_report_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'vat_report_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vatreports_idactionundo_execute_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `vatreports_idactionundo_execute_post`")  # noqa: E501
        # verify the required parameter 'vat_report_id' is set
        if ('vat_report_id' not in params or
                params['vat_report_id'] is None):
            raise ValueError("Missing the required parameter `vat_report_id` when calling `vatreports_idactionundo_execute_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'vat_report_id' in params:
            path_params['vatReportId'] = params['vat_report_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/vatreports/{id}?action=undo-execute', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vatreports_post(self, body, **kwargs):  # noqa: E501
        """vatreports_post  # noqa: E501

        Create VatReport  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vatreports_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VatReport body: (required)
        :return: VatReport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.vatreports_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.vatreports_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def vatreports_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """vatreports_post  # noqa: E501

        Create VatReport  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vatreports_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VatReport body: (required)
        :return: VatReport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vatreports_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `vatreports_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/vatreports', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VatReport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vatreportsactioncreate_additional_vatreport_post(self, period_id, **kwargs):  # noqa: E501
        """vatreportsactioncreate_additional_vatreport_post  # noqa: E501

        create-additional-vatreport Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vatreportsactioncreate_additional_vatreport_post(period_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object period_id: (required)
        :return: VatReport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.vatreportsactioncreate_additional_vatreport_post_with_http_info(period_id, **kwargs)  # noqa: E501
        else:
            (data) = self.vatreportsactioncreate_additional_vatreport_post_with_http_info(period_id, **kwargs)  # noqa: E501
            return data

    def vatreportsactioncreate_additional_vatreport_post_with_http_info(self, period_id, **kwargs):  # noqa: E501
        """vatreportsactioncreate_additional_vatreport_post  # noqa: E501

        create-additional-vatreport Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vatreportsactioncreate_additional_vatreport_post_with_http_info(period_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object period_id: (required)
        :return: VatReport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['period_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vatreportsactioncreate_additional_vatreport_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'period_id' is set
        if ('period_id' not in params or
                params['period_id'] is None):
            raise ValueError("Missing the required parameter `period_id` when calling `vatreportsactioncreate_additional_vatreport_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'period_id' in params:
            path_params['periodID'] = params['period_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/vatreports?action=create-additional-vatreport', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VatReport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vatreportsactioncreate_adjusted_vatreport_post(self, period_id, **kwargs):  # noqa: E501
        """vatreportsactioncreate_adjusted_vatreport_post  # noqa: E501

        create-adjusted-vatreport Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vatreportsactioncreate_adjusted_vatreport_post(period_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object period_id: (required)
        :return: VatReport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.vatreportsactioncreate_adjusted_vatreport_post_with_http_info(period_id, **kwargs)  # noqa: E501
        else:
            (data) = self.vatreportsactioncreate_adjusted_vatreport_post_with_http_info(period_id, **kwargs)  # noqa: E501
            return data

    def vatreportsactioncreate_adjusted_vatreport_post_with_http_info(self, period_id, **kwargs):  # noqa: E501
        """vatreportsactioncreate_adjusted_vatreport_post  # noqa: E501

        create-adjusted-vatreport Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vatreportsactioncreate_adjusted_vatreport_post_with_http_info(period_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object period_id: (required)
        :return: VatReport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['period_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vatreportsactioncreate_adjusted_vatreport_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'period_id' is set
        if ('period_id' not in params or
                params['period_id'] is None):
            raise ValueError("Missing the required parameter `period_id` when calling `vatreportsactioncreate_adjusted_vatreport_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'period_id' in params:
            path_params['periodID'] = params['period_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/vatreports?action=create-adjusted-vatreport', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VatReport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vatreportsactioncurrent_get(self, **kwargs):  # noqa: E501
        """vatreportsactioncurrent_get  # noqa: E501

        current Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vatreportsactioncurrent_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: VatReport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.vatreportsactioncurrent_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.vatreportsactioncurrent_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def vatreportsactioncurrent_get_with_http_info(self, **kwargs):  # noqa: E501
        """vatreportsactioncurrent_get  # noqa: E501

        current Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vatreportsactioncurrent_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: VatReport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vatreportsactioncurrent_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/vatreports?action=current', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VatReport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vatreportsactionget_not_reported_journalentry_data_get(self, period_id, **kwargs):  # noqa: E501
        """vatreportsactionget_not_reported_journalentry_data_get  # noqa: E501

        get-not-reported-journalentry-data Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vatreportsactionget_not_reported_journalentry_data_get(period_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object period_id: (required)
        :return: VatReportNotReportedJournalEntryData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.vatreportsactionget_not_reported_journalentry_data_get_with_http_info(period_id, **kwargs)  # noqa: E501
        else:
            (data) = self.vatreportsactionget_not_reported_journalentry_data_get_with_http_info(period_id, **kwargs)  # noqa: E501
            return data

    def vatreportsactionget_not_reported_journalentry_data_get_with_http_info(self, period_id, **kwargs):  # noqa: E501
        """vatreportsactionget_not_reported_journalentry_data_get  # noqa: E501

        get-not-reported-journalentry-data Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vatreportsactionget_not_reported_journalentry_data_get_with_http_info(period_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object period_id: (required)
        :return: VatReportNotReportedJournalEntryData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['period_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vatreportsactionget_not_reported_journalentry_data_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'period_id' is set
        if ('period_id' not in params or
                params['period_id'] is None):
            raise ValueError("Missing the required parameter `period_id` when calling `vatreportsactionget_not_reported_journalentry_data_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'period_id' in params:
            path_params['periodID'] = params['period_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/vatreports?action=get-not-reported-journalentry-data', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VatReportNotReportedJournalEntryData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vatreportsactionget_signing_text_altinn_post(self, vat_report_id, **kwargs):  # noqa: E501
        """vatreportsactionget_signing_text_altinn_post  # noqa: E501

        get-signing-text-altinn Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vatreportsactionget_signing_text_altinn_post(vat_report_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object vat_report_id: (required)
        :return: AltinnSigningTextResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.vatreportsactionget_signing_text_altinn_post_with_http_info(vat_report_id, **kwargs)  # noqa: E501
        else:
            (data) = self.vatreportsactionget_signing_text_altinn_post_with_http_info(vat_report_id, **kwargs)  # noqa: E501
            return data

    def vatreportsactionget_signing_text_altinn_post_with_http_info(self, vat_report_id, **kwargs):  # noqa: E501
        """vatreportsactionget_signing_text_altinn_post  # noqa: E501

        get-signing-text-altinn Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vatreportsactionget_signing_text_altinn_post_with_http_info(vat_report_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object vat_report_id: (required)
        :return: AltinnSigningTextResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vat_report_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vatreportsactionget_signing_text_altinn_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vat_report_id' is set
        if ('vat_report_id' not in params or
                params['vat_report_id'] is None):
            raise ValueError("Missing the required parameter `vat_report_id` when calling `vatreportsactionget_signing_text_altinn_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vat_report_id' in params:
            path_params['vatReportID'] = params['vat_report_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/vatreports?action=get-signing-text-altinn', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AltinnSigningTextResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vatreportsactionread_and_update_altinn_vatreport_data_post(self, vat_report_id, **kwargs):  # noqa: E501
        """vatreportsactionread_and_update_altinn_vatreport_data_post  # noqa: E501

        read-and-update-altinn-vatreport-data Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vatreportsactionread_and_update_altinn_vatreport_data_post(vat_report_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object vat_report_id: (required)
        :return: AltinnGetVatReportDataFromAltinnResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.vatreportsactionread_and_update_altinn_vatreport_data_post_with_http_info(vat_report_id, **kwargs)  # noqa: E501
        else:
            (data) = self.vatreportsactionread_and_update_altinn_vatreport_data_post_with_http_info(vat_report_id, **kwargs)  # noqa: E501
            return data

    def vatreportsactionread_and_update_altinn_vatreport_data_post_with_http_info(self, vat_report_id, **kwargs):  # noqa: E501
        """vatreportsactionread_and_update_altinn_vatreport_data_post  # noqa: E501

        read-and-update-altinn-vatreport-data Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vatreportsactionread_and_update_altinn_vatreport_data_post_with_http_info(vat_report_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object vat_report_id: (required)
        :return: AltinnGetVatReportDataFromAltinnResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vat_report_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vatreportsactionread_and_update_altinn_vatreport_data_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vat_report_id' is set
        if ('vat_report_id' not in params or
                params['vat_report_id'] is None):
            raise ValueError("Missing the required parameter `vat_report_id` when calling `vatreportsactionread_and_update_altinn_vatreport_data_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vat_report_id' in params:
            path_params['vatReportID'] = params['vat_report_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/vatreports?action=read-and-update-altinn-vatreport-data', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AltinnGetVatReportDataFromAltinnResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def vatreportsactionsign_vatreport_altinn_post(self, vat_report_id, **kwargs):  # noqa: E501
        """vatreportsactionsign_vatreport_altinn_post  # noqa: E501

        sign-vatreport-altinn Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vatreportsactionsign_vatreport_altinn_post(vat_report_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object vat_report_id: (required)
        :return: AltinnSigning
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.vatreportsactionsign_vatreport_altinn_post_with_http_info(vat_report_id, **kwargs)  # noqa: E501
        else:
            (data) = self.vatreportsactionsign_vatreport_altinn_post_with_http_info(vat_report_id, **kwargs)  # noqa: E501
            return data

    def vatreportsactionsign_vatreport_altinn_post_with_http_info(self, vat_report_id, **kwargs):  # noqa: E501
        """vatreportsactionsign_vatreport_altinn_post  # noqa: E501

        sign-vatreport-altinn Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.vatreportsactionsign_vatreport_altinn_post_with_http_info(vat_report_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object vat_report_id: (required)
        :return: AltinnSigning
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vat_report_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vatreportsactionsign_vatreport_altinn_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vat_report_id' is set
        if ('vat_report_id' not in params or
                params['vat_report_id'] is None):
            raise ValueError("Missing the required parameter `vat_report_id` when calling `vatreportsactionsign_vatreport_altinn_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vat_report_id' in params:
            path_params['vatReportID'] = params['vat_report_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/vatreports?action=sign-vatreport-altinn', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AltinnSigning',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
