# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class CostAllocationApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def costallocations_get(self, **kwargs):  # noqa: E501
        """costallocations_get  # noqa: E501

        Query CostAllocation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.costallocations_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[CostAllocation]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.costallocations_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.costallocations_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def costallocations_get_with_http_info(self, **kwargs):  # noqa: E501
        """costallocations_get  # noqa: E501

        Query CostAllocation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.costallocations_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[CostAllocation]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method costallocations_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/costallocations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[CostAllocation]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def costallocations_id_delete(self, id, **kwargs):  # noqa: E501
        """costallocations_id_delete  # noqa: E501

        Delete CostAllocation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.costallocations_id_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: CostAllocation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.costallocations_id_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.costallocations_id_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def costallocations_id_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """costallocations_id_delete  # noqa: E501

        Delete CostAllocation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.costallocations_id_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: CostAllocation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method costallocations_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `costallocations_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/costallocations/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CostAllocation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def costallocations_id_get(self, id, **kwargs):  # noqa: E501
        """costallocations_id_get  # noqa: E501

        Get CostAllocation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.costallocations_id_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: CostAllocation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.costallocations_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.costallocations_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def costallocations_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """costallocations_id_get  # noqa: E501

        Get CostAllocation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.costallocations_id_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: CostAllocation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method costallocations_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `costallocations_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/costallocations/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CostAllocation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def costallocations_id_put(self, body, id, **kwargs):  # noqa: E501
        """costallocations_id_put  # noqa: E501

        Update CostAllocation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.costallocations_id_put(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CostAllocation body: (required)
        :param int id: (required)
        :return: CostAllocation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.costallocations_id_put_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.costallocations_id_put_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def costallocations_id_put_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """costallocations_id_put  # noqa: E501

        Update CostAllocation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.costallocations_id_put_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CostAllocation body: (required)
        :param int id: (required)
        :return: CostAllocation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method costallocations_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `costallocations_id_put`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `costallocations_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/costallocations/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CostAllocation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def costallocations_post(self, body, **kwargs):  # noqa: E501
        """costallocations_post  # noqa: E501

        Create CostAllocation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.costallocations_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CostAllocation body: (required)
        :return: CostAllocation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.costallocations_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.costallocations_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def costallocations_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """costallocations_post  # noqa: E501

        Create CostAllocation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.costallocations_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CostAllocation body: (required)
        :return: CostAllocation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method costallocations_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `costallocations_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/costallocations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CostAllocation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def costallocationsactioncreate_journalentrylinedrafts_from_account_costallocation_get(self, account_id, use_account_id, currency_amount, currency_code_id, exchange_rate, financial_date, vat_date, **kwargs):  # noqa: E501
        """costallocationsactioncreate_journalentrylinedrafts_from_account_costallocation_get  # noqa: E501

        create-journalentrylinedrafts-from-account-costallocation Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.costallocationsactioncreate_journalentrylinedrafts_from_account_costallocation_get(account_id, use_account_id, currency_amount, currency_code_id, exchange_rate, financial_date, vat_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object account_id: (required)
        :param Object use_account_id: (required)
        :param Object currency_amount: (required)
        :param Object currency_code_id: (required)
        :param Object exchange_rate: (required)
        :param Object financial_date: (required)
        :param Object vat_date: (required)
        :return: list[JournalEntryLineDraft]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.costallocationsactioncreate_journalentrylinedrafts_from_account_costallocation_get_with_http_info(account_id, use_account_id, currency_amount, currency_code_id, exchange_rate, financial_date, vat_date, **kwargs)  # noqa: E501
        else:
            (data) = self.costallocationsactioncreate_journalentrylinedrafts_from_account_costallocation_get_with_http_info(account_id, use_account_id, currency_amount, currency_code_id, exchange_rate, financial_date, vat_date, **kwargs)  # noqa: E501
            return data

    def costallocationsactioncreate_journalentrylinedrafts_from_account_costallocation_get_with_http_info(self, account_id, use_account_id, currency_amount, currency_code_id, exchange_rate, financial_date, vat_date, **kwargs):  # noqa: E501
        """costallocationsactioncreate_journalentrylinedrafts_from_account_costallocation_get  # noqa: E501

        create-journalentrylinedrafts-from-account-costallocation Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.costallocationsactioncreate_journalentrylinedrafts_from_account_costallocation_get_with_http_info(account_id, use_account_id, currency_amount, currency_code_id, exchange_rate, financial_date, vat_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object account_id: (required)
        :param Object use_account_id: (required)
        :param Object currency_amount: (required)
        :param Object currency_code_id: (required)
        :param Object exchange_rate: (required)
        :param Object financial_date: (required)
        :param Object vat_date: (required)
        :return: list[JournalEntryLineDraft]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'use_account_id', 'currency_amount', 'currency_code_id', 'exchange_rate', 'financial_date', 'vat_date']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method costallocationsactioncreate_journalentrylinedrafts_from_account_costallocation_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `costallocationsactioncreate_journalentrylinedrafts_from_account_costallocation_get`")  # noqa: E501
        # verify the required parameter 'use_account_id' is set
        if ('use_account_id' not in params or
                params['use_account_id'] is None):
            raise ValueError("Missing the required parameter `use_account_id` when calling `costallocationsactioncreate_journalentrylinedrafts_from_account_costallocation_get`")  # noqa: E501
        # verify the required parameter 'currency_amount' is set
        if ('currency_amount' not in params or
                params['currency_amount'] is None):
            raise ValueError("Missing the required parameter `currency_amount` when calling `costallocationsactioncreate_journalentrylinedrafts_from_account_costallocation_get`")  # noqa: E501
        # verify the required parameter 'currency_code_id' is set
        if ('currency_code_id' not in params or
                params['currency_code_id'] is None):
            raise ValueError("Missing the required parameter `currency_code_id` when calling `costallocationsactioncreate_journalentrylinedrafts_from_account_costallocation_get`")  # noqa: E501
        # verify the required parameter 'exchange_rate' is set
        if ('exchange_rate' not in params or
                params['exchange_rate'] is None):
            raise ValueError("Missing the required parameter `exchange_rate` when calling `costallocationsactioncreate_journalentrylinedrafts_from_account_costallocation_get`")  # noqa: E501
        # verify the required parameter 'financial_date' is set
        if ('financial_date' not in params or
                params['financial_date'] is None):
            raise ValueError("Missing the required parameter `financial_date` when calling `costallocationsactioncreate_journalentrylinedrafts_from_account_costallocation_get`")  # noqa: E501
        # verify the required parameter 'vat_date' is set
        if ('vat_date' not in params or
                params['vat_date'] is None):
            raise ValueError("Missing the required parameter `vat_date` when calling `costallocationsactioncreate_journalentrylinedrafts_from_account_costallocation_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['accountID'] = params['account_id']  # noqa: E501
        if 'use_account_id' in params:
            path_params['useAccountID'] = params['use_account_id']  # noqa: E501
        if 'currency_amount' in params:
            path_params['currencyAmount'] = params['currency_amount']  # noqa: E501
        if 'currency_code_id' in params:
            path_params['currencyCodeID'] = params['currency_code_id']  # noqa: E501
        if 'exchange_rate' in params:
            path_params['exchangeRate'] = params['exchange_rate']  # noqa: E501
        if 'financial_date' in params:
            path_params['financialDate'] = params['financial_date']  # noqa: E501
        if 'vat_date' in params:
            path_params['vatDate'] = params['vat_date']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/costallocations?action=create-journalentrylinedrafts-from-account-costallocation', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[JournalEntryLineDraft]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def costallocationsactioncreate_journalentrylinedrafts_from_costallocation_get(self, cost_allocation_id, use_account_id, currency_amount, currency_code_id, exchange_rate, financial_date, vat_date, **kwargs):  # noqa: E501
        """costallocationsactioncreate_journalentrylinedrafts_from_costallocation_get  # noqa: E501

        create-journalentrylinedrafts-from-costallocation Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.costallocationsactioncreate_journalentrylinedrafts_from_costallocation_get(cost_allocation_id, use_account_id, currency_amount, currency_code_id, exchange_rate, financial_date, vat_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object cost_allocation_id: (required)
        :param Object use_account_id: (required)
        :param Object currency_amount: (required)
        :param Object currency_code_id: (required)
        :param Object exchange_rate: (required)
        :param Object financial_date: (required)
        :param Object vat_date: (required)
        :return: list[JournalEntryLineDraft]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.costallocationsactioncreate_journalentrylinedrafts_from_costallocation_get_with_http_info(cost_allocation_id, use_account_id, currency_amount, currency_code_id, exchange_rate, financial_date, vat_date, **kwargs)  # noqa: E501
        else:
            (data) = self.costallocationsactioncreate_journalentrylinedrafts_from_costallocation_get_with_http_info(cost_allocation_id, use_account_id, currency_amount, currency_code_id, exchange_rate, financial_date, vat_date, **kwargs)  # noqa: E501
            return data

    def costallocationsactioncreate_journalentrylinedrafts_from_costallocation_get_with_http_info(self, cost_allocation_id, use_account_id, currency_amount, currency_code_id, exchange_rate, financial_date, vat_date, **kwargs):  # noqa: E501
        """costallocationsactioncreate_journalentrylinedrafts_from_costallocation_get  # noqa: E501

        create-journalentrylinedrafts-from-costallocation Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.costallocationsactioncreate_journalentrylinedrafts_from_costallocation_get_with_http_info(cost_allocation_id, use_account_id, currency_amount, currency_code_id, exchange_rate, financial_date, vat_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object cost_allocation_id: (required)
        :param Object use_account_id: (required)
        :param Object currency_amount: (required)
        :param Object currency_code_id: (required)
        :param Object exchange_rate: (required)
        :param Object financial_date: (required)
        :param Object vat_date: (required)
        :return: list[JournalEntryLineDraft]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cost_allocation_id', 'use_account_id', 'currency_amount', 'currency_code_id', 'exchange_rate', 'financial_date', 'vat_date']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method costallocationsactioncreate_journalentrylinedrafts_from_costallocation_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cost_allocation_id' is set
        if ('cost_allocation_id' not in params or
                params['cost_allocation_id'] is None):
            raise ValueError("Missing the required parameter `cost_allocation_id` when calling `costallocationsactioncreate_journalentrylinedrafts_from_costallocation_get`")  # noqa: E501
        # verify the required parameter 'use_account_id' is set
        if ('use_account_id' not in params or
                params['use_account_id'] is None):
            raise ValueError("Missing the required parameter `use_account_id` when calling `costallocationsactioncreate_journalentrylinedrafts_from_costallocation_get`")  # noqa: E501
        # verify the required parameter 'currency_amount' is set
        if ('currency_amount' not in params or
                params['currency_amount'] is None):
            raise ValueError("Missing the required parameter `currency_amount` when calling `costallocationsactioncreate_journalentrylinedrafts_from_costallocation_get`")  # noqa: E501
        # verify the required parameter 'currency_code_id' is set
        if ('currency_code_id' not in params or
                params['currency_code_id'] is None):
            raise ValueError("Missing the required parameter `currency_code_id` when calling `costallocationsactioncreate_journalentrylinedrafts_from_costallocation_get`")  # noqa: E501
        # verify the required parameter 'exchange_rate' is set
        if ('exchange_rate' not in params or
                params['exchange_rate'] is None):
            raise ValueError("Missing the required parameter `exchange_rate` when calling `costallocationsactioncreate_journalentrylinedrafts_from_costallocation_get`")  # noqa: E501
        # verify the required parameter 'financial_date' is set
        if ('financial_date' not in params or
                params['financial_date'] is None):
            raise ValueError("Missing the required parameter `financial_date` when calling `costallocationsactioncreate_journalentrylinedrafts_from_costallocation_get`")  # noqa: E501
        # verify the required parameter 'vat_date' is set
        if ('vat_date' not in params or
                params['vat_date'] is None):
            raise ValueError("Missing the required parameter `vat_date` when calling `costallocationsactioncreate_journalentrylinedrafts_from_costallocation_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cost_allocation_id' in params:
            path_params['costAllocationID'] = params['cost_allocation_id']  # noqa: E501
        if 'use_account_id' in params:
            path_params['useAccountID'] = params['use_account_id']  # noqa: E501
        if 'currency_amount' in params:
            path_params['currencyAmount'] = params['currency_amount']  # noqa: E501
        if 'currency_code_id' in params:
            path_params['currencyCodeID'] = params['currency_code_id']  # noqa: E501
        if 'exchange_rate' in params:
            path_params['exchangeRate'] = params['exchange_rate']  # noqa: E501
        if 'financial_date' in params:
            path_params['financialDate'] = params['financial_date']  # noqa: E501
        if 'vat_date' in params:
            path_params['vatDate'] = params['vat_date']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/costallocations?action=create-journalentrylinedrafts-from-costallocation', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[JournalEntryLineDraft]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def costallocationsactioncreate_journalentrylinesdrafts_from_supplier_costallocation_get(self, supplier_id, use_account_id, currency_amount, currency_code_id, exchange_rate, financial_date, vat_date, **kwargs):  # noqa: E501
        """costallocationsactioncreate_journalentrylinesdrafts_from_supplier_costallocation_get  # noqa: E501

        create-journalentrylinesdrafts-from-supplier-costallocation Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.costallocationsactioncreate_journalentrylinesdrafts_from_supplier_costallocation_get(supplier_id, use_account_id, currency_amount, currency_code_id, exchange_rate, financial_date, vat_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object supplier_id: (required)
        :param Object use_account_id: (required)
        :param Object currency_amount: (required)
        :param Object currency_code_id: (required)
        :param Object exchange_rate: (required)
        :param Object financial_date: (required)
        :param Object vat_date: (required)
        :return: list[JournalEntryLineDraft]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.costallocationsactioncreate_journalentrylinesdrafts_from_supplier_costallocation_get_with_http_info(supplier_id, use_account_id, currency_amount, currency_code_id, exchange_rate, financial_date, vat_date, **kwargs)  # noqa: E501
        else:
            (data) = self.costallocationsactioncreate_journalentrylinesdrafts_from_supplier_costallocation_get_with_http_info(supplier_id, use_account_id, currency_amount, currency_code_id, exchange_rate, financial_date, vat_date, **kwargs)  # noqa: E501
            return data

    def costallocationsactioncreate_journalentrylinesdrafts_from_supplier_costallocation_get_with_http_info(self, supplier_id, use_account_id, currency_amount, currency_code_id, exchange_rate, financial_date, vat_date, **kwargs):  # noqa: E501
        """costallocationsactioncreate_journalentrylinesdrafts_from_supplier_costallocation_get  # noqa: E501

        create-journalentrylinesdrafts-from-supplier-costallocation Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.costallocationsactioncreate_journalentrylinesdrafts_from_supplier_costallocation_get_with_http_info(supplier_id, use_account_id, currency_amount, currency_code_id, exchange_rate, financial_date, vat_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object supplier_id: (required)
        :param Object use_account_id: (required)
        :param Object currency_amount: (required)
        :param Object currency_code_id: (required)
        :param Object exchange_rate: (required)
        :param Object financial_date: (required)
        :param Object vat_date: (required)
        :return: list[JournalEntryLineDraft]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['supplier_id', 'use_account_id', 'currency_amount', 'currency_code_id', 'exchange_rate', 'financial_date', 'vat_date']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method costallocationsactioncreate_journalentrylinesdrafts_from_supplier_costallocation_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'supplier_id' is set
        if ('supplier_id' not in params or
                params['supplier_id'] is None):
            raise ValueError("Missing the required parameter `supplier_id` when calling `costallocationsactioncreate_journalentrylinesdrafts_from_supplier_costallocation_get`")  # noqa: E501
        # verify the required parameter 'use_account_id' is set
        if ('use_account_id' not in params or
                params['use_account_id'] is None):
            raise ValueError("Missing the required parameter `use_account_id` when calling `costallocationsactioncreate_journalentrylinesdrafts_from_supplier_costallocation_get`")  # noqa: E501
        # verify the required parameter 'currency_amount' is set
        if ('currency_amount' not in params or
                params['currency_amount'] is None):
            raise ValueError("Missing the required parameter `currency_amount` when calling `costallocationsactioncreate_journalentrylinesdrafts_from_supplier_costallocation_get`")  # noqa: E501
        # verify the required parameter 'currency_code_id' is set
        if ('currency_code_id' not in params or
                params['currency_code_id'] is None):
            raise ValueError("Missing the required parameter `currency_code_id` when calling `costallocationsactioncreate_journalentrylinesdrafts_from_supplier_costallocation_get`")  # noqa: E501
        # verify the required parameter 'exchange_rate' is set
        if ('exchange_rate' not in params or
                params['exchange_rate'] is None):
            raise ValueError("Missing the required parameter `exchange_rate` when calling `costallocationsactioncreate_journalentrylinesdrafts_from_supplier_costallocation_get`")  # noqa: E501
        # verify the required parameter 'financial_date' is set
        if ('financial_date' not in params or
                params['financial_date'] is None):
            raise ValueError("Missing the required parameter `financial_date` when calling `costallocationsactioncreate_journalentrylinesdrafts_from_supplier_costallocation_get`")  # noqa: E501
        # verify the required parameter 'vat_date' is set
        if ('vat_date' not in params or
                params['vat_date'] is None):
            raise ValueError("Missing the required parameter `vat_date` when calling `costallocationsactioncreate_journalentrylinesdrafts_from_supplier_costallocation_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'supplier_id' in params:
            path_params['supplierId'] = params['supplier_id']  # noqa: E501
        if 'use_account_id' in params:
            path_params['useAccountID'] = params['use_account_id']  # noqa: E501
        if 'currency_amount' in params:
            path_params['currencyAmount'] = params['currency_amount']  # noqa: E501
        if 'currency_code_id' in params:
            path_params['currencyCodeID'] = params['currency_code_id']  # noqa: E501
        if 'exchange_rate' in params:
            path_params['exchangeRate'] = params['exchange_rate']  # noqa: E501
        if 'financial_date' in params:
            path_params['financialDate'] = params['financial_date']  # noqa: E501
        if 'vat_date' in params:
            path_params['vatDate'] = params['vat_date']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/costallocations?action=create-journalentrylinesdrafts-from-supplier-costallocation', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[JournalEntryLineDraft]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
