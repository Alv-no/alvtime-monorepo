# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class AltinnApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def altinn_get(self, **kwargs):  # noqa: E501
        """altinn_get  # noqa: E501

        Query Altinn  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.altinn_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Altinn]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.altinn_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.altinn_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def altinn_get_with_http_info(self, **kwargs):  # noqa: E501
        """altinn_get  # noqa: E501

        Query Altinn  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.altinn_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Altinn]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method altinn_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/altinn', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Altinn]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def altinn_id_delete(self, id, **kwargs):  # noqa: E501
        """altinn_id_delete  # noqa: E501

        Delete Altinn  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.altinn_id_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: Altinn
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.altinn_id_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.altinn_id_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def altinn_id_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """altinn_id_delete  # noqa: E501

        Delete Altinn  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.altinn_id_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: Altinn
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method altinn_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `altinn_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/altinn/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Altinn',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def altinn_id_get(self, id, **kwargs):  # noqa: E501
        """altinn_id_get  # noqa: E501

        Get Altinn  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.altinn_id_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: Altinn
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.altinn_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.altinn_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def altinn_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """altinn_id_get  # noqa: E501

        Get Altinn  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.altinn_id_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: Altinn
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method altinn_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `altinn_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/altinn/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Altinn',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def altinn_id_put(self, body, id, **kwargs):  # noqa: E501
        """altinn_id_put  # noqa: E501

        Update Altinn  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.altinn_id_put(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Altinn body: (required)
        :param int id: (required)
        :return: Altinn
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.altinn_id_put_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.altinn_id_put_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def altinn_id_put_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """altinn_id_put  # noqa: E501

        Update Altinn  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.altinn_id_put_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Altinn body: (required)
        :param int id: (required)
        :return: Altinn
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method altinn_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `altinn_id_put`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `altinn_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/altinn/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Altinn',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def altinn_idactionemail_barnepass_to_customers_put(self, id2, id, **kwargs):  # noqa: E501
        """altinn_idactionemail_barnepass_to_customers_put  # noqa: E501

        email-barnepass-to-customers Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.altinn_idactionemail_barnepass_to_customers_put(id2, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id2: (required)
        :param Object id: (required)
        :param object body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.altinn_idactionemail_barnepass_to_customers_put_with_http_info(id2, id, **kwargs)  # noqa: E501
        else:
            (data) = self.altinn_idactionemail_barnepass_to_customers_put_with_http_info(id2, id, **kwargs)  # noqa: E501
            return data

    def altinn_idactionemail_barnepass_to_customers_put_with_http_info(self, id2, id, **kwargs):  # noqa: E501
        """altinn_idactionemail_barnepass_to_customers_put  # noqa: E501

        email-barnepass-to-customers Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.altinn_idactionemail_barnepass_to_customers_put_with_http_info(id2, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id2: (required)
        :param Object id: (required)
        :param object body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id2', 'id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method altinn_idactionemail_barnepass_to_customers_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id2' is set
        if ('id2' not in params or
                params['id2'] is None):
            raise ValueError("Missing the required parameter `id2` when calling `altinn_idactionemail_barnepass_to_customers_put`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `altinn_idactionemail_barnepass_to_customers_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/altinn/{id}?action=email-barnepass-to-customers', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def altinn_idactionsendtaxrequest_post(self, id, option, emp_id, request_all_changes, category_id, **kwargs):  # noqa: E501
        """altinn_idactionsendtaxrequest_post  # noqa: E501

        sendtaxrequest Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.altinn_idactionsendtaxrequest_post(id, option, emp_id, request_all_changes, category_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object option: (required)
        :param Object emp_id: (required)
        :param Object request_all_changes: (required)
        :param Object category_id: (required)
        :return: AltinnReceipt
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.altinn_idactionsendtaxrequest_post_with_http_info(id, option, emp_id, request_all_changes, category_id, **kwargs)  # noqa: E501
        else:
            (data) = self.altinn_idactionsendtaxrequest_post_with_http_info(id, option, emp_id, request_all_changes, category_id, **kwargs)  # noqa: E501
            return data

    def altinn_idactionsendtaxrequest_post_with_http_info(self, id, option, emp_id, request_all_changes, category_id, **kwargs):  # noqa: E501
        """altinn_idactionsendtaxrequest_post  # noqa: E501

        sendtaxrequest Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.altinn_idactionsendtaxrequest_post_with_http_info(id, option, emp_id, request_all_changes, category_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object option: (required)
        :param Object emp_id: (required)
        :param Object request_all_changes: (required)
        :param Object category_id: (required)
        :return: AltinnReceipt
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'option', 'emp_id', 'request_all_changes', 'category_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method altinn_idactionsendtaxrequest_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `altinn_idactionsendtaxrequest_post`")  # noqa: E501
        # verify the required parameter 'option' is set
        if ('option' not in params or
                params['option'] is None):
            raise ValueError("Missing the required parameter `option` when calling `altinn_idactionsendtaxrequest_post`")  # noqa: E501
        # verify the required parameter 'emp_id' is set
        if ('emp_id' not in params or
                params['emp_id'] is None):
            raise ValueError("Missing the required parameter `emp_id` when calling `altinn_idactionsendtaxrequest_post`")  # noqa: E501
        # verify the required parameter 'request_all_changes' is set
        if ('request_all_changes' not in params or
                params['request_all_changes'] is None):
            raise ValueError("Missing the required parameter `request_all_changes` when calling `altinn_idactionsendtaxrequest_post`")  # noqa: E501
        # verify the required parameter 'category_id' is set
        if ('category_id' not in params or
                params['category_id'] is None):
            raise ValueError("Missing the required parameter `category_id` when calling `altinn_idactionsendtaxrequest_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'option' in params:
            path_params['option'] = params['option']  # noqa: E501
        if 'emp_id' in params:
            path_params['empId'] = params['emp_id']  # noqa: E501
        if 'request_all_changes' in params:
            path_params['requestAllChanges'] = params['request_all_changes']  # noqa: E501
        if 'category_id' in params:
            path_params['categoryID'] = params['category_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/altinn/{id}?action=sendtaxrequest', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AltinnReceipt',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def altinn_post(self, body, **kwargs):  # noqa: E501
        """altinn_post  # noqa: E501

        Create Altinn  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.altinn_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Altinn body: (required)
        :return: Altinn
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.altinn_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.altinn_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def altinn_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """altinn_post  # noqa: E501

        Create Altinn  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.altinn_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Altinn body: (required)
        :return: Altinn
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method altinn_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `altinn_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/altinn', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Altinn',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def altinnactionchecklogin_get(self, **kwargs):  # noqa: E501
        """altinnactionchecklogin_get  # noqa: E501

        checklogin Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.altinnactionchecklogin_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.altinnactionchecklogin_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.altinnactionchecklogin_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def altinnactionchecklogin_get_with_http_info(self, **kwargs):  # noqa: E501
        """altinnactionchecklogin_get  # noqa: E501

        checklogin Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.altinnactionchecklogin_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method altinnactionchecklogin_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/altinn?action=checklogin', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def altinnactionget_a07_response_get(self, receipt_id, **kwargs):  # noqa: E501
        """altinnactionget_a07_response_get  # noqa: E501

        get-a07-response Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.altinnactionget_a07_response_get(receipt_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object receipt_id: (required)
        :return: A07Response
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.altinnactionget_a07_response_get_with_http_info(receipt_id, **kwargs)  # noqa: E501
        else:
            (data) = self.altinnactionget_a07_response_get_with_http_info(receipt_id, **kwargs)  # noqa: E501
            return data

    def altinnactionget_a07_response_get_with_http_info(self, receipt_id, **kwargs):  # noqa: E501
        """altinnactionget_a07_response_get  # noqa: E501

        get-a07-response Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.altinnactionget_a07_response_get_with_http_info(receipt_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object receipt_id: (required)
        :return: A07Response
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['receipt_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method altinnactionget_a07_response_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'receipt_id' is set
        if ('receipt_id' not in params or
                params['receipt_id'] is None):
            raise ValueError("Missing the required parameter `receipt_id` when calling `altinnactionget_a07_response_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'receipt_id' in params:
            path_params['receiptID'] = params['receipt_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/altinn?action=get-a07-response', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='A07Response',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def altinnactionget_barnepass_get(self, year, **kwargs):  # noqa: E501
        """altinnactionget_barnepass_get  # noqa: E501

        get-barnepass Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.altinnactionget_barnepass_get(year, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object year: (required)
        :return: Barnepass
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.altinnactionget_barnepass_get_with_http_info(year, **kwargs)  # noqa: E501
        else:
            (data) = self.altinnactionget_barnepass_get_with_http_info(year, **kwargs)  # noqa: E501
            return data

    def altinnactionget_barnepass_get_with_http_info(self, year, **kwargs):  # noqa: E501
        """altinnactionget_barnepass_get  # noqa: E501

        get-barnepass Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.altinnactionget_barnepass_get_with_http_info(year, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object year: (required)
        :return: Barnepass
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['year']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method altinnactionget_barnepass_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'year' is set
        if ('year' not in params or
                params['year'] is None):
            raise ValueError("Missing the required parameter `year` when calling `altinnactionget_barnepass_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'year' in params:
            path_params['year'] = params['year']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/altinn?action=get-barnepass', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Barnepass',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def altinnactionget_pin_message_post(self, **kwargs):  # noqa: E501
        """altinnactionget_pin_message_post  # noqa: E501

        get-pin-message Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.altinnactionget_pin_message_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AltinnAuthRequest body:
        :return: AuthenticationChallengeBE
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.altinnactionget_pin_message_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.altinnactionget_pin_message_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def altinnactionget_pin_message_post_with_http_info(self, **kwargs):  # noqa: E501
        """altinnactionget_pin_message_post  # noqa: E501

        get-pin-message Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.altinnactionget_pin_message_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AltinnAuthRequest body:
        :return: AuthenticationChallengeBE
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method altinnactionget_pin_message_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/altinn?action=get-pin-message', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AuthenticationChallengeBE',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def altinnactiongetpassword_get(self, **kwargs):  # noqa: E501
        """altinnactiongetpassword_get  # noqa: E501

        getpassword Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.altinnactiongetpassword_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.altinnactiongetpassword_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.altinnactiongetpassword_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def altinnactiongetpassword_get_with_http_info(self, **kwargs):  # noqa: E501
        """altinnactiongetpassword_get  # noqa: E501

        getpassword Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.altinnactiongetpassword_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method altinnactiongetpassword_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/altinn?action=getpassword', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def altinnactionis_barnepass_sendt_get(self, year, **kwargs):  # noqa: E501
        """altinnactionis_barnepass_sendt_get  # noqa: E501

        is-barnepass-sendt Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.altinnactionis_barnepass_sendt_get(year, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object year: (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.altinnactionis_barnepass_sendt_get_with_http_info(year, **kwargs)  # noqa: E501
        else:
            (data) = self.altinnactionis_barnepass_sendt_get_with_http_info(year, **kwargs)  # noqa: E501
            return data

    def altinnactionis_barnepass_sendt_get_with_http_info(self, year, **kwargs):  # noqa: E501
        """altinnactionis_barnepass_sendt_get  # noqa: E501

        is-barnepass-sendt Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.altinnactionis_barnepass_sendt_get_with_http_info(year, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object year: (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['year']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method altinnactionis_barnepass_sendt_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'year' is set
        if ('year' not in params or
                params['year'] is None):
            raise ValueError("Missing the required parameter `year` when calling `altinnactionis_barnepass_sendt_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'year' in params:
            path_params['year'] = params['year']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/altinn?action=is-barnepass-sendt', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def altinnactionsend_a06_request_post(self, **kwargs):  # noqa: E501
        """altinnactionsend_a06_request_post  # noqa: E501

        send-a06-request Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.altinnactionsend_a06_request_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param A06Options body:
        :return: AltinnReceipt
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.altinnactionsend_a06_request_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.altinnactionsend_a06_request_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def altinnactionsend_a06_request_post_with_http_info(self, **kwargs):  # noqa: E501
        """altinnactionsend_a06_request_post  # noqa: E501

        send-a06-request Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.altinnactionsend_a06_request_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param A06Options body:
        :return: AltinnReceipt
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method altinnactionsend_a06_request_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/altinn?action=send-a06-request', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AltinnReceipt',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def altinnactionsend_barnepass_post(self, **kwargs):  # noqa: E501
        """altinnactionsend_barnepass_post  # noqa: E501

        send-barnepass Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.altinnactionsend_barnepass_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Barnepass body:
        :return: AltinnReceipt
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.altinnactionsend_barnepass_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.altinnactionsend_barnepass_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def altinnactionsend_barnepass_post_with_http_info(self, **kwargs):  # noqa: E501
        """altinnactionsend_barnepass_post  # noqa: E501

        send-barnepass Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.altinnactionsend_barnepass_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Barnepass body:
        :return: AltinnReceipt
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method altinnactionsend_barnepass_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/altinn?action=send-barnepass', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AltinnReceipt',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def altinnactionsend_selfemployed_post(self, **kwargs):  # noqa: E501
        """altinnactionsend_selfemployed_post  # noqa: E501

        send-selfemployed Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.altinnactionsend_selfemployed_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SelfEmployed body:
        :return: AltinnReceipt
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.altinnactionsend_selfemployed_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.altinnactionsend_selfemployed_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def altinnactionsend_selfemployed_post_with_http_info(self, **kwargs):  # noqa: E501
        """altinnactionsend_selfemployed_post  # noqa: E501

        send-selfemployed Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.altinnactionsend_selfemployed_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SelfEmployed body:
        :return: AltinnReceipt
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method altinnactionsend_selfemployed_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/altinn?action=send-selfemployed', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AltinnReceipt',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def altinnactionsetpassword_put(self, password, **kwargs):  # noqa: E501
        """altinnactionsetpassword_put  # noqa: E501

        setpassword Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.altinnactionsetpassword_put(password, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object password: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.altinnactionsetpassword_put_with_http_info(password, **kwargs)  # noqa: E501
        else:
            (data) = self.altinnactionsetpassword_put_with_http_info(password, **kwargs)  # noqa: E501
            return data

    def altinnactionsetpassword_put_with_http_info(self, password, **kwargs):  # noqa: E501
        """altinnactionsetpassword_put  # noqa: E501

        setpassword Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.altinnactionsetpassword_put_with_http_info(password, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object password: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['password']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method altinnactionsetpassword_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'password' is set
        if ('password' not in params or
                params['password'] is None):
            raise ValueError("Missing the required parameter `password` when calling `altinnactionsetpassword_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'password' in params:
            path_params['password'] = params['password']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/altinn?action=setpassword', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def altinnactiontest_user_authentication_get(self, **kwargs):  # noqa: E501
        """altinnactiontest_user_authentication_get  # noqa: E501

        test-user-authentication Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.altinnactiontest_user_authentication_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.altinnactiontest_user_authentication_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.altinnactiontest_user_authentication_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def altinnactiontest_user_authentication_get_with_http_info(self, **kwargs):  # noqa: E501
        """altinnactiontest_user_authentication_get  # noqa: E501

        test-user-authentication Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.altinnactiontest_user_authentication_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method altinnactiontest_user_authentication_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/altinn?action=test-user-authentication', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
