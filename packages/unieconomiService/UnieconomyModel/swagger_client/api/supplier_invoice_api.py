# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class SupplierInvoiceApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def supplierinvoices_get(self, **kwargs):  # noqa: E501
        """supplierinvoices_get  # noqa: E501

        Query SupplierInvoice  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.supplierinvoices_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[SupplierInvoice]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.supplierinvoices_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.supplierinvoices_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def supplierinvoices_get_with_http_info(self, **kwargs):  # noqa: E501
        """supplierinvoices_get  # noqa: E501

        Query SupplierInvoice  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.supplierinvoices_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[SupplierInvoice]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method supplierinvoices_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/supplierinvoices', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SupplierInvoice]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def supplierinvoices_id_delete(self, id, **kwargs):  # noqa: E501
        """supplierinvoices_id_delete  # noqa: E501

        Delete SupplierInvoice  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.supplierinvoices_id_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: SupplierInvoice
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.supplierinvoices_id_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.supplierinvoices_id_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def supplierinvoices_id_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """supplierinvoices_id_delete  # noqa: E501

        Delete SupplierInvoice  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.supplierinvoices_id_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: SupplierInvoice
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method supplierinvoices_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `supplierinvoices_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/supplierinvoices/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SupplierInvoice',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def supplierinvoices_id_get(self, id, **kwargs):  # noqa: E501
        """supplierinvoices_id_get  # noqa: E501

        Get SupplierInvoice  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.supplierinvoices_id_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: SupplierInvoice
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.supplierinvoices_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.supplierinvoices_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def supplierinvoices_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """supplierinvoices_id_get  # noqa: E501

        Get SupplierInvoice  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.supplierinvoices_id_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: SupplierInvoice
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method supplierinvoices_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `supplierinvoices_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/supplierinvoices/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SupplierInvoice',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def supplierinvoices_id_put(self, body, id, **kwargs):  # noqa: E501
        """supplierinvoices_id_put  # noqa: E501

        Update SupplierInvoice  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.supplierinvoices_id_put(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SupplierInvoice body: (required)
        :param int id: (required)
        :return: SupplierInvoice
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.supplierinvoices_id_put_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.supplierinvoices_id_put_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def supplierinvoices_id_put_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """supplierinvoices_id_put  # noqa: E501

        Update SupplierInvoice  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.supplierinvoices_id_put_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SupplierInvoice body: (required)
        :param int id: (required)
        :return: SupplierInvoice
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method supplierinvoices_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `supplierinvoices_id_put`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `supplierinvoices_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/supplierinvoices/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SupplierInvoice',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def supplierinvoices_idactionapprove_post(self, id, id, **kwargs):  # noqa: E501
        """supplierinvoices_idactionapprove_post  # noqa: E501

        approve Transition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.supplierinvoices_idactionapprove_post(id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.supplierinvoices_idactionapprove_post_with_http_info(id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.supplierinvoices_idactionapprove_post_with_http_info(id, id, **kwargs)  # noqa: E501
            return data

    def supplierinvoices_idactionapprove_post_with_http_info(self, id, id, **kwargs):  # noqa: E501
        """supplierinvoices_idactionapprove_post  # noqa: E501

        approve Transition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.supplierinvoices_idactionapprove_post_with_http_info(id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method supplierinvoices_idactionapprove_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `supplierinvoices_idactionapprove_post`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `supplierinvoices_idactionapprove_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/supplierinvoices/{id}?action=approve', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def supplierinvoices_idactionassign_post(self, id, id, **kwargs):  # noqa: E501
        """supplierinvoices_idactionassign_post  # noqa: E501

        assign Transition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.supplierinvoices_idactionassign_post(id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.supplierinvoices_idactionassign_post_with_http_info(id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.supplierinvoices_idactionassign_post_with_http_info(id, id, **kwargs)  # noqa: E501
            return data

    def supplierinvoices_idactionassign_post_with_http_info(self, id, id, **kwargs):  # noqa: E501
        """supplierinvoices_idactionassign_post  # noqa: E501

        assign Transition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.supplierinvoices_idactionassign_post_with_http_info(id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method supplierinvoices_idactionassign_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `supplierinvoices_idactionassign_post`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `supplierinvoices_idactionassign_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/supplierinvoices/{id}?action=assign', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def supplierinvoices_idactionassign_to_post(self, id2, id, **kwargs):  # noqa: E501
        """supplierinvoices_idactionassign_to_post  # noqa: E501

        assign-to Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.supplierinvoices_idactionassign_to_post(id2, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id2: (required)
        :param Object id: (required)
        :param AssignmentDetails body:
        :return: Task
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.supplierinvoices_idactionassign_to_post_with_http_info(id2, id, **kwargs)  # noqa: E501
        else:
            (data) = self.supplierinvoices_idactionassign_to_post_with_http_info(id2, id, **kwargs)  # noqa: E501
            return data

    def supplierinvoices_idactionassign_to_post_with_http_info(self, id2, id, **kwargs):  # noqa: E501
        """supplierinvoices_idactionassign_to_post  # noqa: E501

        assign-to Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.supplierinvoices_idactionassign_to_post_with_http_info(id2, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id2: (required)
        :param Object id: (required)
        :param AssignmentDetails body:
        :return: Task
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id2', 'id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method supplierinvoices_idactionassign_to_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id2' is set
        if ('id2' not in params or
                params['id2'] is None):
            raise ValueError("Missing the required parameter `id2` when calling `supplierinvoices_idactionassign_to_post`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `supplierinvoices_idactionassign_to_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/supplierinvoices/{id}?action=assign-to', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Task',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def supplierinvoices_idactioncancel_approvement_post(self, id, id, **kwargs):  # noqa: E501
        """supplierinvoices_idactioncancel_approvement_post  # noqa: E501

        cancelApprovement Transition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.supplierinvoices_idactioncancel_approvement_post(id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.supplierinvoices_idactioncancel_approvement_post_with_http_info(id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.supplierinvoices_idactioncancel_approvement_post_with_http_info(id, id, **kwargs)  # noqa: E501
            return data

    def supplierinvoices_idactioncancel_approvement_post_with_http_info(self, id, id, **kwargs):  # noqa: E501
        """supplierinvoices_idactioncancel_approvement_post  # noqa: E501

        cancelApprovement Transition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.supplierinvoices_idactioncancel_approvement_post_with_http_info(id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method supplierinvoices_idactioncancel_approvement_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `supplierinvoices_idactioncancel_approvement_post`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `supplierinvoices_idactioncancel_approvement_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/supplierinvoices/{id}?action=cancelApprovement', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def supplierinvoices_idactionfinish_post(self, id, id, **kwargs):  # noqa: E501
        """supplierinvoices_idactionfinish_post  # noqa: E501

        finish Transition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.supplierinvoices_idactionfinish_post(id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.supplierinvoices_idactionfinish_post_with_http_info(id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.supplierinvoices_idactionfinish_post_with_http_info(id, id, **kwargs)  # noqa: E501
            return data

    def supplierinvoices_idactionfinish_post_with_http_info(self, id, id, **kwargs):  # noqa: E501
        """supplierinvoices_idactionfinish_post  # noqa: E501

        finish Transition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.supplierinvoices_idactionfinish_post_with_http_info(id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method supplierinvoices_idactionfinish_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `supplierinvoices_idactionfinish_post`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `supplierinvoices_idactionfinish_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/supplierinvoices/{id}?action=finish', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def supplierinvoices_idactionjournal_post(self, id, id, **kwargs):  # noqa: E501
        """supplierinvoices_idactionjournal_post  # noqa: E501

        journal Transition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.supplierinvoices_idactionjournal_post(id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.supplierinvoices_idactionjournal_post_with_http_info(id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.supplierinvoices_idactionjournal_post_with_http_info(id, id, **kwargs)  # noqa: E501
            return data

    def supplierinvoices_idactionjournal_post_with_http_info(self, id, id, **kwargs):  # noqa: E501
        """supplierinvoices_idactionjournal_post  # noqa: E501

        journal Transition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.supplierinvoices_idactionjournal_post_with_http_info(id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method supplierinvoices_idactionjournal_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `supplierinvoices_idactionjournal_post`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `supplierinvoices_idactionjournal_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/supplierinvoices/{id}?action=journal', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def supplierinvoices_idactionnotify_approval_tasks_post(self, id, days_to_due_date, redirect_url, **kwargs):  # noqa: E501
        """supplierinvoices_idactionnotify_approval_tasks_post  # noqa: E501

        notify-approval-tasks Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.supplierinvoices_idactionnotify_approval_tasks_post(id, days_to_due_date, redirect_url, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object days_to_due_date: (required)
        :param Object redirect_url: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.supplierinvoices_idactionnotify_approval_tasks_post_with_http_info(id, days_to_due_date, redirect_url, **kwargs)  # noqa: E501
        else:
            (data) = self.supplierinvoices_idactionnotify_approval_tasks_post_with_http_info(id, days_to_due_date, redirect_url, **kwargs)  # noqa: E501
            return data

    def supplierinvoices_idactionnotify_approval_tasks_post_with_http_info(self, id, days_to_due_date, redirect_url, **kwargs):  # noqa: E501
        """supplierinvoices_idactionnotify_approval_tasks_post  # noqa: E501

        notify-approval-tasks Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.supplierinvoices_idactionnotify_approval_tasks_post_with_http_info(id, days_to_due_date, redirect_url, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object days_to_due_date: (required)
        :param Object redirect_url: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'days_to_due_date', 'redirect_url']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method supplierinvoices_idactionnotify_approval_tasks_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `supplierinvoices_idactionnotify_approval_tasks_post`")  # noqa: E501
        # verify the required parameter 'days_to_due_date' is set
        if ('days_to_due_date' not in params or
                params['days_to_due_date'] is None):
            raise ValueError("Missing the required parameter `days_to_due_date` when calling `supplierinvoices_idactionnotify_approval_tasks_post`")  # noqa: E501
        # verify the required parameter 'redirect_url' is set
        if ('redirect_url' not in params or
                params['redirect_url'] is None):
            raise ValueError("Missing the required parameter `redirect_url` when calling `supplierinvoices_idactionnotify_approval_tasks_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'days_to_due_date' in params:
            path_params['daysToDueDate'] = params['days_to_due_date']  # noqa: E501
        if 'redirect_url' in params:
            path_params['redirectUrl'] = params['redirect_url']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/supplierinvoices/{id}?action=notify-approval-tasks', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def supplierinvoices_idactionpay_invoice_put(self, id, **kwargs):  # noqa: E501
        """supplierinvoices_idactionpay_invoice_put  # noqa: E501

        payInvoice Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.supplierinvoices_idactionpay_invoice_put(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param InvoicePaymentData body:
        :return: JournalEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.supplierinvoices_idactionpay_invoice_put_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.supplierinvoices_idactionpay_invoice_put_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def supplierinvoices_idactionpay_invoice_put_with_http_info(self, id, **kwargs):  # noqa: E501
        """supplierinvoices_idactionpay_invoice_put  # noqa: E501

        payInvoice Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.supplierinvoices_idactionpay_invoice_put_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param InvoicePaymentData body:
        :return: JournalEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method supplierinvoices_idactionpay_invoice_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `supplierinvoices_idactionpay_invoice_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/supplierinvoices/{id}?action=payInvoice', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JournalEntry',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def supplierinvoices_idactionpay_post(self, id, id, **kwargs):  # noqa: E501
        """supplierinvoices_idactionpay_post  # noqa: E501

        pay Transition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.supplierinvoices_idactionpay_post(id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.supplierinvoices_idactionpay_post_with_http_info(id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.supplierinvoices_idactionpay_post_with_http_info(id, id, **kwargs)  # noqa: E501
            return data

    def supplierinvoices_idactionpay_post_with_http_info(self, id, id, **kwargs):  # noqa: E501
        """supplierinvoices_idactionpay_post  # noqa: E501

        pay Transition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.supplierinvoices_idactionpay_post_with_http_info(id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method supplierinvoices_idactionpay_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `supplierinvoices_idactionpay_post`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `supplierinvoices_idactionpay_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/supplierinvoices/{id}?action=pay', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def supplierinvoices_idactionre_assign_post(self, id, id, **kwargs):  # noqa: E501
        """supplierinvoices_idactionre_assign_post  # noqa: E501

        reAssign Transition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.supplierinvoices_idactionre_assign_post(id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.supplierinvoices_idactionre_assign_post_with_http_info(id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.supplierinvoices_idactionre_assign_post_with_http_info(id, id, **kwargs)  # noqa: E501
            return data

    def supplierinvoices_idactionre_assign_post_with_http_info(self, id, id, **kwargs):  # noqa: E501
        """supplierinvoices_idactionre_assign_post  # noqa: E501

        reAssign Transition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.supplierinvoices_idactionre_assign_post_with_http_info(id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method supplierinvoices_idactionre_assign_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `supplierinvoices_idactionre_assign_post`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `supplierinvoices_idactionre_assign_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/supplierinvoices/{id}?action=reAssign', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def supplierinvoices_idactionre_assign_to_post(self, id2, id, **kwargs):  # noqa: E501
        """supplierinvoices_idactionre_assign_to_post  # noqa: E501

        reAssign-to Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.supplierinvoices_idactionre_assign_to_post(id2, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id2: (required)
        :param Object id: (required)
        :param AssignmentDetails body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.supplierinvoices_idactionre_assign_to_post_with_http_info(id2, id, **kwargs)  # noqa: E501
        else:
            (data) = self.supplierinvoices_idactionre_assign_to_post_with_http_info(id2, id, **kwargs)  # noqa: E501
            return data

    def supplierinvoices_idactionre_assign_to_post_with_http_info(self, id2, id, **kwargs):  # noqa: E501
        """supplierinvoices_idactionre_assign_to_post  # noqa: E501

        reAssign-to Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.supplierinvoices_idactionre_assign_to_post_with_http_info(id2, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id2: (required)
        :param Object id: (required)
        :param AssignmentDetails body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id2', 'id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method supplierinvoices_idactionre_assign_to_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id2' is set
        if ('id2' not in params or
                params['id2'] is None):
            raise ValueError("Missing the required parameter `id2` when calling `supplierinvoices_idactionre_assign_to_post`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `supplierinvoices_idactionre_assign_to_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/supplierinvoices/{id}?action=reAssign-to', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def supplierinvoices_idactionreject_assignment_post(self, id, id, **kwargs):  # noqa: E501
        """supplierinvoices_idactionreject_assignment_post  # noqa: E501

        rejectAssignment Transition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.supplierinvoices_idactionreject_assignment_post(id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.supplierinvoices_idactionreject_assignment_post_with_http_info(id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.supplierinvoices_idactionreject_assignment_post_with_http_info(id, id, **kwargs)  # noqa: E501
            return data

    def supplierinvoices_idactionreject_assignment_post_with_http_info(self, id, id, **kwargs):  # noqa: E501
        """supplierinvoices_idactionreject_assignment_post  # noqa: E501

        rejectAssignment Transition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.supplierinvoices_idactionreject_assignment_post_with_http_info(id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method supplierinvoices_idactionreject_assignment_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `supplierinvoices_idactionreject_assignment_post`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `supplierinvoices_idactionreject_assignment_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/supplierinvoices/{id}?action=rejectAssignment', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def supplierinvoices_idactionreject_invoice_post(self, id, id, **kwargs):  # noqa: E501
        """supplierinvoices_idactionreject_invoice_post  # noqa: E501

        rejectInvoice Transition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.supplierinvoices_idactionreject_invoice_post(id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.supplierinvoices_idactionreject_invoice_post_with_http_info(id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.supplierinvoices_idactionreject_invoice_post_with_http_info(id, id, **kwargs)  # noqa: E501
            return data

    def supplierinvoices_idactionreject_invoice_post_with_http_info(self, id, id, **kwargs):  # noqa: E501
        """supplierinvoices_idactionreject_invoice_post  # noqa: E501

        rejectInvoice Transition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.supplierinvoices_idactionreject_invoice_post_with_http_info(id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method supplierinvoices_idactionreject_invoice_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `supplierinvoices_idactionreject_invoice_post`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `supplierinvoices_idactionreject_invoice_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/supplierinvoices/{id}?action=rejectInvoice', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def supplierinvoices_idactionreject_put(self, id, id, **kwargs):  # noqa: E501
        """supplierinvoices_idactionreject_put  # noqa: E501

        reject Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.supplierinvoices_idactionreject_put(id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.supplierinvoices_idactionreject_put_with_http_info(id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.supplierinvoices_idactionreject_put_with_http_info(id, id, **kwargs)  # noqa: E501
            return data

    def supplierinvoices_idactionreject_put_with_http_info(self, id, id, **kwargs):  # noqa: E501
        """supplierinvoices_idactionreject_put  # noqa: E501

        reject Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.supplierinvoices_idactionreject_put_with_http_info(id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method supplierinvoices_idactionreject_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `supplierinvoices_idactionreject_put`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `supplierinvoices_idactionreject_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/supplierinvoices/{id}?action=reject', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def supplierinvoices_idactionrestore_post(self, id, id, **kwargs):  # noqa: E501
        """supplierinvoices_idactionrestore_post  # noqa: E501

        restore Transition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.supplierinvoices_idactionrestore_post(id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.supplierinvoices_idactionrestore_post_with_http_info(id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.supplierinvoices_idactionrestore_post_with_http_info(id, id, **kwargs)  # noqa: E501
            return data

    def supplierinvoices_idactionrestore_post_with_http_info(self, id, id, **kwargs):  # noqa: E501
        """supplierinvoices_idactionrestore_post  # noqa: E501

        restore Transition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.supplierinvoices_idactionrestore_post_with_http_info(id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method supplierinvoices_idactionrestore_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `supplierinvoices_idactionrestore_post`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `supplierinvoices_idactionrestore_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/supplierinvoices/{id}?action=restore', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def supplierinvoices_idactionrevert_finish_post(self, id, id, **kwargs):  # noqa: E501
        """supplierinvoices_idactionrevert_finish_post  # noqa: E501

        revertFinish Transition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.supplierinvoices_idactionrevert_finish_post(id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.supplierinvoices_idactionrevert_finish_post_with_http_info(id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.supplierinvoices_idactionrevert_finish_post_with_http_info(id, id, **kwargs)  # noqa: E501
            return data

    def supplierinvoices_idactionrevert_finish_post_with_http_info(self, id, id, **kwargs):  # noqa: E501
        """supplierinvoices_idactionrevert_finish_post  # noqa: E501

        revertFinish Transition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.supplierinvoices_idactionrevert_finish_post_with_http_info(id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method supplierinvoices_idactionrevert_finish_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `supplierinvoices_idactionrevert_finish_post`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `supplierinvoices_idactionrevert_finish_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/supplierinvoices/{id}?action=revertFinish', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def supplierinvoices_idactionsend_for_payment_post(self, id, id, **kwargs):  # noqa: E501
        """supplierinvoices_idactionsend_for_payment_post  # noqa: E501

        sendForPayment Transition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.supplierinvoices_idactionsend_for_payment_post(id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.supplierinvoices_idactionsend_for_payment_post_with_http_info(id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.supplierinvoices_idactionsend_for_payment_post_with_http_info(id, id, **kwargs)  # noqa: E501
            return data

    def supplierinvoices_idactionsend_for_payment_post_with_http_info(self, id, id, **kwargs):  # noqa: E501
        """supplierinvoices_idactionsend_for_payment_post  # noqa: E501

        sendForPayment Transition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.supplierinvoices_idactionsend_for_payment_post_with_http_info(id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method supplierinvoices_idactionsend_for_payment_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `supplierinvoices_idactionsend_for_payment_post`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `supplierinvoices_idactionsend_for_payment_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/supplierinvoices/{id}?action=sendForPayment', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def supplierinvoices_idactionsend_for_payment_with_payment_data_post(self, id2, id, **kwargs):  # noqa: E501
        """supplierinvoices_idactionsend_for_payment_with_payment_data_post  # noqa: E501

        sendForPaymentWithPaymentData Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.supplierinvoices_idactionsend_for_payment_with_payment_data_post(id2, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id2: (required)
        :param Object id: (required)
        :param InvoicePaymentData body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.supplierinvoices_idactionsend_for_payment_with_payment_data_post_with_http_info(id2, id, **kwargs)  # noqa: E501
        else:
            (data) = self.supplierinvoices_idactionsend_for_payment_with_payment_data_post_with_http_info(id2, id, **kwargs)  # noqa: E501
            return data

    def supplierinvoices_idactionsend_for_payment_with_payment_data_post_with_http_info(self, id2, id, **kwargs):  # noqa: E501
        """supplierinvoices_idactionsend_for_payment_with_payment_data_post  # noqa: E501

        sendForPaymentWithPaymentData Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.supplierinvoices_idactionsend_for_payment_with_payment_data_post_with_http_info(id2, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id2: (required)
        :param Object id: (required)
        :param InvoicePaymentData body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id2', 'id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method supplierinvoices_idactionsend_for_payment_with_payment_data_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id2' is set
        if ('id2' not in params or
                params['id2'] is None):
            raise ValueError("Missing the required parameter `id2` when calling `supplierinvoices_idactionsend_for_payment_with_payment_data_post`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `supplierinvoices_idactionsend_for_payment_with_payment_data_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/supplierinvoices/{id}?action=sendForPaymentWithPaymentData', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def supplierinvoices_idactionsmartbooking_put(self, id, **kwargs):  # noqa: E501
        """supplierinvoices_idactionsmartbooking_put  # noqa: E501

        smartbooking Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.supplierinvoices_idactionsmartbooking_put(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: JournalEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.supplierinvoices_idactionsmartbooking_put_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.supplierinvoices_idactionsmartbooking_put_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def supplierinvoices_idactionsmartbooking_put_with_http_info(self, id, **kwargs):  # noqa: E501
        """supplierinvoices_idactionsmartbooking_put  # noqa: E501

        smartbooking Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.supplierinvoices_idactionsmartbooking_put_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: JournalEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method supplierinvoices_idactionsmartbooking_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `supplierinvoices_idactionsmartbooking_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/supplierinvoices/{id}?action=smartbooking', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JournalEntry',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def supplierinvoices_post(self, body, **kwargs):  # noqa: E501
        """supplierinvoices_post  # noqa: E501

        Create SupplierInvoice  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.supplierinvoices_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SupplierInvoice body: (required)
        :return: SupplierInvoice
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.supplierinvoices_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.supplierinvoices_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def supplierinvoices_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """supplierinvoices_post  # noqa: E501

        Create SupplierInvoice  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.supplierinvoices_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SupplierInvoice body: (required)
        :return: SupplierInvoice
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method supplierinvoices_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `supplierinvoices_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/supplierinvoices', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SupplierInvoice',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def supplierinvoicesactioncredit_supplierinvoice_journalentry_post(self, supplier_invoice_id, **kwargs):  # noqa: E501
        """supplierinvoicesactioncredit_supplierinvoice_journalentry_post  # noqa: E501

        credit-supplierinvoice-journalentry Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.supplierinvoicesactioncredit_supplierinvoice_journalentry_post(supplier_invoice_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object supplier_invoice_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.supplierinvoicesactioncredit_supplierinvoice_journalentry_post_with_http_info(supplier_invoice_id, **kwargs)  # noqa: E501
        else:
            (data) = self.supplierinvoicesactioncredit_supplierinvoice_journalentry_post_with_http_info(supplier_invoice_id, **kwargs)  # noqa: E501
            return data

    def supplierinvoicesactioncredit_supplierinvoice_journalentry_post_with_http_info(self, supplier_invoice_id, **kwargs):  # noqa: E501
        """supplierinvoicesactioncredit_supplierinvoice_journalentry_post  # noqa: E501

        credit-supplierinvoice-journalentry Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.supplierinvoicesactioncredit_supplierinvoice_journalentry_post_with_http_info(supplier_invoice_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object supplier_invoice_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['supplier_invoice_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method supplierinvoicesactioncredit_supplierinvoice_journalentry_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'supplier_invoice_id' is set
        if ('supplier_invoice_id' not in params or
                params['supplier_invoice_id'] is None):
            raise ValueError("Missing the required parameter `supplier_invoice_id` when calling `supplierinvoicesactioncredit_supplierinvoice_journalentry_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'supplier_invoice_id' in params:
            path_params['supplierInvoiceId'] = params['supplier_invoice_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/supplierinvoices?action=credit-supplierinvoice-journalentry', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def supplierinvoicesactionget_selfemployed_payments_get(self, year, **kwargs):  # noqa: E501
        """supplierinvoicesactionget_selfemployed_payments_get  # noqa: E501

        get-selfemployed-payments Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.supplierinvoicesactionget_selfemployed_payments_get(year, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object year: (required)
        :return: list[SelfEmployedItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.supplierinvoicesactionget_selfemployed_payments_get_with_http_info(year, **kwargs)  # noqa: E501
        else:
            (data) = self.supplierinvoicesactionget_selfemployed_payments_get_with_http_info(year, **kwargs)  # noqa: E501
            return data

    def supplierinvoicesactionget_selfemployed_payments_get_with_http_info(self, year, **kwargs):  # noqa: E501
        """supplierinvoicesactionget_selfemployed_payments_get  # noqa: E501

        get-selfemployed-payments Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.supplierinvoicesactionget_selfemployed_payments_get_with_http_info(year, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object year: (required)
        :return: list[SelfEmployedItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['year']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method supplierinvoicesactionget_selfemployed_payments_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'year' is set
        if ('year' not in params or
                params['year'] is None):
            raise ValueError("Missing the required parameter `year` when calling `supplierinvoicesactionget_selfemployed_payments_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'year' in params:
            path_params['year'] = params['year']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/supplierinvoices?action=get-selfemployed-payments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SelfEmployedItem]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def supplierinvoicesactionget_supplier_invoice_summary_get(self, odata_filter, **kwargs):  # noqa: E501
        """supplierinvoicesactionget_supplier_invoice_summary_get  # noqa: E501

        get-supplier-invoice-summary Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.supplierinvoicesactionget_supplier_invoice_summary_get(odata_filter, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object odata_filter: (required)
        :return: InvoiceSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.supplierinvoicesactionget_supplier_invoice_summary_get_with_http_info(odata_filter, **kwargs)  # noqa: E501
        else:
            (data) = self.supplierinvoicesactionget_supplier_invoice_summary_get_with_http_info(odata_filter, **kwargs)  # noqa: E501
            return data

    def supplierinvoicesactionget_supplier_invoice_summary_get_with_http_info(self, odata_filter, **kwargs):  # noqa: E501
        """supplierinvoicesactionget_supplier_invoice_summary_get  # noqa: E501

        get-supplier-invoice-summary Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.supplierinvoicesactionget_supplier_invoice_summary_get_with_http_info(odata_filter, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object odata_filter: (required)
        :return: InvoiceSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['odata_filter']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method supplierinvoicesactionget_supplier_invoice_summary_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'odata_filter' is set
        if ('odata_filter' not in params or
                params['odata_filter'] is None):
            raise ValueError("Missing the required parameter `odata_filter` when calling `supplierinvoicesactionget_supplier_invoice_summary_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'odata_filter' in params:
            path_params['odataFilter'] = params['odata_filter']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/supplierinvoices?action=get-supplier-invoice-summary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InvoiceSummary',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def supplierinvoicesactionget_supplierinvoices_details_get(self, id, supplier_id, from_date, to_date, **kwargs):  # noqa: E501
        """supplierinvoicesactionget_supplierinvoices_details_get  # noqa: E501

        get-supplierinvoices-details Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.supplierinvoicesactionget_supplierinvoices_details_get(id, supplier_id, from_date, to_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object id: (required)
        :param Object supplier_id: (required)
        :param Object from_date: (required)
        :param Object to_date: (required)
        :return: list[SupplierInvoiceDetail]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.supplierinvoicesactionget_supplierinvoices_details_get_with_http_info(id, supplier_id, from_date, to_date, **kwargs)  # noqa: E501
        else:
            (data) = self.supplierinvoicesactionget_supplierinvoices_details_get_with_http_info(id, supplier_id, from_date, to_date, **kwargs)  # noqa: E501
            return data

    def supplierinvoicesactionget_supplierinvoices_details_get_with_http_info(self, id, supplier_id, from_date, to_date, **kwargs):  # noqa: E501
        """supplierinvoicesactionget_supplierinvoices_details_get  # noqa: E501

        get-supplierinvoices-details Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.supplierinvoicesactionget_supplierinvoices_details_get_with_http_info(id, supplier_id, from_date, to_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object id: (required)
        :param Object supplier_id: (required)
        :param Object from_date: (required)
        :param Object to_date: (required)
        :return: list[SupplierInvoiceDetail]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'supplier_id', 'from_date', 'to_date']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method supplierinvoicesactionget_supplierinvoices_details_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `supplierinvoicesactionget_supplierinvoices_details_get`")  # noqa: E501
        # verify the required parameter 'supplier_id' is set
        if ('supplier_id' not in params or
                params['supplier_id'] is None):
            raise ValueError("Missing the required parameter `supplier_id` when calling `supplierinvoicesactionget_supplierinvoices_details_get`")  # noqa: E501
        # verify the required parameter 'from_date' is set
        if ('from_date' not in params or
                params['from_date'] is None):
            raise ValueError("Missing the required parameter `from_date` when calling `supplierinvoicesactionget_supplierinvoices_details_get`")  # noqa: E501
        # verify the required parameter 'to_date' is set
        if ('to_date' not in params or
                params['to_date'] is None):
            raise ValueError("Missing the required parameter `to_date` when calling `supplierinvoicesactionget_supplierinvoices_details_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'supplier_id' in params:
            path_params['supplierID'] = params['supplier_id']  # noqa: E501
        if 'from_date' in params:
            path_params['fromDate'] = params['from_date']  # noqa: E501
        if 'to_date' in params:
            path_params['toDate'] = params['to_date']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/supplierinvoices?action=get-supplierinvoices-details', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SupplierInvoiceDetail]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def supplierinvoicesactionpay_put(self, id, **kwargs):  # noqa: E501
        """supplierinvoicesactionpay_put  # noqa: E501

        pay Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.supplierinvoicesactionpay_put(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.supplierinvoicesactionpay_put_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.supplierinvoicesactionpay_put_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def supplierinvoicesactionpay_put_with_http_info(self, id, **kwargs):  # noqa: E501
        """supplierinvoicesactionpay_put  # noqa: E501

        pay Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.supplierinvoicesactionpay_put_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method supplierinvoicesactionpay_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `supplierinvoicesactionpay_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/supplierinvoices?action=pay', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def supplierinvoicesactionsend_for_payment_put(self, id, **kwargs):  # noqa: E501
        """supplierinvoicesactionsend_for_payment_put  # noqa: E501

        sendForPayment Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.supplierinvoicesactionsend_for_payment_put(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.supplierinvoicesactionsend_for_payment_put_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.supplierinvoicesactionsend_for_payment_put_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def supplierinvoicesactionsend_for_payment_put_with_http_info(self, id, **kwargs):  # noqa: E501
        """supplierinvoicesactionsend_for_payment_put  # noqa: E501

        sendForPayment Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.supplierinvoicesactionsend_for_payment_put_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method supplierinvoicesactionsend_for_payment_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `supplierinvoicesactionsend_for_payment_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/supplierinvoices?action=sendForPayment', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
