# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class DistributionPlanApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def distributions_get(self, **kwargs):  # noqa: E501
        """distributions_get  # noqa: E501

        Query DistributionPlan  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distributions_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[DistributionPlan]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.distributions_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.distributions_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def distributions_get_with_http_info(self, **kwargs):  # noqa: E501
        """distributions_get  # noqa: E501

        Query DistributionPlan  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distributions_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[DistributionPlan]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method distributions_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/distributions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DistributionPlan]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def distributions_id_delete(self, id, **kwargs):  # noqa: E501
        """distributions_id_delete  # noqa: E501

        Delete DistributionPlan  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distributions_id_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: DistributionPlan
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.distributions_id_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.distributions_id_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def distributions_id_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """distributions_id_delete  # noqa: E501

        Delete DistributionPlan  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distributions_id_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: DistributionPlan
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method distributions_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `distributions_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/distributions/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DistributionPlan',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def distributions_id_get(self, id, **kwargs):  # noqa: E501
        """distributions_id_get  # noqa: E501

        Get DistributionPlan  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distributions_id_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: DistributionPlan
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.distributions_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.distributions_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def distributions_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """distributions_id_get  # noqa: E501

        Get DistributionPlan  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distributions_id_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: DistributionPlan
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method distributions_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `distributions_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/distributions/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DistributionPlan',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def distributions_id_put(self, body, id, **kwargs):  # noqa: E501
        """distributions_id_put  # noqa: E501

        Update DistributionPlan  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distributions_id_put(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DistributionPlan body: (required)
        :param int id: (required)
        :return: DistributionPlan
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.distributions_id_put_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.distributions_id_put_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def distributions_id_put_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """distributions_id_put  # noqa: E501

        Update DistributionPlan  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distributions_id_put_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DistributionPlan body: (required)
        :param int id: (required)
        :return: DistributionPlan
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method distributions_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `distributions_id_put`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `distributions_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/distributions/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DistributionPlan',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def distributions_post(self, body, **kwargs):  # noqa: E501
        """distributions_post  # noqa: E501

        Create DistributionPlan  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distributions_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DistributionPlan body: (required)
        :return: DistributionPlan
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.distributions_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.distributions_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def distributions_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """distributions_post  # noqa: E501

        Create DistributionPlan  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distributions_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DistributionPlan body: (required)
        :return: DistributionPlan
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method distributions_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `distributions_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/distributions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DistributionPlan',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def distributionsactiondistribute_list_put(self, ids, entity_type, **kwargs):  # noqa: E501
        """distributionsactiondistribute_list_put  # noqa: E501

        distribute-list Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distributionsactiondistribute_list_put(ids, entity_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object ids: (required)
        :param Object entity_type: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.distributionsactiondistribute_list_put_with_http_info(ids, entity_type, **kwargs)  # noqa: E501
        else:
            (data) = self.distributionsactiondistribute_list_put_with_http_info(ids, entity_type, **kwargs)  # noqa: E501
            return data

    def distributionsactiondistribute_list_put_with_http_info(self, ids, entity_type, **kwargs):  # noqa: E501
        """distributionsactiondistribute_list_put  # noqa: E501

        distribute-list Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distributionsactiondistribute_list_put_with_http_info(ids, entity_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object ids: (required)
        :param Object entity_type: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ids', 'entity_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method distributionsactiondistribute_list_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ids' is set
        if ('ids' not in params or
                params['ids'] is None):
            raise ValueError("Missing the required parameter `ids` when calling `distributionsactiondistribute_list_put`")  # noqa: E501
        # verify the required parameter 'entity_type' is set
        if ('entity_type' not in params or
                params['entity_type'] is None):
            raise ValueError("Missing the required parameter `entity_type` when calling `distributionsactiondistribute_list_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ids' in params:
            path_params['ids'] = params['ids']  # noqa: E501
        if 'entity_type' in params:
            path_params['entityType'] = params['entity_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/distributions?action=distribute-list', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def distributionsactiondistribute_put(self, id, entity_type, **kwargs):  # noqa: E501
        """distributionsactiondistribute_put  # noqa: E501

        distribute Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distributionsactiondistribute_put(id, entity_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object id: (required)
        :param Object entity_type: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.distributionsactiondistribute_put_with_http_info(id, entity_type, **kwargs)  # noqa: E501
        else:
            (data) = self.distributionsactiondistribute_put_with_http_info(id, entity_type, **kwargs)  # noqa: E501
            return data

    def distributionsactiondistribute_put_with_http_info(self, id, entity_type, **kwargs):  # noqa: E501
        """distributionsactiondistribute_put  # noqa: E501

        distribute Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distributionsactiondistribute_put_with_http_info(id, entity_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object id: (required)
        :param Object entity_type: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'entity_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method distributionsactiondistribute_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `distributionsactiondistribute_put`")  # noqa: E501
        # verify the required parameter 'entity_type' is set
        if ('entity_type' not in params or
                params['entity_type'] is None):
            raise ValueError("Missing the required parameter `entity_type` when calling `distributionsactiondistribute_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'entity_type' in params:
            path_params['entityType'] = params['entity_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/distributions?action=distribute', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def distributionsactiondistribute_with_date_and_type_put(self, id, entity_type, distribution_type, distribute_date, **kwargs):  # noqa: E501
        """distributionsactiondistribute_with_date_and_type_put  # noqa: E501

        distribute-with-date-and-type Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distributionsactiondistribute_with_date_and_type_put(id, entity_type, distribution_type, distribute_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object id: (required)
        :param Object entity_type: (required)
        :param Object distribution_type: (required)
        :param Object distribute_date: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.distributionsactiondistribute_with_date_and_type_put_with_http_info(id, entity_type, distribution_type, distribute_date, **kwargs)  # noqa: E501
        else:
            (data) = self.distributionsactiondistribute_with_date_and_type_put_with_http_info(id, entity_type, distribution_type, distribute_date, **kwargs)  # noqa: E501
            return data

    def distributionsactiondistribute_with_date_and_type_put_with_http_info(self, id, entity_type, distribution_type, distribute_date, **kwargs):  # noqa: E501
        """distributionsactiondistribute_with_date_and_type_put  # noqa: E501

        distribute-with-date-and-type Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distributionsactiondistribute_with_date_and_type_put_with_http_info(id, entity_type, distribution_type, distribute_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object id: (required)
        :param Object entity_type: (required)
        :param Object distribution_type: (required)
        :param Object distribute_date: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'entity_type', 'distribution_type', 'distribute_date']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method distributionsactiondistribute_with_date_and_type_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `distributionsactiondistribute_with_date_and_type_put`")  # noqa: E501
        # verify the required parameter 'entity_type' is set
        if ('entity_type' not in params or
                params['entity_type'] is None):
            raise ValueError("Missing the required parameter `entity_type` when calling `distributionsactiondistribute_with_date_and_type_put`")  # noqa: E501
        # verify the required parameter 'distribution_type' is set
        if ('distribution_type' not in params or
                params['distribution_type'] is None):
            raise ValueError("Missing the required parameter `distribution_type` when calling `distributionsactiondistribute_with_date_and_type_put`")  # noqa: E501
        # verify the required parameter 'distribute_date' is set
        if ('distribute_date' not in params or
                params['distribute_date'] is None):
            raise ValueError("Missing the required parameter `distribute_date` when calling `distributionsactiondistribute_with_date_and_type_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'entity_type' in params:
            path_params['entityType'] = params['entity_type']  # noqa: E501
        if 'distribution_type' in params:
            path_params['distributionType'] = params['distribution_type']  # noqa: E501
        if 'distribute_date' in params:
            path_params['distributeDate'] = params['distribute_date']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/distributions?action=distribute-with-date-and-type', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def distributionsactiondistribute_with_date_put(self, id, entity_type, distribute_date, **kwargs):  # noqa: E501
        """distributionsactiondistribute_with_date_put  # noqa: E501

        distribute-with-date Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distributionsactiondistribute_with_date_put(id, entity_type, distribute_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object id: (required)
        :param Object entity_type: (required)
        :param Object distribute_date: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.distributionsactiondistribute_with_date_put_with_http_info(id, entity_type, distribute_date, **kwargs)  # noqa: E501
        else:
            (data) = self.distributionsactiondistribute_with_date_put_with_http_info(id, entity_type, distribute_date, **kwargs)  # noqa: E501
            return data

    def distributionsactiondistribute_with_date_put_with_http_info(self, id, entity_type, distribute_date, **kwargs):  # noqa: E501
        """distributionsactiondistribute_with_date_put  # noqa: E501

        distribute-with-date Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distributionsactiondistribute_with_date_put_with_http_info(id, entity_type, distribute_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object id: (required)
        :param Object entity_type: (required)
        :param Object distribute_date: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'entity_type', 'distribute_date']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method distributionsactiondistribute_with_date_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `distributionsactiondistribute_with_date_put`")  # noqa: E501
        # verify the required parameter 'entity_type' is set
        if ('entity_type' not in params or
                params['entity_type'] is None):
            raise ValueError("Missing the required parameter `entity_type` when calling `distributionsactiondistribute_with_date_put`")  # noqa: E501
        # verify the required parameter 'distribute_date' is set
        if ('distribute_date' not in params or
                params['distribute_date'] is None):
            raise ValueError("Missing the required parameter `distribute_date` when calling `distributionsactiondistribute_with_date_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'entity_type' in params:
            path_params['entityType'] = params['entity_type']  # noqa: E501
        if 'distribute_date' in params:
            path_params['distributeDate'] = params['distribute_date']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/distributions?action=distribute-with-date', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def distributionsactiondistribute_with_type_put(self, id, entity_type, distribution_type, **kwargs):  # noqa: E501
        """distributionsactiondistribute_with_type_put  # noqa: E501

        distribute-with-type Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distributionsactiondistribute_with_type_put(id, entity_type, distribution_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object id: (required)
        :param Object entity_type: (required)
        :param Object distribution_type: (required)
        :param EmailDTO body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.distributionsactiondistribute_with_type_put_with_http_info(id, entity_type, distribution_type, **kwargs)  # noqa: E501
        else:
            (data) = self.distributionsactiondistribute_with_type_put_with_http_info(id, entity_type, distribution_type, **kwargs)  # noqa: E501
            return data

    def distributionsactiondistribute_with_type_put_with_http_info(self, id, entity_type, distribution_type, **kwargs):  # noqa: E501
        """distributionsactiondistribute_with_type_put  # noqa: E501

        distribute-with-type Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distributionsactiondistribute_with_type_put_with_http_info(id, entity_type, distribution_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object id: (required)
        :param Object entity_type: (required)
        :param Object distribution_type: (required)
        :param EmailDTO body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'entity_type', 'distribution_type', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method distributionsactiondistribute_with_type_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `distributionsactiondistribute_with_type_put`")  # noqa: E501
        # verify the required parameter 'entity_type' is set
        if ('entity_type' not in params or
                params['entity_type'] is None):
            raise ValueError("Missing the required parameter `entity_type` when calling `distributionsactiondistribute_with_type_put`")  # noqa: E501
        # verify the required parameter 'distribution_type' is set
        if ('distribution_type' not in params or
                params['distribution_type'] is None):
            raise ValueError("Missing the required parameter `distribution_type` when calling `distributionsactiondistribute_with_type_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'entity_type' in params:
            path_params['entityType'] = params['entity_type']  # noqa: E501
        if 'distribution_type' in params:
            path_params['distributionType'] = params['distribution_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/distributions?action=distribute-with-type', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def distributionsactionentities_with_distribution_get(self, entity_ids, entity_type, **kwargs):  # noqa: E501
        """distributionsactionentities_with_distribution_get  # noqa: E501

        entities-with-distribution Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distributionsactionentities_with_distribution_get(entity_ids, entity_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object entity_ids: (required)
        :param Object entity_type: (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.distributionsactionentities_with_distribution_get_with_http_info(entity_ids, entity_type, **kwargs)  # noqa: E501
        else:
            (data) = self.distributionsactionentities_with_distribution_get_with_http_info(entity_ids, entity_type, **kwargs)  # noqa: E501
            return data

    def distributionsactionentities_with_distribution_get_with_http_info(self, entity_ids, entity_type, **kwargs):  # noqa: E501
        """distributionsactionentities_with_distribution_get  # noqa: E501

        entities-with-distribution Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distributionsactionentities_with_distribution_get_with_http_info(entity_ids, entity_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object entity_ids: (required)
        :param Object entity_type: (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['entity_ids', 'entity_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method distributionsactionentities_with_distribution_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'entity_ids' is set
        if ('entity_ids' not in params or
                params['entity_ids'] is None):
            raise ValueError("Missing the required parameter `entity_ids` when calling `distributionsactionentities_with_distribution_get`")  # noqa: E501
        # verify the required parameter 'entity_type' is set
        if ('entity_type' not in params or
                params['entity_type'] is None):
            raise ValueError("Missing the required parameter `entity_type` when calling `distributionsactionentities_with_distribution_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'entity_ids' in params:
            path_params['entityIds'] = params['entity_ids']  # noqa: E501
        if 'entity_type' in params:
            path_params['entityType'] = params['entity_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/distributions?action=entities-with-distribution', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def distributionsactionget_distributionplanelement_errormap_get(self, **kwargs):  # noqa: E501
        """distributionsactionget_distributionplanelement_errormap_get  # noqa: E501

        get-distributionplanelement-errormap Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distributionsactionget_distributionplanelement_errormap_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.distributionsactionget_distributionplanelement_errormap_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.distributionsactionget_distributionplanelement_errormap_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def distributionsactionget_distributionplanelement_errormap_get_with_http_info(self, **kwargs):  # noqa: E501
        """distributionsactionget_distributionplanelement_errormap_get  # noqa: E501

        get-distributionplanelement-errormap Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distributionsactionget_distributionplanelement_errormap_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method distributionsactionget_distributionplanelement_errormap_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/distributions?action=get-distributionplanelement-errormap', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def distributionsactionget_entitytype_distributionplans_get(self, entity_type, **kwargs):  # noqa: E501
        """distributionsactionget_entitytype_distributionplans_get  # noqa: E501

        get-entitytype-distributionplans Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distributionsactionget_entitytype_distributionplans_get(entity_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object entity_type: (required)
        :return: list[DistributionPlan]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.distributionsactionget_entitytype_distributionplans_get_with_http_info(entity_type, **kwargs)  # noqa: E501
        else:
            (data) = self.distributionsactionget_entitytype_distributionplans_get_with_http_info(entity_type, **kwargs)  # noqa: E501
            return data

    def distributionsactionget_entitytype_distributionplans_get_with_http_info(self, entity_type, **kwargs):  # noqa: E501
        """distributionsactionget_entitytype_distributionplans_get  # noqa: E501

        get-entitytype-distributionplans Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distributionsactionget_entitytype_distributionplans_get_with_http_info(entity_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object entity_type: (required)
        :return: list[DistributionPlan]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['entity_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method distributionsactionget_entitytype_distributionplans_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'entity_type' is set
        if ('entity_type' not in params or
                params['entity_type'] is None):
            raise ValueError("Missing the required parameter `entity_type` when calling `distributionsactionget_entitytype_distributionplans_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'entity_type' in params:
            path_params['entityType'] = params['entity_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/distributions?action=get-entitytype-distributionplans', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DistributionPlan]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def distributionsactionget_entitytype_list_get(self, **kwargs):  # noqa: E501
        """distributionsactionget_entitytype_list_get  # noqa: E501

        get-entitytype-list Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distributionsactionget_entitytype_list_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.distributionsactionget_entitytype_list_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.distributionsactionget_entitytype_list_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def distributionsactionget_entitytype_list_get_with_http_info(self, **kwargs):  # noqa: E501
        """distributionsactionget_entitytype_list_get  # noqa: E501

        get-entitytype-list Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distributionsactionget_entitytype_list_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method distributionsactionget_entitytype_list_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/distributions?action=get-entitytype-list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def distributionsactionget_first_valid_distribution_get(self, plan_id, invoice_id, **kwargs):  # noqa: E501
        """distributionsactionget_first_valid_distribution_get  # noqa: E501

        get-first-valid-distribution Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distributionsactionget_first_valid_distribution_get(plan_id, invoice_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object plan_id: (required)
        :param Object invoice_id: (required)
        :return: DistributionPlanElementValidation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.distributionsactionget_first_valid_distribution_get_with_http_info(plan_id, invoice_id, **kwargs)  # noqa: E501
        else:
            (data) = self.distributionsactionget_first_valid_distribution_get_with_http_info(plan_id, invoice_id, **kwargs)  # noqa: E501
            return data

    def distributionsactionget_first_valid_distribution_get_with_http_info(self, plan_id, invoice_id, **kwargs):  # noqa: E501
        """distributionsactionget_first_valid_distribution_get  # noqa: E501

        get-first-valid-distribution Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distributionsactionget_first_valid_distribution_get_with_http_info(plan_id, invoice_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object plan_id: (required)
        :param Object invoice_id: (required)
        :return: DistributionPlanElementValidation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['plan_id', 'invoice_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method distributionsactionget_first_valid_distribution_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'plan_id' is set
        if ('plan_id' not in params or
                params['plan_id'] is None):
            raise ValueError("Missing the required parameter `plan_id` when calling `distributionsactionget_first_valid_distribution_get`")  # noqa: E501
        # verify the required parameter 'invoice_id' is set
        if ('invoice_id' not in params or
                params['invoice_id'] is None):
            raise ValueError("Missing the required parameter `invoice_id` when calling `distributionsactionget_first_valid_distribution_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'plan_id' in params:
            path_params['planId'] = params['plan_id']  # noqa: E501
        if 'invoice_id' in params:
            path_params['invoiceId'] = params['invoice_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/distributions?action=get-first-valid-distribution', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DistributionPlanElementValidation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def distributionsactionget_legal_elementtypes_get(self, entity_type, **kwargs):  # noqa: E501
        """distributionsactionget_legal_elementtypes_get  # noqa: E501

        get-legal-elementtypes Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distributionsactionget_legal_elementtypes_get(entity_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object entity_type: (required)
        :return: list[DistributionPlanElementType]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.distributionsactionget_legal_elementtypes_get_with_http_info(entity_type, **kwargs)  # noqa: E501
        else:
            (data) = self.distributionsactionget_legal_elementtypes_get_with_http_info(entity_type, **kwargs)  # noqa: E501
            return data

    def distributionsactionget_legal_elementtypes_get_with_http_info(self, entity_type, **kwargs):  # noqa: E501
        """distributionsactionget_legal_elementtypes_get  # noqa: E501

        get-legal-elementtypes Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distributionsactionget_legal_elementtypes_get_with_http_info(entity_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object entity_type: (required)
        :return: list[DistributionPlanElementType]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['entity_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method distributionsactionget_legal_elementtypes_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'entity_type' is set
        if ('entity_type' not in params or
                params['entity_type'] is None):
            raise ValueError("Missing the required parameter `entity_type` when calling `distributionsactionget_legal_elementtypes_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'entity_type' in params:
            path_params['entityType'] = params['entity_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/distributions?action=get-legal-elementtypes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DistributionPlanElementType]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def distributionsactionget_valid_distributions_for_customer_get(self, customer_id, **kwargs):  # noqa: E501
        """distributionsactionget_valid_distributions_for_customer_get  # noqa: E501

        get-valid-distributions-for-customer Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distributionsactionget_valid_distributions_for_customer_get(customer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object customer_id: (required)
        :return: list[DistributionPlanElementValidation]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.distributionsactionget_valid_distributions_for_customer_get_with_http_info(customer_id, **kwargs)  # noqa: E501
        else:
            (data) = self.distributionsactionget_valid_distributions_for_customer_get_with_http_info(customer_id, **kwargs)  # noqa: E501
            return data

    def distributionsactionget_valid_distributions_for_customer_get_with_http_info(self, customer_id, **kwargs):  # noqa: E501
        """distributionsactionget_valid_distributions_for_customer_get  # noqa: E501

        get-valid-distributions-for-customer Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distributionsactionget_valid_distributions_for_customer_get_with_http_info(customer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object customer_id: (required)
        :return: list[DistributionPlanElementValidation]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['customer_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method distributionsactionget_valid_distributions_for_customer_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'customer_id' is set
        if ('customer_id' not in params or
                params['customer_id'] is None):
            raise ValueError("Missing the required parameter `customer_id` when calling `distributionsactionget_valid_distributions_for_customer_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'customer_id' in params:
            path_params['customerId'] = params['customer_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/distributions?action=get-valid-distributions-for-customer', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DistributionPlanElementValidation]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def distributionsactionget_valid_distributions_get(self, plan_id, invoice_id, **kwargs):  # noqa: E501
        """distributionsactionget_valid_distributions_get  # noqa: E501

        get-valid-distributions Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distributionsactionget_valid_distributions_get(plan_id, invoice_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object plan_id: (required)
        :param Object invoice_id: (required)
        :return: list[DistributionPlanElementValidation]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.distributionsactionget_valid_distributions_get_with_http_info(plan_id, invoice_id, **kwargs)  # noqa: E501
        else:
            (data) = self.distributionsactionget_valid_distributions_get_with_http_info(plan_id, invoice_id, **kwargs)  # noqa: E501
            return data

    def distributionsactionget_valid_distributions_get_with_http_info(self, plan_id, invoice_id, **kwargs):  # noqa: E501
        """distributionsactionget_valid_distributions_get  # noqa: E501

        get-valid-distributions Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distributionsactionget_valid_distributions_get_with_http_info(plan_id, invoice_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object plan_id: (required)
        :param Object invoice_id: (required)
        :return: list[DistributionPlanElementValidation]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['plan_id', 'invoice_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method distributionsactionget_valid_distributions_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'plan_id' is set
        if ('plan_id' not in params or
                params['plan_id'] is None):
            raise ValueError("Missing the required parameter `plan_id` when calling `distributionsactionget_valid_distributions_get`")  # noqa: E501
        # verify the required parameter 'invoice_id' is set
        if ('invoice_id' not in params or
                params['invoice_id'] is None):
            raise ValueError("Missing the required parameter `invoice_id` when calling `distributionsactionget_valid_distributions_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'plan_id' in params:
            path_params['planId'] = params['plan_id']  # noqa: E501
        if 'invoice_id' in params:
            path_params['invoiceId'] = params['invoice_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/distributions?action=get-valid-distributions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DistributionPlanElementValidation]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def distributionsactionis_valid_distribution_get(self, invoice_id, plan_element_type, **kwargs):  # noqa: E501
        """distributionsactionis_valid_distribution_get  # noqa: E501

        is-valid-distribution Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distributionsactionis_valid_distribution_get(invoice_id, plan_element_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object invoice_id: (required)
        :param Object plan_element_type: (required)
        :return: DistributionPlanElementValidation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.distributionsactionis_valid_distribution_get_with_http_info(invoice_id, plan_element_type, **kwargs)  # noqa: E501
        else:
            (data) = self.distributionsactionis_valid_distribution_get_with_http_info(invoice_id, plan_element_type, **kwargs)  # noqa: E501
            return data

    def distributionsactionis_valid_distribution_get_with_http_info(self, invoice_id, plan_element_type, **kwargs):  # noqa: E501
        """distributionsactionis_valid_distribution_get  # noqa: E501

        is-valid-distribution Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.distributionsactionis_valid_distribution_get_with_http_info(invoice_id, plan_element_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object invoice_id: (required)
        :param Object plan_element_type: (required)
        :return: DistributionPlanElementValidation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invoice_id', 'plan_element_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method distributionsactionis_valid_distribution_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invoice_id' is set
        if ('invoice_id' not in params or
                params['invoice_id'] is None):
            raise ValueError("Missing the required parameter `invoice_id` when calling `distributionsactionis_valid_distribution_get`")  # noqa: E501
        # verify the required parameter 'plan_element_type' is set
        if ('plan_element_type' not in params or
                params['plan_element_type'] is None):
            raise ValueError("Missing the required parameter `plan_element_type` when calling `distributionsactionis_valid_distribution_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'invoice_id' in params:
            path_params['invoiceId'] = params['invoice_id']  # noqa: E501
        if 'plan_element_type' in params:
            path_params['planElementType'] = params['plan_element_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/distributions?action=is-valid-distribution', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DistributionPlanElementValidation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
