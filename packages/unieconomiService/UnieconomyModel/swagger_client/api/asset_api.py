# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class AssetApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def assets_get(self, **kwargs):  # noqa: E501
        """assets_get  # noqa: E501

        Query Asset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assets_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Asset]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assets_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.assets_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def assets_get_with_http_info(self, **kwargs):  # noqa: E501
        """assets_get  # noqa: E501

        Query Asset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assets_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Asset]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assets_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/assets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Asset]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assets_id_delete(self, id, **kwargs):  # noqa: E501
        """assets_id_delete  # noqa: E501

        Delete Asset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assets_id_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: Asset
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assets_id_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.assets_id_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def assets_id_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """assets_id_delete  # noqa: E501

        Delete Asset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assets_id_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: Asset
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assets_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `assets_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/assets/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Asset',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assets_id_get(self, id, **kwargs):  # noqa: E501
        """assets_id_get  # noqa: E501

        Get Asset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assets_id_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: Asset
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assets_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.assets_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def assets_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """assets_id_get  # noqa: E501

        Get Asset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assets_id_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: Asset
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assets_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `assets_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/assets/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Asset',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assets_id_put(self, body, id, **kwargs):  # noqa: E501
        """assets_id_put  # noqa: E501

        Update Asset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assets_id_put(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Asset body: (required)
        :param int id: (required)
        :return: Asset
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assets_id_put_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.assets_id_put_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def assets_id_put_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """assets_id_put  # noqa: E501

        Update Asset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assets_id_put_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Asset body: (required)
        :param int id: (required)
        :return: Asset
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assets_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `assets_id_put`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `assets_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/assets/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Asset',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assets_idactionsellasset_post(self, id, id, **kwargs):  # noqa: E501
        """assets_idactionsellasset_post  # noqa: E501

        sellasset Transition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assets_idactionsellasset_post(id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assets_idactionsellasset_post_with_http_info(id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.assets_idactionsellasset_post_with_http_info(id, id, **kwargs)  # noqa: E501
            return data

    def assets_idactionsellasset_post_with_http_info(self, id, id, **kwargs):  # noqa: E501
        """assets_idactionsellasset_post  # noqa: E501

        sellasset Transition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assets_idactionsellasset_post_with_http_info(id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assets_idactionsellasset_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `assets_idactionsellasset_post`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `assets_idactionsellasset_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id' in params:
            path_params['ID'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/assets/{id}?action=sellasset', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assets_idactionsetassetaslost_post(self, id, id, **kwargs):  # noqa: E501
        """assets_idactionsetassetaslost_post  # noqa: E501

        setassetaslost Transition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assets_idactionsetassetaslost_post(id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assets_idactionsetassetaslost_post_with_http_info(id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.assets_idactionsetassetaslost_post_with_http_info(id, id, **kwargs)  # noqa: E501
            return data

    def assets_idactionsetassetaslost_post_with_http_info(self, id, id, **kwargs):  # noqa: E501
        """assets_idactionsetassetaslost_post  # noqa: E501

        setassetaslost Transition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assets_idactionsetassetaslost_post_with_http_info(id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assets_idactionsetassetaslost_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `assets_idactionsetassetaslost_post`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `assets_idactionsetassetaslost_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id' in params:
            path_params['ID'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/assets/{id}?action=setassetaslost', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assets_post(self, body, **kwargs):  # noqa: E501
        """assets_post  # noqa: E501

        Create Asset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assets_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Asset body: (required)
        :return: Asset
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assets_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.assets_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def assets_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """assets_post  # noqa: E501

        Create Asset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assets_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Asset body: (required)
        :return: Asset
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assets_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `assets_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/assets', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Asset',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assetsactionactivate_put(self, id, **kwargs):  # noqa: E501
        """assetsactionactivate_put  # noqa: E501

        activate Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assetsactionactivate_put(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assetsactionactivate_put_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.assetsactionactivate_put_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def assetsactionactivate_put_with_http_info(self, id, **kwargs):  # noqa: E501
        """assetsactionactivate_put  # noqa: E501

        activate Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assetsactionactivate_put_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assetsactionactivate_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `assetsactionactivate_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['ID'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/assets?action=activate', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assetsactionany_depreciations_get(self, _date, **kwargs):  # noqa: E501
        """assetsactionany_depreciations_get  # noqa: E501

        any-depreciations Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assetsactionany_depreciations_get(_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object _date: (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assetsactionany_depreciations_get_with_http_info(_date, **kwargs)  # noqa: E501
        else:
            (data) = self.assetsactionany_depreciations_get_with_http_info(_date, **kwargs)  # noqa: E501
            return data

    def assetsactionany_depreciations_get_with_http_info(self, _date, **kwargs):  # noqa: E501
        """assetsactionany_depreciations_get  # noqa: E501

        any-depreciations Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assetsactionany_depreciations_get_with_http_info(_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object _date: (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_date']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assetsactionany_depreciations_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '_date' is set
        if ('_date' not in params or
                params['_date'] is None):
            raise ValueError("Missing the required parameter `_date` when calling `assetsactionany_depreciations_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if '_date' in params:
            path_params['date'] = params['_date']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/assets?action=any-depreciations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assetsactioncalculate_depreciation_amount_put(self, **kwargs):  # noqa: E501
        """assetsactioncalculate_depreciation_amount_put  # noqa: E501

        calculate-depreciation-amount Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assetsactioncalculate_depreciation_amount_put(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Asset body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assetsactioncalculate_depreciation_amount_put_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.assetsactioncalculate_depreciation_amount_put_with_http_info(**kwargs)  # noqa: E501
            return data

    def assetsactioncalculate_depreciation_amount_put_with_http_info(self, **kwargs):  # noqa: E501
        """assetsactioncalculate_depreciation_amount_put  # noqa: E501

        calculate-depreciation-amount Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assetsactioncalculate_depreciation_amount_put_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Asset body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assetsactioncalculate_depreciation_amount_put" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/assets?action=calculate-depreciation-amount', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assetsactioncalculate_lifetime_put(self, **kwargs):  # noqa: E501
        """assetsactioncalculate_lifetime_put  # noqa: E501

        calculate-lifetime Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assetsactioncalculate_lifetime_put(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Asset body:
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assetsactioncalculate_lifetime_put_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.assetsactioncalculate_lifetime_put_with_http_info(**kwargs)  # noqa: E501
            return data

    def assetsactioncalculate_lifetime_put_with_http_info(self, **kwargs):  # noqa: E501
        """assetsactioncalculate_lifetime_put  # noqa: E501

        calculate-lifetime Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assetsactioncalculate_lifetime_put_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Asset body:
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assetsactioncalculate_lifetime_put" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/assets?action=calculate-lifetime', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assetsactioncreate_post(self, invoice_id, account_id, account_number, **kwargs):  # noqa: E501
        """assetsactioncreate_post  # noqa: E501

        create Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assetsactioncreate_post(invoice_id, account_id, account_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object invoice_id: (required)
        :param Object account_id: (required)
        :param Object account_number: (required)
        :return: Asset
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assetsactioncreate_post_with_http_info(invoice_id, account_id, account_number, **kwargs)  # noqa: E501
        else:
            (data) = self.assetsactioncreate_post_with_http_info(invoice_id, account_id, account_number, **kwargs)  # noqa: E501
            return data

    def assetsactioncreate_post_with_http_info(self, invoice_id, account_id, account_number, **kwargs):  # noqa: E501
        """assetsactioncreate_post  # noqa: E501

        create Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assetsactioncreate_post_with_http_info(invoice_id, account_id, account_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object invoice_id: (required)
        :param Object account_id: (required)
        :param Object account_number: (required)
        :return: Asset
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invoice_id', 'account_id', 'account_number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assetsactioncreate_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invoice_id' is set
        if ('invoice_id' not in params or
                params['invoice_id'] is None):
            raise ValueError("Missing the required parameter `invoice_id` when calling `assetsactioncreate_post`")  # noqa: E501
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `assetsactioncreate_post`")  # noqa: E501
        # verify the required parameter 'account_number' is set
        if ('account_number' not in params or
                params['account_number'] is None):
            raise ValueError("Missing the required parameter `account_number` when calling `assetsactioncreate_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'invoice_id' in params:
            path_params['invoiceID'] = params['invoice_id']  # noqa: E501
        if 'account_id' in params:
            path_params['accountID'] = params['account_id']  # noqa: E501
        if 'account_number' in params:
            path_params['accountNumber'] = params['account_number']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/assets?action=create', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Asset',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assetsactiondepreciate_missing_put(self, **kwargs):  # noqa: E501
        """assetsactiondepreciate_missing_put  # noqa: E501

        depreciate-missing Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assetsactiondepreciate_missing_put(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assetsactiondepreciate_missing_put_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.assetsactiondepreciate_missing_put_with_http_info(**kwargs)  # noqa: E501
            return data

    def assetsactiondepreciate_missing_put_with_http_info(self, **kwargs):  # noqa: E501
        """assetsactiondepreciate_missing_put  # noqa: E501

        depreciate-missing Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assetsactiondepreciate_missing_put_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assetsactiondepreciate_missing_put" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/assets?action=depreciate-missing', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assetsactiondepreciate_month_put(self, _date, **kwargs):  # noqa: E501
        """assetsactiondepreciate_month_put  # noqa: E501

        depreciate-month Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assetsactiondepreciate_month_put(_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object _date: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assetsactiondepreciate_month_put_with_http_info(_date, **kwargs)  # noqa: E501
        else:
            (data) = self.assetsactiondepreciate_month_put_with_http_info(_date, **kwargs)  # noqa: E501
            return data

    def assetsactiondepreciate_month_put_with_http_info(self, _date, **kwargs):  # noqa: E501
        """assetsactiondepreciate_month_put  # noqa: E501

        depreciate-month Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assetsactiondepreciate_month_put_with_http_info(_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object _date: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_date']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assetsactiondepreciate_month_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '_date' is set
        if ('_date' not in params or
                params['_date'] is None):
            raise ValueError("Missing the required parameter `_date` when calling `assetsactiondepreciate_month_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if '_date' in params:
            path_params['date'] = params['_date']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/assets?action=depreciate-month', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assetsactiondepreciate_put(self, id, _date, amount, **kwargs):  # noqa: E501
        """assetsactiondepreciate_put  # noqa: E501

        depreciate Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assetsactiondepreciate_put(id, _date, amount, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object id: (required)
        :param Object _date: (required)
        :param Object amount: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assetsactiondepreciate_put_with_http_info(id, _date, amount, **kwargs)  # noqa: E501
        else:
            (data) = self.assetsactiondepreciate_put_with_http_info(id, _date, amount, **kwargs)  # noqa: E501
            return data

    def assetsactiondepreciate_put_with_http_info(self, id, _date, amount, **kwargs):  # noqa: E501
        """assetsactiondepreciate_put  # noqa: E501

        depreciate Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assetsactiondepreciate_put_with_http_info(id, _date, amount, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object id: (required)
        :param Object _date: (required)
        :param Object amount: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', '_date', 'amount']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assetsactiondepreciate_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `assetsactiondepreciate_put`")  # noqa: E501
        # verify the required parameter '_date' is set
        if ('_date' not in params or
                params['_date'] is None):
            raise ValueError("Missing the required parameter `_date` when calling `assetsactiondepreciate_put`")  # noqa: E501
        # verify the required parameter 'amount' is set
        if ('amount' not in params or
                params['amount'] is None):
            raise ValueError("Missing the required parameter `amount` when calling `assetsactiondepreciate_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['ID'] = params['id']  # noqa: E501
        if '_date' in params:
            path_params['date'] = params['_date']  # noqa: E501
        if 'amount' in params:
            path_params['amount'] = params['amount']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/assets?action=depreciate', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assetsactionget_asset_groups_get(self, **kwargs):  # noqa: E501
        """assetsactionget_asset_groups_get  # noqa: E501

        get-asset-groups Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assetsactionget_asset_groups_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[AssetGroup]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assetsactionget_asset_groups_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.assetsactionget_asset_groups_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def assetsactionget_asset_groups_get_with_http_info(self, **kwargs):  # noqa: E501
        """assetsactionget_asset_groups_get  # noqa: E501

        get-asset-groups Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assetsactionget_asset_groups_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[AssetGroup]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assetsactionget_asset_groups_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/assets?action=get-asset-groups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AssetGroup]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assetsactionget_assets_report_get(self, _date, asset_id, **kwargs):  # noqa: E501
        """assetsactionget_assets_report_get  # noqa: E501

        get-assets-report Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assetsactionget_assets_report_get(_date, asset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object _date: (required)
        :param Object asset_id: (required)
        :return: list[AssetReportDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assetsactionget_assets_report_get_with_http_info(_date, asset_id, **kwargs)  # noqa: E501
        else:
            (data) = self.assetsactionget_assets_report_get_with_http_info(_date, asset_id, **kwargs)  # noqa: E501
            return data

    def assetsactionget_assets_report_get_with_http_info(self, _date, asset_id, **kwargs):  # noqa: E501
        """assetsactionget_assets_report_get  # noqa: E501

        get-assets-report Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assetsactionget_assets_report_get_with_http_info(_date, asset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object _date: (required)
        :param Object asset_id: (required)
        :return: list[AssetReportDTO]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_date', 'asset_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assetsactionget_assets_report_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '_date' is set
        if ('_date' not in params or
                params['_date'] is None):
            raise ValueError("Missing the required parameter `_date` when calling `assetsactionget_assets_report_get`")  # noqa: E501
        # verify the required parameter 'asset_id' is set
        if ('asset_id' not in params or
                params['asset_id'] is None):
            raise ValueError("Missing the required parameter `asset_id` when calling `assetsactionget_assets_report_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if '_date' in params:
            path_params['date'] = params['_date']  # noqa: E501
        if 'asset_id' in params:
            path_params['assetID'] = params['asset_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/assets?action=get-assets-report', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AssetReportDTO]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assetsactionget_use_asset_get(self, **kwargs):  # noqa: E501
        """assetsactionget_use_asset_get  # noqa: E501

        get-use-asset Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assetsactionget_use_asset_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assetsactionget_use_asset_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.assetsactionget_use_asset_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def assetsactionget_use_asset_get_with_http_info(self, **kwargs):  # noqa: E501
        """assetsactionget_use_asset_get  # noqa: E501

        get-use-asset Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assetsactionget_use_asset_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assetsactionget_use_asset_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/assets?action=get-use-asset', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assetsactionis_balance_ok_get(self, account_id, amount, **kwargs):  # noqa: E501
        """assetsactionis_balance_ok_get  # noqa: E501

        is-balance-ok Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assetsactionis_balance_ok_get(account_id, amount, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object account_id: (required)
        :param Object amount: (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assetsactionis_balance_ok_get_with_http_info(account_id, amount, **kwargs)  # noqa: E501
        else:
            (data) = self.assetsactionis_balance_ok_get_with_http_info(account_id, amount, **kwargs)  # noqa: E501
            return data

    def assetsactionis_balance_ok_get_with_http_info(self, account_id, amount, **kwargs):  # noqa: E501
        """assetsactionis_balance_ok_get  # noqa: E501

        is-balance-ok Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assetsactionis_balance_ok_get_with_http_info(account_id, amount, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object account_id: (required)
        :param Object amount: (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'amount']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assetsactionis_balance_ok_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `assetsactionis_balance_ok_get`")  # noqa: E501
        # verify the required parameter 'amount' is set
        if ('amount' not in params or
                params['amount'] is None):
            raise ValueError("Missing the required parameter `amount` when calling `assetsactionis_balance_ok_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['accountID'] = params['account_id']  # noqa: E501
        if 'amount' in params:
            path_params['amount'] = params['amount']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/assets?action=is-balance-ok', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assetsactionsell_asset_put(self, asset_id, customer_id, vat_type_id, invoice_date, amount, create_invoice, **kwargs):  # noqa: E501
        """assetsactionsell_asset_put  # noqa: E501

        sell-asset Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assetsactionsell_asset_put(asset_id, customer_id, vat_type_id, invoice_date, amount, create_invoice, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object asset_id: (required)
        :param Object customer_id: (required)
        :param Object vat_type_id: (required)
        :param Object invoice_date: (required)
        :param Object amount: (required)
        :param Object create_invoice: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assetsactionsell_asset_put_with_http_info(asset_id, customer_id, vat_type_id, invoice_date, amount, create_invoice, **kwargs)  # noqa: E501
        else:
            (data) = self.assetsactionsell_asset_put_with_http_info(asset_id, customer_id, vat_type_id, invoice_date, amount, create_invoice, **kwargs)  # noqa: E501
            return data

    def assetsactionsell_asset_put_with_http_info(self, asset_id, customer_id, vat_type_id, invoice_date, amount, create_invoice, **kwargs):  # noqa: E501
        """assetsactionsell_asset_put  # noqa: E501

        sell-asset Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assetsactionsell_asset_put_with_http_info(asset_id, customer_id, vat_type_id, invoice_date, amount, create_invoice, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object asset_id: (required)
        :param Object customer_id: (required)
        :param Object vat_type_id: (required)
        :param Object invoice_date: (required)
        :param Object amount: (required)
        :param Object create_invoice: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['asset_id', 'customer_id', 'vat_type_id', 'invoice_date', 'amount', 'create_invoice']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assetsactionsell_asset_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'asset_id' is set
        if ('asset_id' not in params or
                params['asset_id'] is None):
            raise ValueError("Missing the required parameter `asset_id` when calling `assetsactionsell_asset_put`")  # noqa: E501
        # verify the required parameter 'customer_id' is set
        if ('customer_id' not in params or
                params['customer_id'] is None):
            raise ValueError("Missing the required parameter `customer_id` when calling `assetsactionsell_asset_put`")  # noqa: E501
        # verify the required parameter 'vat_type_id' is set
        if ('vat_type_id' not in params or
                params['vat_type_id'] is None):
            raise ValueError("Missing the required parameter `vat_type_id` when calling `assetsactionsell_asset_put`")  # noqa: E501
        # verify the required parameter 'invoice_date' is set
        if ('invoice_date' not in params or
                params['invoice_date'] is None):
            raise ValueError("Missing the required parameter `invoice_date` when calling `assetsactionsell_asset_put`")  # noqa: E501
        # verify the required parameter 'amount' is set
        if ('amount' not in params or
                params['amount'] is None):
            raise ValueError("Missing the required parameter `amount` when calling `assetsactionsell_asset_put`")  # noqa: E501
        # verify the required parameter 'create_invoice' is set
        if ('create_invoice' not in params or
                params['create_invoice'] is None):
            raise ValueError("Missing the required parameter `create_invoice` when calling `assetsactionsell_asset_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'asset_id' in params:
            path_params['assetID'] = params['asset_id']  # noqa: E501
        if 'customer_id' in params:
            path_params['customerID'] = params['customer_id']  # noqa: E501
        if 'vat_type_id' in params:
            path_params['vatTypeID'] = params['vat_type_id']  # noqa: E501
        if 'invoice_date' in params:
            path_params['invoiceDate'] = params['invoice_date']  # noqa: E501
        if 'amount' in params:
            path_params['amount'] = params['amount']  # noqa: E501
        if 'create_invoice' in params:
            path_params['createInvoice'] = params['create_invoice']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/assets?action=sell-asset', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assetsactionset_asset_aslost_put(self, id, _date, description, **kwargs):  # noqa: E501
        """assetsactionset_asset_aslost_put  # noqa: E501

        set-asset-aslost Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assetsactionset_asset_aslost_put(id, _date, description, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object id: (required)
        :param Object _date: (required)
        :param Object description: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assetsactionset_asset_aslost_put_with_http_info(id, _date, description, **kwargs)  # noqa: E501
        else:
            (data) = self.assetsactionset_asset_aslost_put_with_http_info(id, _date, description, **kwargs)  # noqa: E501
            return data

    def assetsactionset_asset_aslost_put_with_http_info(self, id, _date, description, **kwargs):  # noqa: E501
        """assetsactionset_asset_aslost_put  # noqa: E501

        set-asset-aslost Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assetsactionset_asset_aslost_put_with_http_info(id, _date, description, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object id: (required)
        :param Object _date: (required)
        :param Object description: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', '_date', 'description']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assetsactionset_asset_aslost_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `assetsactionset_asset_aslost_put`")  # noqa: E501
        # verify the required parameter '_date' is set
        if ('_date' not in params or
                params['_date'] is None):
            raise ValueError("Missing the required parameter `_date` when calling `assetsactionset_asset_aslost_put`")  # noqa: E501
        # verify the required parameter 'description' is set
        if ('description' not in params or
                params['description'] is None):
            raise ValueError("Missing the required parameter `description` when calling `assetsactionset_asset_aslost_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['ID'] = params['id']  # noqa: E501
        if '_date' in params:
            path_params['date'] = params['_date']  # noqa: E501
        if 'description' in params:
            path_params['description'] = params['description']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/assets?action=set-asset-aslost', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assetsactionset_use_asset_put(self, use, **kwargs):  # noqa: E501
        """assetsactionset_use_asset_put  # noqa: E501

        set-use-asset Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assetsactionset_use_asset_put(use, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object use: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assetsactionset_use_asset_put_with_http_info(use, **kwargs)  # noqa: E501
        else:
            (data) = self.assetsactionset_use_asset_put_with_http_info(use, **kwargs)  # noqa: E501
            return data

    def assetsactionset_use_asset_put_with_http_info(self, use, **kwargs):  # noqa: E501
        """assetsactionset_use_asset_put  # noqa: E501

        set-use-asset Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assetsactionset_use_asset_put_with_http_info(use, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object use: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['use']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assetsactionset_use_asset_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'use' is set
        if ('use' not in params or
                params['use'] is None):
            raise ValueError("Missing the required parameter `use` when calling `assetsactionset_use_asset_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'use' in params:
            path_params['use'] = params['use']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/assets?action=set-use-asset', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assetsactionwrite_off_asset_put(self, id, amount, _date, description, **kwargs):  # noqa: E501
        """assetsactionwrite_off_asset_put  # noqa: E501

        write-off-asset Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assetsactionwrite_off_asset_put(id, amount, _date, description, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object id: (required)
        :param Object amount: (required)
        :param Object _date: (required)
        :param Object description: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assetsactionwrite_off_asset_put_with_http_info(id, amount, _date, description, **kwargs)  # noqa: E501
        else:
            (data) = self.assetsactionwrite_off_asset_put_with_http_info(id, amount, _date, description, **kwargs)  # noqa: E501
            return data

    def assetsactionwrite_off_asset_put_with_http_info(self, id, amount, _date, description, **kwargs):  # noqa: E501
        """assetsactionwrite_off_asset_put  # noqa: E501

        write-off-asset Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assetsactionwrite_off_asset_put_with_http_info(id, amount, _date, description, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object id: (required)
        :param Object amount: (required)
        :param Object _date: (required)
        :param Object description: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'amount', '_date', 'description']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assetsactionwrite_off_asset_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `assetsactionwrite_off_asset_put`")  # noqa: E501
        # verify the required parameter 'amount' is set
        if ('amount' not in params or
                params['amount'] is None):
            raise ValueError("Missing the required parameter `amount` when calling `assetsactionwrite_off_asset_put`")  # noqa: E501
        # verify the required parameter '_date' is set
        if ('_date' not in params or
                params['_date'] is None):
            raise ValueError("Missing the required parameter `_date` when calling `assetsactionwrite_off_asset_put`")  # noqa: E501
        # verify the required parameter 'description' is set
        if ('description' not in params or
                params['description'] is None):
            raise ValueError("Missing the required parameter `description` when calling `assetsactionwrite_off_asset_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['ID'] = params['id']  # noqa: E501
        if 'amount' in params:
            path_params['amount'] = params['amount']  # noqa: E501
        if '_date' in params:
            path_params['date'] = params['_date']  # noqa: E501
        if 'description' in params:
            path_params['description'] = params['description']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/assets?action=write-off-asset', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
