# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class AccountApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def accounts_accountid_subaccounts_get(self, **kwargs):  # noqa: E501
        """accounts_accountid_subaccounts_get  # noqa: E501

        Query Account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_accountid_subaccounts_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Account]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accounts_accountid_subaccounts_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.accounts_accountid_subaccounts_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def accounts_accountid_subaccounts_get_with_http_info(self, **kwargs):  # noqa: E501
        """accounts_accountid_subaccounts_get  # noqa: E501

        Query Account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_accountid_subaccounts_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Account]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_accountid_subaccounts_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/accounts/{accountid}/subaccounts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Account]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def accounts_accountid_subaccounts_id_delete(self, id, **kwargs):  # noqa: E501
        """accounts_accountid_subaccounts_id_delete  # noqa: E501

        Delete Account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_accountid_subaccounts_id_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: Account
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accounts_accountid_subaccounts_id_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.accounts_accountid_subaccounts_id_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def accounts_accountid_subaccounts_id_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """accounts_accountid_subaccounts_id_delete  # noqa: E501

        Delete Account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_accountid_subaccounts_id_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: Account
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_accountid_subaccounts_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `accounts_accountid_subaccounts_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/accounts/{accountid}/subaccounts/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Account',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def accounts_accountid_subaccounts_id_get(self, id, **kwargs):  # noqa: E501
        """accounts_accountid_subaccounts_id_get  # noqa: E501

        Get Account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_accountid_subaccounts_id_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: Account
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accounts_accountid_subaccounts_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.accounts_accountid_subaccounts_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def accounts_accountid_subaccounts_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """accounts_accountid_subaccounts_id_get  # noqa: E501

        Get Account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_accountid_subaccounts_id_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: Account
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_accountid_subaccounts_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `accounts_accountid_subaccounts_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/accounts/{accountid}/subaccounts/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Account',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def accounts_accountid_subaccounts_id_put(self, body, id, **kwargs):  # noqa: E501
        """accounts_accountid_subaccounts_id_put  # noqa: E501

        Update Account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_accountid_subaccounts_id_put(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Account body: (required)
        :param int id: (required)
        :return: Account
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accounts_accountid_subaccounts_id_put_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.accounts_accountid_subaccounts_id_put_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def accounts_accountid_subaccounts_id_put_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """accounts_accountid_subaccounts_id_put  # noqa: E501

        Update Account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_accountid_subaccounts_id_put_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Account body: (required)
        :param int id: (required)
        :return: Account
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_accountid_subaccounts_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `accounts_accountid_subaccounts_id_put`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `accounts_accountid_subaccounts_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/accounts/{accountid}/subaccounts/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Account',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def accounts_accountid_subaccounts_post(self, body, **kwargs):  # noqa: E501
        """accounts_accountid_subaccounts_post  # noqa: E501

        Create Account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_accountid_subaccounts_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Account body: (required)
        :return: Account
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accounts_accountid_subaccounts_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.accounts_accountid_subaccounts_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def accounts_accountid_subaccounts_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """accounts_accountid_subaccounts_post  # noqa: E501

        Create Account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_accountid_subaccounts_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Account body: (required)
        :return: Account
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_accountid_subaccounts_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `accounts_accountid_subaccounts_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/accounts/{accountid}/subaccounts', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Account',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def accounts_get(self, **kwargs):  # noqa: E501
        """accounts_get  # noqa: E501

        Query Account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Account]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accounts_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.accounts_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def accounts_get_with_http_info(self, **kwargs):  # noqa: E501
        """accounts_get  # noqa: E501

        Query Account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Account]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/accounts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Account]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def accounts_id_delete(self, id, **kwargs):  # noqa: E501
        """accounts_id_delete  # noqa: E501

        Delete Account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_id_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: Account
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accounts_id_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.accounts_id_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def accounts_id_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """accounts_id_delete  # noqa: E501

        Delete Account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_id_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: Account
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `accounts_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/accounts/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Account',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def accounts_id_get(self, id, **kwargs):  # noqa: E501
        """accounts_id_get  # noqa: E501

        Get Account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_id_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: Account
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accounts_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.accounts_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def accounts_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """accounts_id_get  # noqa: E501

        Get Account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_id_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: Account
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `accounts_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/accounts/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Account',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def accounts_id_put(self, body, id, **kwargs):  # noqa: E501
        """accounts_id_put  # noqa: E501

        Update Account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_id_put(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Account body: (required)
        :param int id: (required)
        :return: Account
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accounts_id_put_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.accounts_id_put_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def accounts_id_put_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """accounts_id_put  # noqa: E501

        Update Account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_id_put_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Account body: (required)
        :param int id: (required)
        :return: Account
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `accounts_id_put`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `accounts_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/accounts/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Account',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def accounts_idactionis_account_used_get(self, id, id, **kwargs):  # noqa: E501
        """accounts_idactionis_account_used_get  # noqa: E501

        is-account-used Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_idactionis_account_used_get(id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accounts_idactionis_account_used_get_with_http_info(id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.accounts_idactionis_account_used_get_with_http_info(id, id, **kwargs)  # noqa: E501
            return data

    def accounts_idactionis_account_used_get_with_http_info(self, id, id, **kwargs):  # noqa: E501
        """accounts_idactionis_account_used_get  # noqa: E501

        is-account-used Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_idactionis_account_used_get_with_http_info(id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param Object id: (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_idactionis_account_used_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `accounts_idactionis_account_used_get`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `accounts_idactionis_account_used_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/accounts/{id}?action=is-account-used', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def accounts_post(self, body, **kwargs):  # noqa: E501
        """accounts_post  # noqa: E501

        Create Account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Account body: (required)
        :return: Account
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accounts_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.accounts_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def accounts_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """accounts_post  # noqa: E501

        Create Account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accounts_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Account body: (required)
        :return: Account
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accounts_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `accounts_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/accounts', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Account',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def accountsactionbalance_get(self, financial_year, **kwargs):  # noqa: E501
        """accountsactionbalance_get  # noqa: E501

        balance Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accountsactionbalance_get(financial_year, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object financial_year: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accountsactionbalance_get_with_http_info(financial_year, **kwargs)  # noqa: E501
        else:
            (data) = self.accountsactionbalance_get_with_http_info(financial_year, **kwargs)  # noqa: E501
            return data

    def accountsactionbalance_get_with_http_info(self, financial_year, **kwargs):  # noqa: E501
        """accountsactionbalance_get  # noqa: E501

        balance Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accountsactionbalance_get_with_http_info(financial_year, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object financial_year: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['financial_year']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accountsactionbalance_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'financial_year' is set
        if ('financial_year' not in params or
                params['financial_year'] is None):
            raise ValueError("Missing the required parameter `financial_year` when calling `accountsactionbalance_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'financial_year' in params:
            path_params['FinancialYear'] = params['financial_year']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/accounts?action=balance', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def accountsactionbalance_grouped_get(self, financial_year, **kwargs):  # noqa: E501
        """accountsactionbalance_grouped_get  # noqa: E501

        balance-grouped Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accountsactionbalance_grouped_get(financial_year, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object financial_year: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accountsactionbalance_grouped_get_with_http_info(financial_year, **kwargs)  # noqa: E501
        else:
            (data) = self.accountsactionbalance_grouped_get_with_http_info(financial_year, **kwargs)  # noqa: E501
            return data

    def accountsactionbalance_grouped_get_with_http_info(self, financial_year, **kwargs):  # noqa: E501
        """accountsactionbalance_grouped_get  # noqa: E501

        balance-grouped Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accountsactionbalance_grouped_get_with_http_info(financial_year, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object financial_year: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['financial_year']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accountsactionbalance_grouped_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'financial_year' is set
        if ('financial_year' not in params or
                params['financial_year'] is None):
            raise ValueError("Missing the required parameter `financial_year` when calling `accountsactionbalance_grouped_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'financial_year' in params:
            path_params['FinancialYear'] = params['financial_year']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/accounts?action=balance-grouped', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def accountsactionbulk_save_put(self, **kwargs):  # noqa: E501
        """accountsactionbulk_save_put  # noqa: E501

        bulk-save Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accountsactionbulk_save_put(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[Account] body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accountsactionbulk_save_put_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.accountsactionbulk_save_put_with_http_info(**kwargs)  # noqa: E501
            return data

    def accountsactionbulk_save_put_with_http_info(self, **kwargs):  # noqa: E501
        """accountsactionbulk_save_put  # noqa: E501

        bulk-save Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accountsactionbulk_save_put_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[Account] body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accountsactionbulk_save_put" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/accounts?action=bulk-save', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def accountsactionget_account_usage_detailed_get(self, account_id, max_hit_per_entity, **kwargs):  # noqa: E501
        """accountsactionget_account_usage_detailed_get  # noqa: E501

        get-account-usage-detailed Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accountsactionget_account_usage_detailed_get(account_id, max_hit_per_entity, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object account_id: (required)
        :param Object max_hit_per_entity: (required)
        :return: list[AccountUsageReference]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accountsactionget_account_usage_detailed_get_with_http_info(account_id, max_hit_per_entity, **kwargs)  # noqa: E501
        else:
            (data) = self.accountsactionget_account_usage_detailed_get_with_http_info(account_id, max_hit_per_entity, **kwargs)  # noqa: E501
            return data

    def accountsactionget_account_usage_detailed_get_with_http_info(self, account_id, max_hit_per_entity, **kwargs):  # noqa: E501
        """accountsactionget_account_usage_detailed_get  # noqa: E501

        get-account-usage-detailed Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accountsactionget_account_usage_detailed_get_with_http_info(account_id, max_hit_per_entity, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object account_id: (required)
        :param Object max_hit_per_entity: (required)
        :return: list[AccountUsageReference]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'max_hit_per_entity']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accountsactionget_account_usage_detailed_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accountsactionget_account_usage_detailed_get`")  # noqa: E501
        # verify the required parameter 'max_hit_per_entity' is set
        if ('max_hit_per_entity' not in params or
                params['max_hit_per_entity'] is None):
            raise ValueError("Missing the required parameter `max_hit_per_entity` when calling `accountsactionget_account_usage_detailed_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['accountID'] = params['account_id']  # noqa: E501
        if 'max_hit_per_entity' in params:
            path_params['maxHitPerEntity'] = params['max_hit_per_entity']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/accounts?action=get-account-usage-detailed', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AccountUsageReference]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def accountsactionget_account_usage_get(self, account_id, **kwargs):  # noqa: E501
        """accountsactionget_account_usage_get  # noqa: E501

        get-account-usage Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accountsactionget_account_usage_get(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object account_id: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accountsactionget_account_usage_get_with_http_info(account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.accountsactionget_account_usage_get_with_http_info(account_id, **kwargs)  # noqa: E501
            return data

    def accountsactionget_account_usage_get_with_http_info(self, account_id, **kwargs):  # noqa: E501
        """accountsactionget_account_usage_get  # noqa: E501

        get-account-usage Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accountsactionget_account_usage_get_with_http_info(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object account_id: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accountsactionget_account_usage_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `accountsactionget_account_usage_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['accountID'] = params['account_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/accounts?action=get-account-usage', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def accountsactionpayables_by_age_detailed_get(self, _date, account_from, account_to, use_due_date, account_type, **kwargs):  # noqa: E501
        """accountsactionpayables_by_age_detailed_get  # noqa: E501

        payables-by-age-detailed Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accountsactionpayables_by_age_detailed_get(_date, account_from, account_to, use_due_date, account_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object _date: (required)
        :param Object account_from: (required)
        :param Object account_to: (required)
        :param Object use_due_date: (required)
        :param Object account_type: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accountsactionpayables_by_age_detailed_get_with_http_info(_date, account_from, account_to, use_due_date, account_type, **kwargs)  # noqa: E501
        else:
            (data) = self.accountsactionpayables_by_age_detailed_get_with_http_info(_date, account_from, account_to, use_due_date, account_type, **kwargs)  # noqa: E501
            return data

    def accountsactionpayables_by_age_detailed_get_with_http_info(self, _date, account_from, account_to, use_due_date, account_type, **kwargs):  # noqa: E501
        """accountsactionpayables_by_age_detailed_get  # noqa: E501

        payables-by-age-detailed Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accountsactionpayables_by_age_detailed_get_with_http_info(_date, account_from, account_to, use_due_date, account_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object _date: (required)
        :param Object account_from: (required)
        :param Object account_to: (required)
        :param Object use_due_date: (required)
        :param Object account_type: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_date', 'account_from', 'account_to', 'use_due_date', 'account_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accountsactionpayables_by_age_detailed_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '_date' is set
        if ('_date' not in params or
                params['_date'] is None):
            raise ValueError("Missing the required parameter `_date` when calling `accountsactionpayables_by_age_detailed_get`")  # noqa: E501
        # verify the required parameter 'account_from' is set
        if ('account_from' not in params or
                params['account_from'] is None):
            raise ValueError("Missing the required parameter `account_from` when calling `accountsactionpayables_by_age_detailed_get`")  # noqa: E501
        # verify the required parameter 'account_to' is set
        if ('account_to' not in params or
                params['account_to'] is None):
            raise ValueError("Missing the required parameter `account_to` when calling `accountsactionpayables_by_age_detailed_get`")  # noqa: E501
        # verify the required parameter 'use_due_date' is set
        if ('use_due_date' not in params or
                params['use_due_date'] is None):
            raise ValueError("Missing the required parameter `use_due_date` when calling `accountsactionpayables_by_age_detailed_get`")  # noqa: E501
        # verify the required parameter 'account_type' is set
        if ('account_type' not in params or
                params['account_type'] is None):
            raise ValueError("Missing the required parameter `account_type` when calling `accountsactionpayables_by_age_detailed_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if '_date' in params:
            path_params['date'] = params['_date']  # noqa: E501
        if 'account_from' in params:
            path_params['accountFrom'] = params['account_from']  # noqa: E501
        if 'account_to' in params:
            path_params['accountTo'] = params['account_to']  # noqa: E501
        if 'use_due_date' in params:
            path_params['useDueDate'] = params['use_due_date']  # noqa: E501
        if 'account_type' in params:
            path_params['accountType'] = params['account_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/accounts?action=payables-by-age-detailed', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def accountsactionpayables_by_age_get(self, _date, account_from, account_to, use_due_date, account_type, **kwargs):  # noqa: E501
        """accountsactionpayables_by_age_get  # noqa: E501

        payables-by-age Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accountsactionpayables_by_age_get(_date, account_from, account_to, use_due_date, account_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object _date: (required)
        :param Object account_from: (required)
        :param Object account_to: (required)
        :param Object use_due_date: (required)
        :param Object account_type: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accountsactionpayables_by_age_get_with_http_info(_date, account_from, account_to, use_due_date, account_type, **kwargs)  # noqa: E501
        else:
            (data) = self.accountsactionpayables_by_age_get_with_http_info(_date, account_from, account_to, use_due_date, account_type, **kwargs)  # noqa: E501
            return data

    def accountsactionpayables_by_age_get_with_http_info(self, _date, account_from, account_to, use_due_date, account_type, **kwargs):  # noqa: E501
        """accountsactionpayables_by_age_get  # noqa: E501

        payables-by-age Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accountsactionpayables_by_age_get_with_http_info(_date, account_from, account_to, use_due_date, account_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object _date: (required)
        :param Object account_from: (required)
        :param Object account_to: (required)
        :param Object use_due_date: (required)
        :param Object account_type: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_date', 'account_from', 'account_to', 'use_due_date', 'account_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accountsactionpayables_by_age_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '_date' is set
        if ('_date' not in params or
                params['_date'] is None):
            raise ValueError("Missing the required parameter `_date` when calling `accountsactionpayables_by_age_get`")  # noqa: E501
        # verify the required parameter 'account_from' is set
        if ('account_from' not in params or
                params['account_from'] is None):
            raise ValueError("Missing the required parameter `account_from` when calling `accountsactionpayables_by_age_get`")  # noqa: E501
        # verify the required parameter 'account_to' is set
        if ('account_to' not in params or
                params['account_to'] is None):
            raise ValueError("Missing the required parameter `account_to` when calling `accountsactionpayables_by_age_get`")  # noqa: E501
        # verify the required parameter 'use_due_date' is set
        if ('use_due_date' not in params or
                params['use_due_date'] is None):
            raise ValueError("Missing the required parameter `use_due_date` when calling `accountsactionpayables_by_age_get`")  # noqa: E501
        # verify the required parameter 'account_type' is set
        if ('account_type' not in params or
                params['account_type'] is None):
            raise ValueError("Missing the required parameter `account_type` when calling `accountsactionpayables_by_age_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if '_date' in params:
            path_params['date'] = params['_date']  # noqa: E501
        if 'account_from' in params:
            path_params['accountFrom'] = params['account_from']  # noqa: E501
        if 'account_to' in params:
            path_params['accountTo'] = params['account_to']  # noqa: E501
        if 'use_due_date' in params:
            path_params['useDueDate'] = params['use_due_date']  # noqa: E501
        if 'account_type' in params:
            path_params['accountType'] = params['account_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/accounts?action=payables-by-age', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def accountsactionprofit_and_loss_grouped_get(self, financial_year, **kwargs):  # noqa: E501
        """accountsactionprofit_and_loss_grouped_get  # noqa: E501

        profit-and-loss-grouped Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accountsactionprofit_and_loss_grouped_get(financial_year, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object financial_year: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accountsactionprofit_and_loss_grouped_get_with_http_info(financial_year, **kwargs)  # noqa: E501
        else:
            (data) = self.accountsactionprofit_and_loss_grouped_get_with_http_info(financial_year, **kwargs)  # noqa: E501
            return data

    def accountsactionprofit_and_loss_grouped_get_with_http_info(self, financial_year, **kwargs):  # noqa: E501
        """accountsactionprofit_and_loss_grouped_get  # noqa: E501

        profit-and-loss-grouped Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accountsactionprofit_and_loss_grouped_get_with_http_info(financial_year, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object financial_year: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['financial_year']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accountsactionprofit_and_loss_grouped_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'financial_year' is set
        if ('financial_year' not in params or
                params['financial_year'] is None):
            raise ValueError("Missing the required parameter `financial_year` when calling `accountsactionprofit_and_loss_grouped_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'financial_year' in params:
            path_params['FinancialYear'] = params['financial_year']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/accounts?action=profit-and-loss-grouped', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def accountsactionprofit_and_loss_periodical_get(self, financial_year, **kwargs):  # noqa: E501
        """accountsactionprofit_and_loss_periodical_get  # noqa: E501

        profit-and-loss-periodical Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accountsactionprofit_and_loss_periodical_get(financial_year, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object financial_year: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accountsactionprofit_and_loss_periodical_get_with_http_info(financial_year, **kwargs)  # noqa: E501
        else:
            (data) = self.accountsactionprofit_and_loss_periodical_get_with_http_info(financial_year, **kwargs)  # noqa: E501
            return data

    def accountsactionprofit_and_loss_periodical_get_with_http_info(self, financial_year, **kwargs):  # noqa: E501
        """accountsactionprofit_and_loss_periodical_get  # noqa: E501

        profit-and-loss-periodical Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accountsactionprofit_and_loss_periodical_get_with_http_info(financial_year, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object financial_year: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['financial_year']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accountsactionprofit_and_loss_periodical_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'financial_year' is set
        if ('financial_year' not in params or
                params['financial_year'] is None):
            raise ValueError("Missing the required parameter `financial_year` when calling `accountsactionprofit_and_loss_periodical_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'financial_year' in params:
            path_params['FinancialYear'] = params['financial_year']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/accounts?action=profit-and-loss-periodical', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def accountsactionsaftmapping_accounts_get(self, **kwargs):  # noqa: E501
        """accountsactionsaftmapping_accounts_get  # noqa: E501

        saftmapping-accounts Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accountsactionsaftmapping_accounts_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[SaftMappingAccount]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accountsactionsaftmapping_accounts_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.accountsactionsaftmapping_accounts_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def accountsactionsaftmapping_accounts_get_with_http_info(self, **kwargs):  # noqa: E501
        """accountsactionsaftmapping_accounts_get  # noqa: E501

        saftmapping-accounts Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accountsactionsaftmapping_accounts_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[SaftMappingAccount]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accountsactionsaftmapping_accounts_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/accounts?action=saftmapping-accounts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SaftMappingAccount]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def accountsactionset_account_visibility_group_post(self, account_visibility_group_id, **kwargs):  # noqa: E501
        """accountsactionset_account_visibility_group_post  # noqa: E501

        set-account-visibility-group Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accountsactionset_account_visibility_group_post(account_visibility_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object account_visibility_group_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accountsactionset_account_visibility_group_post_with_http_info(account_visibility_group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.accountsactionset_account_visibility_group_post_with_http_info(account_visibility_group_id, **kwargs)  # noqa: E501
            return data

    def accountsactionset_account_visibility_group_post_with_http_info(self, account_visibility_group_id, **kwargs):  # noqa: E501
        """accountsactionset_account_visibility_group_post  # noqa: E501

        set-account-visibility-group Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accountsactionset_account_visibility_group_post_with_http_info(account_visibility_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object account_visibility_group_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_visibility_group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accountsactionset_account_visibility_group_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_visibility_group_id' is set
        if ('account_visibility_group_id' not in params or
                params['account_visibility_group_id'] is None):
            raise ValueError("Missing the required parameter `account_visibility_group_id` when calling `accountsactionset_account_visibility_group_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_visibility_group_id' in params:
            path_params['accountVisibilityGroupID'] = params['account_visibility_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/accounts?action=set-account-visibility-group', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def accountsactionset_saftmappings_put(self, **kwargs):  # noqa: E501
        """accountsactionset_saftmappings_put  # noqa: E501

        set-saftmappings Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accountsactionset_saftmappings_put(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accountsactionset_saftmappings_put_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.accountsactionset_saftmappings_put_with_http_info(**kwargs)  # noqa: E501
            return data

    def accountsactionset_saftmappings_put_with_http_info(self, **kwargs):  # noqa: E501
        """accountsactionset_saftmappings_put  # noqa: E501

        set-saftmappings Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accountsactionset_saftmappings_put_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accountsactionset_saftmappings_put" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/accounts?action=set-saftmappings', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def accountsactionsynchronize_ns4102_as_put(self, **kwargs):  # noqa: E501
        """accountsactionsynchronize_ns4102_as_put  # noqa: E501

        synchronize-ns4102-as Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accountsactionsynchronize_ns4102_as_put(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accountsactionsynchronize_ns4102_as_put_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.accountsactionsynchronize_ns4102_as_put_with_http_info(**kwargs)  # noqa: E501
            return data

    def accountsactionsynchronize_ns4102_as_put_with_http_info(self, **kwargs):  # noqa: E501
        """accountsactionsynchronize_ns4102_as_put  # noqa: E501

        synchronize-ns4102-as Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accountsactionsynchronize_ns4102_as_put_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accountsactionsynchronize_ns4102_as_put" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/accounts?action=synchronize-ns4102-as', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def accountsactionvalid_get(self, **kwargs):  # noqa: E501
        """accountsactionvalid_get  # noqa: E501

        valid Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accountsactionvalid_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accountsactionvalid_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.accountsactionvalid_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def accountsactionvalid_get_with_http_info(self, **kwargs):  # noqa: E501
        """accountsactionvalid_get  # noqa: E501

        valid Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accountsactionvalid_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accountsactionvalid_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/accounts?action=valid', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def accountsactionvalid_with_hidden_get(self, **kwargs):  # noqa: E501
        """accountsactionvalid_with_hidden_get  # noqa: E501

        valid-with-hidden Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accountsactionvalid_with_hidden_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accountsactionvalid_with_hidden_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.accountsactionvalid_with_hidden_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def accountsactionvalid_with_hidden_get_with_http_info(self, **kwargs):  # noqa: E501
        """accountsactionvalid_with_hidden_get  # noqa: E501

        valid-with-hidden Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accountsactionvalid_with_hidden_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accountsactionvalid_with_hidden_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/accounts?action=valid-with-hidden', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
