# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class EHFLogApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def ehf_get(self, **kwargs):  # noqa: E501
        """ehf_get  # noqa: E501

        Query EHFLog  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ehf_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[EHFLog]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ehf_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.ehf_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def ehf_get_with_http_info(self, **kwargs):  # noqa: E501
        """ehf_get  # noqa: E501

        Query EHFLog  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ehf_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[EHFLog]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ehf_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ehf', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EHFLog]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ehf_id_delete(self, id, **kwargs):  # noqa: E501
        """ehf_id_delete  # noqa: E501

        Delete EHFLog  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ehf_id_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: EHFLog
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ehf_id_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.ehf_id_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def ehf_id_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """ehf_id_delete  # noqa: E501

        Delete EHFLog  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ehf_id_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: EHFLog
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ehf_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `ehf_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ehf/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EHFLog',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ehf_id_get(self, id, **kwargs):  # noqa: E501
        """ehf_id_get  # noqa: E501

        Get EHFLog  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ehf_id_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: EHFLog
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ehf_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.ehf_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def ehf_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """ehf_id_get  # noqa: E501

        Get EHFLog  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ehf_id_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: EHFLog
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ehf_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `ehf_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ehf/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EHFLog',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ehf_id_put(self, body, id, **kwargs):  # noqa: E501
        """ehf_id_put  # noqa: E501

        Update EHFLog  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ehf_id_put(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EHFLog body: (required)
        :param int id: (required)
        :return: EHFLog
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ehf_id_put_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.ehf_id_put_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def ehf_id_put_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """ehf_id_put  # noqa: E501

        Update EHFLog  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ehf_id_put_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EHFLog body: (required)
        :param int id: (required)
        :return: EHFLog
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ehf_id_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `ehf_id_put`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `ehf_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ehf/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EHFLog',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ehf_post(self, body, **kwargs):  # noqa: E501
        """ehf_post  # noqa: E501

        Create EHFLog  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ehf_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EHFLog body: (required)
        :return: EHFLog
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ehf_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.ehf_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def ehf_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """ehf_post  # noqa: E501

        Create EHFLog  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ehf_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EHFLog body: (required)
        :return: EHFLog
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ehf_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `ehf_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ehf', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EHFLog',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ehfactionactivate_post(self, service, direction, **kwargs):  # noqa: E501
        """ehfactionactivate_post  # noqa: E501

        activate Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ehfactionactivate_post(service, direction, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object service: (required)
        :param Object direction: (required)
        :param EHFCustomer body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ehfactionactivate_post_with_http_info(service, direction, **kwargs)  # noqa: E501
        else:
            (data) = self.ehfactionactivate_post_with_http_info(service, direction, **kwargs)  # noqa: E501
            return data

    def ehfactionactivate_post_with_http_info(self, service, direction, **kwargs):  # noqa: E501
        """ehfactionactivate_post  # noqa: E501

        activate Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ehfactionactivate_post_with_http_info(service, direction, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object service: (required)
        :param Object direction: (required)
        :param EHFCustomer body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service', 'direction', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ehfactionactivate_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service' is set
        if ('service' not in params or
                params['service'] is None):
            raise ValueError("Missing the required parameter `service` when calling `ehfactionactivate_post`")  # noqa: E501
        # verify the required parameter 'direction' is set
        if ('direction' not in params or
                params['direction'] is None):
            raise ValueError("Missing the required parameter `direction` when calling `ehfactionactivate_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service' in params:
            path_params['service'] = params['service']  # noqa: E501
        if 'direction' in params:
            path_params['direction'] = params['direction']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ehf?action=activate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ehfactiondeactivate_post(self, service, **kwargs):  # noqa: E501
        """ehfactiondeactivate_post  # noqa: E501

        deactivate Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ehfactiondeactivate_post(service, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object service: (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ehfactiondeactivate_post_with_http_info(service, **kwargs)  # noqa: E501
        else:
            (data) = self.ehfactiondeactivate_post_with_http_info(service, **kwargs)  # noqa: E501
            return data

    def ehfactiondeactivate_post_with_http_info(self, service, **kwargs):  # noqa: E501
        """ehfactiondeactivate_post  # noqa: E501

        deactivate Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ehfactiondeactivate_post_with_http_info(service, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object service: (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ehfactiondeactivate_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service' is set
        if ('service' not in params or
                params['service'] is None):
            raise ValueError("Missing the required parameter `service` when calling `ehfactiondeactivate_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service' in params:
            path_params['service'] = params['service']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ehf?action=deactivate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ehfactionimport_get(self, file_id, **kwargs):  # noqa: E501
        """ehfactionimport_get  # noqa: E501

        import Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ehfactionimport_get(file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object file_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ehfactionimport_get_with_http_info(file_id, **kwargs)  # noqa: E501
        else:
            (data) = self.ehfactionimport_get_with_http_info(file_id, **kwargs)  # noqa: E501
            return data

    def ehfactionimport_get_with_http_info(self, file_id, **kwargs):  # noqa: E501
        """ehfactionimport_get  # noqa: E501

        import Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ehfactionimport_get_with_http_info(file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object file_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ehfactionimport_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'file_id' is set
        if ('file_id' not in params or
                params['file_id'] is None):
            raise ValueError("Missing the required parameter `file_id` when calling `ehfactionimport_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'file_id' in params:
            path_params['fileID'] = params['file_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ehf?action=import', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ehfactionis_ehf_receiver_get(self, peppoladdress, entitytype, **kwargs):  # noqa: E501
        """ehfactionis_ehf_receiver_get  # noqa: E501

        is-ehf-receiver Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ehfactionis_ehf_receiver_get(peppoladdress, entitytype, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object peppoladdress: (required)
        :param Object entitytype: (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ehfactionis_ehf_receiver_get_with_http_info(peppoladdress, entitytype, **kwargs)  # noqa: E501
        else:
            (data) = self.ehfactionis_ehf_receiver_get_with_http_info(peppoladdress, entitytype, **kwargs)  # noqa: E501
            return data

    def ehfactionis_ehf_receiver_get_with_http_info(self, peppoladdress, entitytype, **kwargs):  # noqa: E501
        """ehfactionis_ehf_receiver_get  # noqa: E501

        is-ehf-receiver Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ehfactionis_ehf_receiver_get_with_http_info(peppoladdress, entitytype, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object peppoladdress: (required)
        :param Object entitytype: (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['peppoladdress', 'entitytype']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ehfactionis_ehf_receiver_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'peppoladdress' is set
        if ('peppoladdress' not in params or
                params['peppoladdress'] is None):
            raise ValueError("Missing the required parameter `peppoladdress` when calling `ehfactionis_ehf_receiver_get`")  # noqa: E501
        # verify the required parameter 'entitytype' is set
        if ('entitytype' not in params or
                params['entitytype'] is None):
            raise ValueError("Missing the required parameter `entitytype` when calling `ehfactionis_ehf_receiver_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'peppoladdress' in params:
            path_params['peppoladdress'] = params['peppoladdress']  # noqa: E501
        if 'entitytype' in params:
            path_params['entitytype'] = params['entitytype']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ehf?action=is-ehf-receiver', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ehfactionparse_get(self, file_id, **kwargs):  # noqa: E501
        """ehfactionparse_get  # noqa: E501

        parse Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ehfactionparse_get(file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object file_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ehfactionparse_get_with_http_info(file_id, **kwargs)  # noqa: E501
        else:
            (data) = self.ehfactionparse_get_with_http_info(file_id, **kwargs)  # noqa: E501
            return data

    def ehfactionparse_get_with_http_info(self, file_id, **kwargs):  # noqa: E501
        """ehfactionparse_get  # noqa: E501

        parse Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ehfactionparse_get_with_http_info(file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object file_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ehfactionparse_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'file_id' is set
        if ('file_id' not in params or
                params['file_id'] is None):
            raise ValueError("Missing the required parameter `file_id` when calling `ehfactionparse_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'file_id' in params:
            path_params['fileID'] = params['file_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ehf?action=parse', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ehfactionservicemetadata_get(self, peppoladdress, entitytype, **kwargs):  # noqa: E501
        """ehfactionservicemetadata_get  # noqa: E501

        servicemetadata Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ehfactionservicemetadata_get(peppoladdress, entitytype, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object peppoladdress: (required)
        :param Object entitytype: (required)
        :return: ServiceMetadataDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ehfactionservicemetadata_get_with_http_info(peppoladdress, entitytype, **kwargs)  # noqa: E501
        else:
            (data) = self.ehfactionservicemetadata_get_with_http_info(peppoladdress, entitytype, **kwargs)  # noqa: E501
            return data

    def ehfactionservicemetadata_get_with_http_info(self, peppoladdress, entitytype, **kwargs):  # noqa: E501
        """ehfactionservicemetadata_get  # noqa: E501

        servicemetadata Action  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ehfactionservicemetadata_get_with_http_info(peppoladdress, entitytype, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Object peppoladdress: (required)
        :param Object entitytype: (required)
        :return: ServiceMetadataDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['peppoladdress', 'entitytype']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ehfactionservicemetadata_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'peppoladdress' is set
        if ('peppoladdress' not in params or
                params['peppoladdress'] is None):
            raise ValueError("Missing the required parameter `peppoladdress` when calling `ehfactionservicemetadata_get`")  # noqa: E501
        # verify the required parameter 'entitytype' is set
        if ('entitytype' not in params or
                params['entitytype'] is None):
            raise ValueError("Missing the required parameter `entitytype` when calling `ehfactionservicemetadata_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'peppoladdress' in params:
            path_params['peppoladdress'] = params['peppoladdress']  # noqa: E501
        if 'entitytype' in params:
            path_params['entitytype'] = params['entitytype']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ehf?action=servicemetadata', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ServiceMetadataDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
